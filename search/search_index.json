{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"pjoc-team \u81f4\u529b\u4e8e\u5f00\u6e90\u3002\u56e2\u961f\u5730\u5740\u9879\u76ee\u5730\u5740\uff1a pjoc-team \u9879\u76ee \u652f\u4ed8\u7f51\u5173 \u57fa\u4e8ego\u5f00\u53d1\u7684\u652f\u4ed8\u7f51\u5173\u7cfb\u7edf\uff0c\u7528\u4e8e\u7b80\u5316\u4f01\u4e1a\u3001\u7535\u5546\u5e73\u53f0\u3001\u4e2a\u4eba\u7f51\u7ad9\u63a5\u5165\u652f\u4ed8\u80fd\u529b\u3002 \u4f7f\u7528\u4e00\u4e2a\u63a5\u53e3\u534f\u8bae\u5373\u53ef\u63a5\u5165\u652f\u4ed8\uff0c\u63a5\u53e3\u6587\u6863\u53c2\u8003\uff1a pay-proto \u3002 \u67b6\u6784\u8bbe\u8ba1\uff1a https://pjoc.pub/pay/design/architecture/ license Apache-2.0 \u52a0\u5165\u6211\u4eec QQ\u7fa4","title":"Home"},{"location":"#pjoc-team","text":"\u81f4\u529b\u4e8e\u5f00\u6e90\u3002\u56e2\u961f\u5730\u5740\u9879\u76ee\u5730\u5740\uff1a pjoc-team","title":"pjoc-team"},{"location":"#_1","text":"","title":"\u9879\u76ee"},{"location":"#_2","text":"\u57fa\u4e8ego\u5f00\u53d1\u7684\u652f\u4ed8\u7f51\u5173\u7cfb\u7edf\uff0c\u7528\u4e8e\u7b80\u5316\u4f01\u4e1a\u3001\u7535\u5546\u5e73\u53f0\u3001\u4e2a\u4eba\u7f51\u7ad9\u63a5\u5165\u652f\u4ed8\u80fd\u529b\u3002 \u4f7f\u7528\u4e00\u4e2a\u63a5\u53e3\u534f\u8bae\u5373\u53ef\u63a5\u5165\u652f\u4ed8\uff0c\u63a5\u53e3\u6587\u6863\u53c2\u8003\uff1a pay-proto \u3002 \u67b6\u6784\u8bbe\u8ba1\uff1a https://pjoc.pub/pay/design/architecture/","title":"\u652f\u4ed8\u7f51\u5173"},{"location":"#license","text":"Apache-2.0","title":"license"},{"location":"#_3","text":"","title":"\u52a0\u5165\u6211\u4eec"},{"location":"#qq","text":"","title":"QQ\u7fa4"},{"location":"about/","text":"About","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"md-demo/","text":"Design markdown demo Cloudinsight sprites example webapp daemon DNS Resolver Idle Processing Web Browser Idle Processing Waiting Web User Idle Waiting 0 100 300 400 700 URL Resolve URL Goofy Goofy MickeyMouse MickeyMouse calls responds Goofy Goofy MickeyMouse MickeyMouse calls2 responds Bob Bob Alice Alice [010] Authentication Request [020] Authentication Response dummy Message 30 Yet another authentication Request Message 40 Yet another authentication Response dummy Message 50 Yet another authentication Request Message 51 Yet another authentication Response This is a folder You can use separator of different kind and style This is a nodees1 You can use separator of different kind and style This is a database ----AQ1f You can use separator of different kind and style This is a usecase You can use separator of different kind and style $$ AVG=\\frac{HITS}{AT BATS} $$ st=>start: Start:>http://www.google.com[blank] e=>end:>http://www.google.com op1=>operation: My Operation sub1=>subroutine: My Subroutine cond=>condition: Yes or No?:>http://www.google.com io=>inputoutput: catch something... st->op1->cond cond(yes)->io->e cond(no)->sub1(right)->op1 Title: Here is a title A->B: Normal line B-->C: Dashed line C->>D: Open arrow D-->>A: Dashed open arrow","title":"Design"},{"location":"md-demo/#design","text":"","title":"Design"},{"location":"md-demo/#markdown-demo","text":"Cloudinsight sprites example webapp daemon DNS Resolver Idle Processing Web Browser Idle Processing Waiting Web User Idle Waiting 0 100 300 400 700 URL Resolve URL Goofy Goofy MickeyMouse MickeyMouse calls responds Goofy Goofy MickeyMouse MickeyMouse calls2 responds Bob Bob Alice Alice [010] Authentication Request [020] Authentication Response dummy Message 30 Yet another authentication Request Message 40 Yet another authentication Response dummy Message 50 Yet another authentication Request Message 51 Yet another authentication Response This is a folder You can use separator of different kind and style This is a nodees1 You can use separator of different kind and style This is a database ----AQ1f You can use separator of different kind and style This is a usecase You can use separator of different kind and style $$ AVG=\\frac{HITS}{AT BATS} $$ st=>start: Start:>http://www.google.com[blank] e=>end:>http://www.google.com op1=>operation: My Operation sub1=>subroutine: My Subroutine cond=>condition: Yes or No?:>http://www.google.com io=>inputoutput: catch something... st->op1->cond cond(yes)->io->e cond(no)->sub1(right)->op1 Title: Here is a title A->B: Normal line B-->C: Dashed line C->>D: Open arrow D-->>A: Dashed open arrow","title":"markdown demo"},{"location":"api/notify/","text":"const ui = SwaggerUIBundle({ url: 'https://pjoc.pub/pay-proto/apis/notify.swagger.json', dom_id: '#swagger-ui', })","title":"2.2 \u901a\u77e5\u670d\u52a1"},{"location":"api/pay-gateway/","text":"const ui = SwaggerUIBundle({ url: 'https://pjoc.pub/pay-proto/apis/pay_gateway.swagger.json', dom_id: '#swagger-ui', })","title":"2.1 \u652f\u4ed8\u7f51\u5173"},{"location":"pay/design/architecture/","text":"\u652f\u4ed8\u7cfb\u7edf-\u67b6\u6784\u8bbe\u8ba1 span.green { color: #54CC76; } span.purple { color: #7949B3; } span.yellow { color: #FFCA80; } \u8bbe\u8ba1 \u76ee\u6807 \u7b80\u5316\u903b\u8f91 \uff1a\u8fb9\u754c\u6e05\u6670\u3001\u65e0\u5197\u4f59\u903b\u8f91\u3001\u65b9\u4fbf\u6d4b\u8bd5 \u5206\u5e03\u5f0f \uff1a\u5bb9\u5668\u5316\u90e8\u7f72\u3001\u65e0\u72b6\u6001\u3001\u53ef\u6269\u5c55\u3001\u4f4e\u8026\u5408 \u9ad8\u7528\u6027 \uff1a\u673a\u623f\u591a\u4e3b\u3001\u81ea\u52a8\u6269\u5bb9\u3001\u6570\u636e\u5e93\u6700\u7ec8\u4e00\u81f4 \u62c6\u5206 \u4e1a\u52a1 \uff1a\u4ee3\u91d1\u5238\u3001\u6d3b\u52a8 \u652f\u4ed8\u4e2d\u5fc3 \uff1a\u5546\u54c1\u7ba1\u7406\u3001\u4ef7\u683c\u7ba1\u7406\u3001\u53d1\u8d27\u8def\u7531 \u652f\u4ed8\u7f51\u5173 \uff1a\u4e0b\u5355\u3001\u652f\u4ed8\u3001\u4ee3\u6263\u3001\u901a\u77e5\u3001\u540e\u7763\uff08 \u8ba2\u5355\u4e8c\u6b21\u786e\u8ba4 \uff09\u3001\u5bf9\u8d26\u3001\u6e20\u9053\u670d\u52a1 \u5b9e\u73b0 \u7f51\u5173 \u4f53\u7cfb \u652f\u4ed8\u7f51\u5173\uff1a\u63a5\u53d7\u4e0b\u5355\u8bf7\u6c42\u3001\u6821\u9a8c\u7b7e\u540d\u3001\u751f\u6210\u8ba2\u5355\u3001\u64cd\u4f5cDB\u3001\u8c03\u7528\u6e20\u9053\u670d\u52a1 \u4ee3\u6263\u7f51\u5173\uff1a\u5904\u7406\u7b7e\u7ea6\u8bf7\u6c42\u3001\u4ee3\u6263\u8bf7\u6c42\u3001\u4e92\u65a5\u903b\u8f91 \u901a\u77e5\u7f51\u5173\uff1a\u5904\u7406\u6e20\u9053\u901a\u77e5 \u6e20\u9053\u670d\u52a1\u96c6\u5408 \u539f\u5219 \u65e0db\u64cd\u4f5c \u65e0\u8ba2\u5355\u64cd\u4f5c \u53ea\u63a5\u53d7\u8bf7\u6c42\u5e76\u54cd\u5e94\u5bf9\u5e94\u6570\u636e \u4e0d\u5173\u5fc3\u4e0a\u5c42\u903b\u8f91 \u5fae\u670d\u52a1\u5316 service: wechat alipay unionpay rpc: grpc://wechat:8080 grpc://alipay:8080 http://unionpay:8080 \u6e20\u9053\u5fae\u670d\u52a1\u5316\uff0c\u53ef\u4ee5\u5728\u56fd\u9645\u5316\u4e1a\u52a1\u4e2d\u5e26\u6765\u66f4\u4fbf\u6377\u7684\u5dee\u5f02\u5316\u90e8\u7f72 \u9762\u5411 \u534f\u8bae \u7f16\u7a0b pay(\u7528\u6237\u89e6\u53d1\u6263\u6b3e\u6216\u7b7e\u7ea6) method\uff1aalipay/wechat/unionpay from: WEB/MWEB/APP/SDK/BANK/SERVER type: pay/sign_pay confirm_pay(\u786e\u8ba4\u652f\u4ed8\uff0c\u7528\u6237\u4e8c\u6b21\u9a8c\u8bc1) from type method refund(\u9000\u6b3e) transfer(\u8f6c\u8d26) \u6269\u5c55 &\u914d\u7f6e etcd\u914d\u7f6e\u7ba1\u7406 \u9ad8\u53ef\u7528 \u5b9e\u65f6\u53d8\u66f4\u914d\u7f6e \u8de8\u5730\u57df\u540c\u6b65 \u7b80\u5316\u914d\u7f6e \u4f7f\u7528field tag\u751f\u6210json \u7ba1\u7406\u540e\u53f0\u6839\u636efield json\u751f\u6210\u914d\u7f6e\u8868\u5355 System Context diagram for Pay System \u00abboundary\u00bb Company [Enterprise] \u00abexternal_system\u00bb Business System Allows customers to view information about their info and orders. \u00absystem\u00bb Pay center system The system for biz. \u00absystem\u00bb Pay gateway System The system for user to pay or auto_renew. Customer User \u00abperson\u00bb \u00abexternal_system\u00bb Channel Pay System The real pay system to handle users\u2019 pay orders. Show products. Pay request Order request Notify Order request Notify Pay Notify \u652f\u4ed8\u7f51\u5173\u7cfb\u7edf \u00abboundary\u00bb Pay Gateway [System] \u00abcontainer\u00bb Api Gateway [Service discovery, Canary release, Parameters convert\u2026 Implements by ingress/zuul] \u00abcontainer\u00bb Pay Service [Generate order] \u00abcontainer\u00bb Sign Service [For Monthly/Quarterly/Yearly sign and renew] \u00abcontainer\u00bb Callback Service [Receive callback from channels.] \u00abcontainer\u00bb Notify Service [Notify to biz.] \u00abcontainer\u00bb Order Supervision [Query order status.] \u00abcontainer\u00bb Channel Services [Deliver pay requests between gateways and channels.] \u00abcontainer\u00bb DB Service [Db operations.] \u00abcontainer\u00bb Queue [Message queue.] \u00abcontainer\u00bb Database [mysql,middlewares] \u00abcontainer\u00bb etcd [Config system.] \u00abexternal_system\u00bb Pay center For biz \u00abexternal_system\u00bb Pay Channels wechat/alipay/unionpay\u2026 Push message Query orders Pull message \u652f\u4ed8\u8c03\u7528\u65f6\u5e8f\u56fe Internal Service User User Channel Channel PayCenter(Biz) PayCenter(Biz) PayGateway PayGateway CallbackGateway CallbackGateway PayChannels PayChannels NotifyGateway NotifyGateway PayDatabase PayDatabase MySQL MySQL Queue Queue Page Create Order Verify Generate Order Save Order SQL OK OK Order Request Order Request Response Data Response Show QrCode or redirect url Pay Notify Notify Verify OK Update SQL OK OK Process result push OK OK Redirect Url Show PayResult Page loop pull Notify alt [notify success] OK Update notify status OK [notify failed] loop [10 times] Notify \u7b7e\u7ea6 Internal Service User User Channel Channel VirtualAssetsSystem VirtualAssetsSystem PayCenter(Biz) PayCenter(Biz) PayService PayService SignService SignService CallbackService CallbackService SignCallbackService SignCallbackService ChannelServices ChannelServices PayDatabase PayDatabase 1 Sign request 2 Sign(app_id, uid, product_id, amount) 3 IsExists(uid, app_id, product_id, channel) 4 OK 5 Sign request 6 Generate sign 7 Sign request 8 Response 9 Response data 10 Show QR or direct to url 11 Confirm 12 Notify 13 Query sign record 14 OK 15 Verify 16 OK 17 Update status 18 OK 19 OK 20 Direct 21 Check expire 22 Expire events(uid, product_id) 23 Renew(uid, sign_id) 24 Query sign record 25 OK 26 Pay 27 Generate order 28 OK 29 Order request 30 Generate message 31 Order request 32 OK 33 OK 34 OK 35 Notify 36 Query order 37 Verify 38 Notify 39 Notify 40 ok 41 ok \u6570\u636e\u5e93 \u9ad8\u53ef\u7528 \u8de8DC\u540c\u6b65\uff1a\u57fa\u4e8eotter\u8fdb\u884c\u540c\u6b65\uff0c\u53cc\u5411\u540c\u6b65\uff08\u591a\u673a\u623f\u4f7f\u7528\u661f\u578b\u7ed3\u6784\uff09 \u540cDC\u9ad8\u53ef\u7528\uff1a\u57fa\u4e8emycat\u548cmgr\uff0c\u5b9e\u73b0\u5927\u5bb9\u91cf\u3001\u9ad8\u53ef\u7528db\u96c6\u7fa4 mgr \u7684\u5fc3\u8df3\u68c0\u6d4b\uff1a\u4e8c\u6b21\u5f00\u53d1mycat\uff0c\u5bf9mgr\u8282\u70b9\u72b6\u6001\u5b9e\u65f6\u68c0\u6d4b\u5e76\u589e\u5220\u6545\u969cdb \u5e94\u7528\u5c42\uff1a\u53bb\u9664\u81ea\u589e\u4e3b\u952e\uff0c\u6309\u673a\u623f\u3001\u673a\u5668\u751f\u6210\u65e0\u51b2\u7a81\u3001\u6709\u5e8f\u7684\u6d41\u6c34\u53f7\uff0c\u9632\u6b62\u591a\u673a\u623f\u6570\u636e\u51b2\u7a81 \u00abboundary\u00bb idc A (Master) \u00abboundary\u00bb k8s cluster \u00absystem\u00bb Pay Gateway \u00abboundary\u00bb Channel Services \u00absystem\u00bb DB \u00abboundary\u00bb idc B \u00abboundary\u00bb k8s cluster \u00absystem\u00bb Pay Gateway \u00abboundary\u00bb Channel Services \u00absystem\u00bb DB \u00absystem\u00bb Otter Sync data \u00abexternal_system\u00bb Mycat \u00abcontainer\u00bb Apps [Gateways] \u00abcontainer\u00bb Channel Wechat [Channel service] \u00abcontainer\u00bb Channel Alipay [Channel service] \u00abcontainer\u00bb Channel \u2026 [Channel service] \u00abcontainer\u00bb db [Group replication] \u00abcontainer\u00bb db [Group replication] \u00abcontainer\u00bb db [Group replication] \u00absystem\u00bb Otter Sync data \u00abexternal_system\u00bb Mycat \u00abcontainer\u00bb Apps [Gateways] \u00abcontainer\u00bb Channel Wechat [Channel service] \u00abcontainer\u00bb Channel Alipay [Channel service] \u00abcontainer\u00bb Channel \u2026 [Channel service] \u00abcontainer\u00bb db [Group replication] \u00abcontainer\u00bb db [Group replication] \u00abcontainer\u00bb db [Group replication] W/R W/R W/R Replication Replication binlog binlog binlog W/R W/R W/R Replication Replication binlog binlog binlog sync \u90e8\u7f72\u67b6\u6784 Kubernetes Channels PayGateway QueryGateway RefundGateway TransferGateway CallbackGateway NotifyGateway PayDatabase PayManagerSystem OrderMonitor PayCenter Channel\u2026 ChannelWechat ChannelAlipay mysql \u4ea4\u4e92 \u914d\u7f6e \u6838\u5fc3\u4ea4\u6613\u7cfb\u7edf\u662f\u5c06\u914d\u7f6e\u4fe1\u606f\u5b58\u50a8\u5728 etcd \u5bb9\u5668\u5185 \u6e20\u9053 \u57fa\u7840\u76ee\u5f55: /foo/bar/pay/config \u6bcf\u4e2a\u6e20\u9053\u5360\u7528\u4e00\u4e2a\u6587\u4ef6\u5939\uff0c\u6bcf\u4e2a\u6e20\u9053\u8d26\u6237\u5360\u7528\u4e00\u4e2a \u6587\u4ef6 \uff0c\u4f8b\u5982\u5fae\u4fe1\u5b58\u653e\u5728 /foo/bar/pay/config/wechat \u76ee\u5f55\u4e0b\uff0cappId: 2088123456 \u6240\u5728\u7684\u914d\u7f6e\u4fe1\u606f\u5b58\u50a8\u5728 /foo/bar/pay/config/wechat/2088123456","title":"1.3 \u67b6\u6784"},{"location":"pay/design/architecture/#-","text":"span.green { color: #54CC76; } span.purple { color: #7949B3; } span.yellow { color: #FFCA80; }","title":"\u652f\u4ed8\u7cfb\u7edf-\u67b6\u6784\u8bbe\u8ba1"},{"location":"pay/design/architecture/#_1","text":"","title":"\u8bbe\u8ba1"},{"location":"pay/design/architecture/#_2","text":"\u7b80\u5316\u903b\u8f91 \uff1a\u8fb9\u754c\u6e05\u6670\u3001\u65e0\u5197\u4f59\u903b\u8f91\u3001\u65b9\u4fbf\u6d4b\u8bd5 \u5206\u5e03\u5f0f \uff1a\u5bb9\u5668\u5316\u90e8\u7f72\u3001\u65e0\u72b6\u6001\u3001\u53ef\u6269\u5c55\u3001\u4f4e\u8026\u5408 \u9ad8\u7528\u6027 \uff1a\u673a\u623f\u591a\u4e3b\u3001\u81ea\u52a8\u6269\u5bb9\u3001\u6570\u636e\u5e93\u6700\u7ec8\u4e00\u81f4","title":"\u76ee\u6807"},{"location":"pay/design/architecture/#_3","text":"\u4e1a\u52a1 \uff1a\u4ee3\u91d1\u5238\u3001\u6d3b\u52a8 \u652f\u4ed8\u4e2d\u5fc3 \uff1a\u5546\u54c1\u7ba1\u7406\u3001\u4ef7\u683c\u7ba1\u7406\u3001\u53d1\u8d27\u8def\u7531 \u652f\u4ed8\u7f51\u5173 \uff1a\u4e0b\u5355\u3001\u652f\u4ed8\u3001\u4ee3\u6263\u3001\u901a\u77e5\u3001\u540e\u7763\uff08 \u8ba2\u5355\u4e8c\u6b21\u786e\u8ba4 \uff09\u3001\u5bf9\u8d26\u3001\u6e20\u9053\u670d\u52a1","title":"\u62c6\u5206"},{"location":"pay/design/architecture/#_4","text":"","title":"\u5b9e\u73b0"},{"location":"pay/design/architecture/#_5","text":"\u652f\u4ed8\u7f51\u5173\uff1a\u63a5\u53d7\u4e0b\u5355\u8bf7\u6c42\u3001\u6821\u9a8c\u7b7e\u540d\u3001\u751f\u6210\u8ba2\u5355\u3001\u64cd\u4f5cDB\u3001\u8c03\u7528\u6e20\u9053\u670d\u52a1 \u4ee3\u6263\u7f51\u5173\uff1a\u5904\u7406\u7b7e\u7ea6\u8bf7\u6c42\u3001\u4ee3\u6263\u8bf7\u6c42\u3001\u4e92\u65a5\u903b\u8f91 \u901a\u77e5\u7f51\u5173\uff1a\u5904\u7406\u6e20\u9053\u901a\u77e5","title":"\u7f51\u5173\u4f53\u7cfb"},{"location":"pay/design/architecture/#_6","text":"","title":"\u6e20\u9053\u670d\u52a1\u96c6\u5408"},{"location":"pay/design/architecture/#_7","text":"\u65e0db\u64cd\u4f5c \u65e0\u8ba2\u5355\u64cd\u4f5c \u53ea\u63a5\u53d7\u8bf7\u6c42\u5e76\u54cd\u5e94\u5bf9\u5e94\u6570\u636e \u4e0d\u5173\u5fc3\u4e0a\u5c42\u903b\u8f91","title":"\u539f\u5219"},{"location":"pay/design/architecture/#_8","text":"service: wechat alipay unionpay rpc: grpc://wechat:8080 grpc://alipay:8080 http://unionpay:8080 \u6e20\u9053\u5fae\u670d\u52a1\u5316\uff0c\u53ef\u4ee5\u5728\u56fd\u9645\u5316\u4e1a\u52a1\u4e2d\u5e26\u6765\u66f4\u4fbf\u6377\u7684\u5dee\u5f02\u5316\u90e8\u7f72","title":"\u5fae\u670d\u52a1\u5316"},{"location":"pay/design/architecture/#_9","text":"pay(\u7528\u6237\u89e6\u53d1\u6263\u6b3e\u6216\u7b7e\u7ea6) method\uff1aalipay/wechat/unionpay from: WEB/MWEB/APP/SDK/BANK/SERVER type: pay/sign_pay confirm_pay(\u786e\u8ba4\u652f\u4ed8\uff0c\u7528\u6237\u4e8c\u6b21\u9a8c\u8bc1) from type method refund(\u9000\u6b3e) transfer(\u8f6c\u8d26)","title":"\u9762\u5411\u534f\u8bae\u7f16\u7a0b"},{"location":"pay/design/architecture/#_10","text":"etcd\u914d\u7f6e\u7ba1\u7406 \u9ad8\u53ef\u7528 \u5b9e\u65f6\u53d8\u66f4\u914d\u7f6e \u8de8\u5730\u57df\u540c\u6b65 \u7b80\u5316\u914d\u7f6e \u4f7f\u7528field tag\u751f\u6210json \u7ba1\u7406\u540e\u53f0\u6839\u636efield json\u751f\u6210\u914d\u7f6e\u8868\u5355 System Context diagram for Pay System \u00abboundary\u00bb Company [Enterprise] \u00abexternal_system\u00bb Business System Allows customers to view information about their info and orders. \u00absystem\u00bb Pay center system The system for biz. \u00absystem\u00bb Pay gateway System The system for user to pay or auto_renew. Customer User \u00abperson\u00bb \u00abexternal_system\u00bb Channel Pay System The real pay system to handle users\u2019 pay orders. Show products. Pay request Order request Notify Order request Notify Pay Notify","title":"\u6269\u5c55&amp;\u914d\u7f6e"},{"location":"pay/design/architecture/#_11","text":"\u00abboundary\u00bb Pay Gateway [System] \u00abcontainer\u00bb Api Gateway [Service discovery, Canary release, Parameters convert\u2026 Implements by ingress/zuul] \u00abcontainer\u00bb Pay Service [Generate order] \u00abcontainer\u00bb Sign Service [For Monthly/Quarterly/Yearly sign and renew] \u00abcontainer\u00bb Callback Service [Receive callback from channels.] \u00abcontainer\u00bb Notify Service [Notify to biz.] \u00abcontainer\u00bb Order Supervision [Query order status.] \u00abcontainer\u00bb Channel Services [Deliver pay requests between gateways and channels.] \u00abcontainer\u00bb DB Service [Db operations.] \u00abcontainer\u00bb Queue [Message queue.] \u00abcontainer\u00bb Database [mysql,middlewares] \u00abcontainer\u00bb etcd [Config system.] \u00abexternal_system\u00bb Pay center For biz \u00abexternal_system\u00bb Pay Channels wechat/alipay/unionpay\u2026 Push message Query orders Pull message","title":"\u652f\u4ed8\u7f51\u5173\u7cfb\u7edf"},{"location":"pay/design/architecture/#_12","text":"Internal Service User User Channel Channel PayCenter(Biz) PayCenter(Biz) PayGateway PayGateway CallbackGateway CallbackGateway PayChannels PayChannels NotifyGateway NotifyGateway PayDatabase PayDatabase MySQL MySQL Queue Queue Page Create Order Verify Generate Order Save Order SQL OK OK Order Request Order Request Response Data Response Show QrCode or redirect url Pay Notify Notify Verify OK Update SQL OK OK Process result push OK OK Redirect Url Show PayResult Page loop pull Notify alt [notify success] OK Update notify status OK [notify failed] loop [10 times] Notify","title":"\u652f\u4ed8\u8c03\u7528\u65f6\u5e8f\u56fe"},{"location":"pay/design/architecture/#_13","text":"Internal Service User User Channel Channel VirtualAssetsSystem VirtualAssetsSystem PayCenter(Biz) PayCenter(Biz) PayService PayService SignService SignService CallbackService CallbackService SignCallbackService SignCallbackService ChannelServices ChannelServices PayDatabase PayDatabase 1 Sign request 2 Sign(app_id, uid, product_id, amount) 3 IsExists(uid, app_id, product_id, channel) 4 OK 5 Sign request 6 Generate sign 7 Sign request 8 Response 9 Response data 10 Show QR or direct to url 11 Confirm 12 Notify 13 Query sign record 14 OK 15 Verify 16 OK 17 Update status 18 OK 19 OK 20 Direct 21 Check expire 22 Expire events(uid, product_id) 23 Renew(uid, sign_id) 24 Query sign record 25 OK 26 Pay 27 Generate order 28 OK 29 Order request 30 Generate message 31 Order request 32 OK 33 OK 34 OK 35 Notify 36 Query order 37 Verify 38 Notify 39 Notify 40 ok 41 ok","title":"\u7b7e\u7ea6"},{"location":"pay/design/architecture/#_14","text":"\u8de8DC\u540c\u6b65\uff1a\u57fa\u4e8eotter\u8fdb\u884c\u540c\u6b65\uff0c\u53cc\u5411\u540c\u6b65\uff08\u591a\u673a\u623f\u4f7f\u7528\u661f\u578b\u7ed3\u6784\uff09 \u540cDC\u9ad8\u53ef\u7528\uff1a\u57fa\u4e8emycat\u548cmgr\uff0c\u5b9e\u73b0\u5927\u5bb9\u91cf\u3001\u9ad8\u53ef\u7528db\u96c6\u7fa4 mgr \u7684\u5fc3\u8df3\u68c0\u6d4b\uff1a\u4e8c\u6b21\u5f00\u53d1mycat\uff0c\u5bf9mgr\u8282\u70b9\u72b6\u6001\u5b9e\u65f6\u68c0\u6d4b\u5e76\u589e\u5220\u6545\u969cdb \u5e94\u7528\u5c42\uff1a\u53bb\u9664\u81ea\u589e\u4e3b\u952e\uff0c\u6309\u673a\u623f\u3001\u673a\u5668\u751f\u6210\u65e0\u51b2\u7a81\u3001\u6709\u5e8f\u7684\u6d41\u6c34\u53f7\uff0c\u9632\u6b62\u591a\u673a\u623f\u6570\u636e\u51b2\u7a81 \u00abboundary\u00bb idc A (Master) \u00abboundary\u00bb k8s cluster \u00absystem\u00bb Pay Gateway \u00abboundary\u00bb Channel Services \u00absystem\u00bb DB \u00abboundary\u00bb idc B \u00abboundary\u00bb k8s cluster \u00absystem\u00bb Pay Gateway \u00abboundary\u00bb Channel Services \u00absystem\u00bb DB \u00absystem\u00bb Otter Sync data \u00abexternal_system\u00bb Mycat \u00abcontainer\u00bb Apps [Gateways] \u00abcontainer\u00bb Channel Wechat [Channel service] \u00abcontainer\u00bb Channel Alipay [Channel service] \u00abcontainer\u00bb Channel \u2026 [Channel service] \u00abcontainer\u00bb db [Group replication] \u00abcontainer\u00bb db [Group replication] \u00abcontainer\u00bb db [Group replication] \u00absystem\u00bb Otter Sync data \u00abexternal_system\u00bb Mycat \u00abcontainer\u00bb Apps [Gateways] \u00abcontainer\u00bb Channel Wechat [Channel service] \u00abcontainer\u00bb Channel Alipay [Channel service] \u00abcontainer\u00bb Channel \u2026 [Channel service] \u00abcontainer\u00bb db [Group replication] \u00abcontainer\u00bb db [Group replication] \u00abcontainer\u00bb db [Group replication] W/R W/R W/R Replication Replication binlog binlog binlog W/R W/R W/R Replication Replication binlog binlog binlog sync","title":"\u6570\u636e\u5e93\u9ad8\u53ef\u7528"},{"location":"pay/design/architecture/#_15","text":"Kubernetes Channels PayGateway QueryGateway RefundGateway TransferGateway CallbackGateway NotifyGateway PayDatabase PayManagerSystem OrderMonitor PayCenter Channel\u2026 ChannelWechat ChannelAlipay mysql","title":"\u90e8\u7f72\u67b6\u6784"},{"location":"pay/design/architecture/#_16","text":"","title":"\u4ea4\u4e92"},{"location":"pay/design/architecture/#_17","text":"\u6838\u5fc3\u4ea4\u6613\u7cfb\u7edf\u662f\u5c06\u914d\u7f6e\u4fe1\u606f\u5b58\u50a8\u5728 etcd \u5bb9\u5668\u5185","title":"\u914d\u7f6e"},{"location":"pay/design/architecture/#_18","text":"\u57fa\u7840\u76ee\u5f55: /foo/bar/pay/config \u6bcf\u4e2a\u6e20\u9053\u5360\u7528\u4e00\u4e2a\u6587\u4ef6\u5939\uff0c\u6bcf\u4e2a\u6e20\u9053\u8d26\u6237\u5360\u7528\u4e00\u4e2a \u6587\u4ef6 \uff0c\u4f8b\u5982\u5fae\u4fe1\u5b58\u653e\u5728 /foo/bar/pay/config/wechat \u76ee\u5f55\u4e0b\uff0cappId: 2088123456 \u6240\u5728\u7684\u914d\u7f6e\u4fe1\u606f\u5b58\u50a8\u5728 /foo/bar/pay/config/wechat/2088123456","title":"\u6e20\u9053"},{"location":"pay/design/biz/","text":"\u540d\u8bcd \u8d26\u6237\u4f59\u989d\uff1a \u4f5c\u4e3a\u6536\u6b3e\u8d26\u6237\uff0c\u5305\u62ec\u53ef\u7ed3\u7b97\u91d1\u989d\u548c\u5e26\u7ed3\u7b97\u91d1\u989d \u4e0d\u53ef\u7528\u4f59\u989d\uff1a \u6307\u7684\u662f\u5f53\u524d\u6536\u6b3e\u8d26\u6237\u4e2d\u4e0d\u53ef\u7528\u7684\u91d1\u989d\uff0c\u5982\u6b63\u5728\u63d0\u73b0\u4e2d\u7684\u91d1\u989d\u90fd\u662f\u4e0d\u53ef\u7528\u4f59\u989d \u53ef\u7ed3\u7b97\u91d1\u989d\uff1a \u6536\u6b3e\u8d26\u6237\u5df2\u7ecf\u7ed3\u7b97\u7684\u91d1\u989d\uff0c\u5df2\u7ed3\u7b97\u7684\u91d1\u989d\u53ef\u63d0\u73b0 \u4fdd\u8bc1\u91d1\uff1a \u6307\u5546\u6237\u5f00\u6237\u8d39\u8d26\u6237 \u7ed3\u91d1\u989d\uff1a \u6536\u6b3e\u8d26\u6237\u7684\u51bb\u7ed3\u91d1\u989d\uff0c\u51bb\u7ed3\u7684\u91d1\u989d\u4e0d\u53ef\u63d0\u73b0 \u4ed8\u4f59\u989d\uff1a \u4f5c\u4e3a\u4ee3\u4ed8\u8d26\u6237\uff0c\u5546\u6237\u901a\u8fc7\u5728\u7ebf\u5145\u503c\u901a\u9053\u5145\u503c\u7684\u91d1\u989d\u4f1a\u8f6c\u5165\u8be5\u8d26\u6237(\u5b9e\u65f6\u5230\u8d26)\uff0c\u53d1\u8d77\u4ee3\u4ed8\u4f1a\u6263\u51cf\u8be5\u8d26\u6237 \u53ef\u7528\u4ee3\u4ed8\u4f59\u989d\uff1a \u6307\u7684\u662f\u5f53\u524d\u4ee3\u4ed8\u8d26\u6237\u4e2d\u4e0d\u53ef\u7528\u7684\u91d1\u989d\uff0c\u5982\u6b63\u5728\u4ee3\u4ed8\u5904\u7406\u4e2d\u7684\u91d1\u989d\u90fd\u662f\u4e0d\u53ef\u7528\u4ee3\u4ed8\u4f59\u989d \u5404\u4e2a \u7cfb\u7edf/\u6a21\u5757 \u529f\u80fd PayCenter \u652f\u4ed8\u4e2d\u5fc3\uff0c\u7528\u4e8e\u6f14\u793a\u652f\u4ed8\u529f\u80fd\u3002\u7528\u6237\u8bbf\u95ee\u7684\u65f6\u5019\u53ef\u4ee5\u5c55\u793a\u652f\u4ed8\u9875\uff0c\u7136\u540e\u9009\u62e9\u652f\u4ed8\u65b9\u5f0f\u6765\u4f53\u9a8c\u652f\u4ed8\u6d41\u7a0b PayGateway \u652f\u4ed8\u7f51\u5173\uff0c\u7528\u4e8e\u5904\u7406\u4e0b\u5355\u8bf7\u6c42\u3002\u529f\u80fd\u6709\uff1a \u6821\u9a8c\u53c2\u6570 \u9a8c\u8bc1\u5546\u6237\u3001\u7b7e\u540d \u4fdd\u5b58\u8ba2\u5355 \u5206\u53d1\u8bf7\u6c42\u5230\u6e20\u9053 \u8fd4\u56de\u54cd\u5e94 PayDatabaseService \u652f\u4ed8\u6570\u636e\u5e93\u670d\u52a1\u3002\u63d0\u4f9b\u8ba2\u5355\u4fdd\u5b58\u3001\u79fb\u8868\u64cd\u4f5c\u7b49\u3002 ChannelXX \u6e20\u9053\u5fae\u670d\u52a1\u3002\u6bcf\u4e2a\u6e20\u9053\uff08\u6e20\u9053\u670d\u52a1\u5546\uff09\u90fd\u4f1a\u5355\u72ec\u8d77\u4e00\u4e2a\u5fae\u670d\u52a1\uff0c\u7528\u4e8e\u9694\u79bb\u670d\u52a1\u4e4b\u95f4\u7684\u7ade\u4e89\uff0c\u4e5f\u65b9\u4fbf\u5404\u4e2a\u6e20\u9053\u6309\u7167\u8d1f\u8f7d\u8fdb\u884c\u4e0d\u540c\u7684\u90e8\u7f72\u3002 \u4f8b\u5982\uff1a\u5fae\u4fe1\u652f\u4ed8\u76f8\u5173\u7684\u6e20\u9053\u90fd\u653e\u5230 channel-wechat \uff0c\u7136\u540e\u6240\u6709\u76f8\u5173\u7684 \u5fae\u4fe1\u626b\u7801 \u3001 \u5fae\u4fe1sdk \u7b49\u652f\u4ed8\u65b9\u5f0f\u90fd\u5728\u540c\u4e2a\u670d\u52a1\u5185\uff0c\u4e0d\u540c\u7684\u652f\u4ed8\u65b9\u5f0f\u90fd\u901a\u8fc7 method \u6765\u533a\u5206\u3002 \u6e20\u9053\u5b9e\u73b0\u7684\u529f\u80fd\u6709\uff1a \u5904\u7406\u652f\u4ed8\u8bf7\u6c42 \u6784\u9020\u6e20\u9053\u8bf7\u6c42 \u8bf7\u6c42\u6e20\u9053 \u8fd4\u56de\u54cd\u5e94 \u6821\u9a8c\u56de\u8c03\u8bf7\u6c42 \u9a8c\u8bc1\u7b7e\u540d \u8fd4\u56de\u7ed3\u679c CallbackGateway \u56de\u8c03\u7f51\u5173\uff0c\u7528\u4e8e\u5904\u7406\u6e20\u9053\u7684\u901a\u77e5\u3002\u529f\u80fd\u6709\uff1a \u9a8c\u8bc1\u53c2\u6570 \u67e5\u8be2\u8ba2\u5355 \u5206\u53d1\u8bf7\u6c42\u5230\u6e20\u9053\u670d\u52a1 \u53d1\u670d\u52a1 \u8fd4\u56de\u54cd\u5e94\u62a5\u6587\uff08\u8f6c\u6362\u6e20\u9053\u5fae\u670d\u52a1\u7684\u54cd\u5e94\u7136\u540e\u518d\u8fd4\u56de\u7ed9\uff09 NotifyGateway(SettlementGateway) \u901a\u77e5\u3001\u7ed3\u7b97\u7f51\u5173\uff0c\u7528\u4e8e\u901a\u77e5\u5546\u6237\u652f\u4ed8\u7ed3\u679c\u3002\u529f\u80fd\u6709\uff1a \u67e5\u8be2\u8ba2\u5355\u72b6\u6001 \u66f4\u65b0\u8ba2\u5355\u4e3a\u6210\u529f \u53d1\u9001\u901a\u77e5 \u8f6e\u8be2\u5931\u8d25\u901a\u77e5\uff0c\u91cd\u8bd5\u53d1\u9001 PayManagerSystem \u603b\u4f53\u5206\u4e09\u5927\u7cfb\u7edf\uff1a \u8fd0\u8425\u7ba1\u7406\u7cfb\u7edf(operation manage system) https://github.com/pjoc-team/operation-manage-system \u4ee3\u7406\u5546\u7ba1\u7406\u7cfb\u7edf(proxy manage system) https://github.com/pjoc-team/proxy-management-system \u5546\u6237\u7ba1\u7406\u7cfb\u7edf(merchant manage system) https://github.com/pjoc-team/merchant-manage-system \u8fd0\u8425\u7ba1\u7406\u7cfb\u7edf \u5177\u6709\u7ba1\u7406\u4ee3\u7406\u5546\u3001\u5546\u6237\u3001\u652f\u4ed8\u3001\u8f6c\u8d26\u3001\u6743\u9650\u7ba1\u7406\u7b49\u6240\u6709\u529f\u80fd\uff0c\u4e5f\u662f\u529f\u80fd\u6700\u590d\u6742\u7684\u7cfb\u7edf \u4ee3\u7406\u5546\u7ba1\u7406\u7cfb\u7edf \u4ee3\u7406\u5546 \u662f\u6307\u53ef\u4ee5\u63a8\u5e7f\u652f\u4ed8\u63a5\u53e3\u5e76\u8bbe\u7f6e\u4e0b\u7ea7\u5546\u6237\u7684\u7528\u6237\u3002 \u4ee3\u7406\u5546\u7ba1\u7406\u7cfb\u7edf \u53ef\u4ee5\u67e5\u770b\u3001\u65b0\u589e\u81ea\u5df1\u7684\u4e0b\u7ea7\u5546\u6237\uff0c\u67e5\u770b\u6d41\u6c34\u3001\u7ed3\u7b97\u4fe1\u606f\u7b49 \u5546\u6237\u7ba1\u7406\u7cfb\u7edf \u5546\u6237 \u662f\u771f\u5b9e\u4f7f\u7528\u652f\u4ed8\u529f\u80fd\u7684\u7528\u6237\uff0c\u4e00\u4e2a\u5546\u6237\u53ef\u4ee5\u521b\u5efa\u81ea\u5df1\u7684\u5e94\u7528\uff0c\u7136\u540e\u53ef\u4ee5\u4f7f\u7528\u8be5\u5e94\u7528\u6765\u8c03\u7528\u652f\u4ed8\u63a5\u53e3\u4e0b\u5355\u3002 \u5546\u6237\u7ba1\u7406\u7cfb\u7edf \u63d0\u4f9b\u7ba1\u7406\u5e94\u7528\u3001\u67e5\u770b\u6d41\u6c34\u3001\u7ed3\u7b97\u7b49\u529f\u80fd \u8d39\u7387\u8ba1\u7b97\u903b\u8f91 \u5047\u5982\u7528\u6237\u652f\u4ed8\u4e00\u7b14\u8ba2\u5355\uff0c\u5219\u8ba1\u7b97\u652f\u4ed8\u7cfb\u7edf\u5404\u65b9\u7684\u5229\u6da6\u65b9\u6cd5\u5982\u4e0b\uff1a \u5b9a\u4e49\u53c2\u6570 \u8d39\u7387(Rate)(\u5355\u4f4d\uff1a%) R c : rate of channel \u6e20\u9053\u8d39\u7387\uff08\u5373\u5fae\u4fe1\u3001\u652f\u4ed8\u5b9d\u7684\u8d39\u7387\uff09 R a : rate of agent \u4ee3\u7406\u5546\u8d39\u7387 R m : rate of merchant \u5546\u6237\u8d39\u7387 \u5229\u6da6(Profit) P p : profit of platform \u5e73\u53f0\u5229\u6da6 P a : profit of agent \u4ee3\u7406\u5546\u5229\u6da6 \u8ba2\u5355\u91d1\u989d: A \u9650\u5236 R c <= R a <= R m < 100 \u8ba1\u7b97 P_p=\\frac{(R_a-R_c) \\times A}{100} P_p=\\frac{(R_a-R_c) \\times A}{100} P_a=\\frac{(R_m-R_a) \\times A}{100} P_a=\\frac{(R_m-R_a) \\times A}{100} \u591a\u7ea7\u4ee3\u7406\u8ba1\u7b97\u65b9\u6cd5\uff08P a1 \u662fP a2 \u7684\u4e0a\u7ea7\u4ee3\u7406\uff09 P_{a1}=\\frac{(R_{a2}-R_{a1}) \\times A}{100} P_{a1}=\\frac{(R_{a2}-R_{a1}) \\times A}{100}","title":"1.2 \u9700\u6c42\u8bbe\u8ba1"},{"location":"pay/design/biz/#_1","text":"\u8d26\u6237\u4f59\u989d\uff1a \u4f5c\u4e3a\u6536\u6b3e\u8d26\u6237\uff0c\u5305\u62ec\u53ef\u7ed3\u7b97\u91d1\u989d\u548c\u5e26\u7ed3\u7b97\u91d1\u989d \u4e0d\u53ef\u7528\u4f59\u989d\uff1a \u6307\u7684\u662f\u5f53\u524d\u6536\u6b3e\u8d26\u6237\u4e2d\u4e0d\u53ef\u7528\u7684\u91d1\u989d\uff0c\u5982\u6b63\u5728\u63d0\u73b0\u4e2d\u7684\u91d1\u989d\u90fd\u662f\u4e0d\u53ef\u7528\u4f59\u989d \u53ef\u7ed3\u7b97\u91d1\u989d\uff1a \u6536\u6b3e\u8d26\u6237\u5df2\u7ecf\u7ed3\u7b97\u7684\u91d1\u989d\uff0c\u5df2\u7ed3\u7b97\u7684\u91d1\u989d\u53ef\u63d0\u73b0 \u4fdd\u8bc1\u91d1\uff1a \u6307\u5546\u6237\u5f00\u6237\u8d39\u8d26\u6237 \u7ed3\u91d1\u989d\uff1a \u6536\u6b3e\u8d26\u6237\u7684\u51bb\u7ed3\u91d1\u989d\uff0c\u51bb\u7ed3\u7684\u91d1\u989d\u4e0d\u53ef\u63d0\u73b0 \u4ed8\u4f59\u989d\uff1a \u4f5c\u4e3a\u4ee3\u4ed8\u8d26\u6237\uff0c\u5546\u6237\u901a\u8fc7\u5728\u7ebf\u5145\u503c\u901a\u9053\u5145\u503c\u7684\u91d1\u989d\u4f1a\u8f6c\u5165\u8be5\u8d26\u6237(\u5b9e\u65f6\u5230\u8d26)\uff0c\u53d1\u8d77\u4ee3\u4ed8\u4f1a\u6263\u51cf\u8be5\u8d26\u6237 \u53ef\u7528\u4ee3\u4ed8\u4f59\u989d\uff1a \u6307\u7684\u662f\u5f53\u524d\u4ee3\u4ed8\u8d26\u6237\u4e2d\u4e0d\u53ef\u7528\u7684\u91d1\u989d\uff0c\u5982\u6b63\u5728\u4ee3\u4ed8\u5904\u7406\u4e2d\u7684\u91d1\u989d\u90fd\u662f\u4e0d\u53ef\u7528\u4ee3\u4ed8\u4f59\u989d","title":"\u540d\u8bcd"},{"location":"pay/design/biz/#_2","text":"","title":"\u5404\u4e2a\u7cfb\u7edf/\u6a21\u5757\u529f\u80fd"},{"location":"pay/design/biz/#paycenter","text":"\u652f\u4ed8\u4e2d\u5fc3\uff0c\u7528\u4e8e\u6f14\u793a\u652f\u4ed8\u529f\u80fd\u3002\u7528\u6237\u8bbf\u95ee\u7684\u65f6\u5019\u53ef\u4ee5\u5c55\u793a\u652f\u4ed8\u9875\uff0c\u7136\u540e\u9009\u62e9\u652f\u4ed8\u65b9\u5f0f\u6765\u4f53\u9a8c\u652f\u4ed8\u6d41\u7a0b","title":"PayCenter"},{"location":"pay/design/biz/#paygateway","text":"\u652f\u4ed8\u7f51\u5173\uff0c\u7528\u4e8e\u5904\u7406\u4e0b\u5355\u8bf7\u6c42\u3002\u529f\u80fd\u6709\uff1a \u6821\u9a8c\u53c2\u6570 \u9a8c\u8bc1\u5546\u6237\u3001\u7b7e\u540d \u4fdd\u5b58\u8ba2\u5355 \u5206\u53d1\u8bf7\u6c42\u5230\u6e20\u9053 \u8fd4\u56de\u54cd\u5e94","title":"PayGateway"},{"location":"pay/design/biz/#paydatabaseservice","text":"\u652f\u4ed8\u6570\u636e\u5e93\u670d\u52a1\u3002\u63d0\u4f9b\u8ba2\u5355\u4fdd\u5b58\u3001\u79fb\u8868\u64cd\u4f5c\u7b49\u3002","title":"PayDatabaseService"},{"location":"pay/design/biz/#channelxx","text":"\u6e20\u9053\u5fae\u670d\u52a1\u3002\u6bcf\u4e2a\u6e20\u9053\uff08\u6e20\u9053\u670d\u52a1\u5546\uff09\u90fd\u4f1a\u5355\u72ec\u8d77\u4e00\u4e2a\u5fae\u670d\u52a1\uff0c\u7528\u4e8e\u9694\u79bb\u670d\u52a1\u4e4b\u95f4\u7684\u7ade\u4e89\uff0c\u4e5f\u65b9\u4fbf\u5404\u4e2a\u6e20\u9053\u6309\u7167\u8d1f\u8f7d\u8fdb\u884c\u4e0d\u540c\u7684\u90e8\u7f72\u3002 \u4f8b\u5982\uff1a\u5fae\u4fe1\u652f\u4ed8\u76f8\u5173\u7684\u6e20\u9053\u90fd\u653e\u5230 channel-wechat \uff0c\u7136\u540e\u6240\u6709\u76f8\u5173\u7684 \u5fae\u4fe1\u626b\u7801 \u3001 \u5fae\u4fe1sdk \u7b49\u652f\u4ed8\u65b9\u5f0f\u90fd\u5728\u540c\u4e2a\u670d\u52a1\u5185\uff0c\u4e0d\u540c\u7684\u652f\u4ed8\u65b9\u5f0f\u90fd\u901a\u8fc7 method \u6765\u533a\u5206\u3002 \u6e20\u9053\u5b9e\u73b0\u7684\u529f\u80fd\u6709\uff1a \u5904\u7406\u652f\u4ed8\u8bf7\u6c42 \u6784\u9020\u6e20\u9053\u8bf7\u6c42 \u8bf7\u6c42\u6e20\u9053 \u8fd4\u56de\u54cd\u5e94 \u6821\u9a8c\u56de\u8c03\u8bf7\u6c42 \u9a8c\u8bc1\u7b7e\u540d \u8fd4\u56de\u7ed3\u679c","title":"ChannelXX"},{"location":"pay/design/biz/#callbackgateway","text":"\u56de\u8c03\u7f51\u5173\uff0c\u7528\u4e8e\u5904\u7406\u6e20\u9053\u7684\u901a\u77e5\u3002\u529f\u80fd\u6709\uff1a \u9a8c\u8bc1\u53c2\u6570 \u67e5\u8be2\u8ba2\u5355 \u5206\u53d1\u8bf7\u6c42\u5230\u6e20\u9053\u670d\u52a1 \u53d1\u670d\u52a1 \u8fd4\u56de\u54cd\u5e94\u62a5\u6587\uff08\u8f6c\u6362\u6e20\u9053\u5fae\u670d\u52a1\u7684\u54cd\u5e94\u7136\u540e\u518d\u8fd4\u56de\u7ed9\uff09","title":"CallbackGateway"},{"location":"pay/design/biz/#notifygatewaysettlementgateway","text":"\u901a\u77e5\u3001\u7ed3\u7b97\u7f51\u5173\uff0c\u7528\u4e8e\u901a\u77e5\u5546\u6237\u652f\u4ed8\u7ed3\u679c\u3002\u529f\u80fd\u6709\uff1a \u67e5\u8be2\u8ba2\u5355\u72b6\u6001 \u66f4\u65b0\u8ba2\u5355\u4e3a\u6210\u529f \u53d1\u9001\u901a\u77e5 \u8f6e\u8be2\u5931\u8d25\u901a\u77e5\uff0c\u91cd\u8bd5\u53d1\u9001","title":"NotifyGateway(SettlementGateway)"},{"location":"pay/design/biz/#paymanagersystem","text":"\u603b\u4f53\u5206\u4e09\u5927\u7cfb\u7edf\uff1a \u8fd0\u8425\u7ba1\u7406\u7cfb\u7edf(operation manage system) https://github.com/pjoc-team/operation-manage-system \u4ee3\u7406\u5546\u7ba1\u7406\u7cfb\u7edf(proxy manage system) https://github.com/pjoc-team/proxy-management-system \u5546\u6237\u7ba1\u7406\u7cfb\u7edf(merchant manage system) https://github.com/pjoc-team/merchant-manage-system","title":"PayManagerSystem"},{"location":"pay/design/biz/#_3","text":"\u5177\u6709\u7ba1\u7406\u4ee3\u7406\u5546\u3001\u5546\u6237\u3001\u652f\u4ed8\u3001\u8f6c\u8d26\u3001\u6743\u9650\u7ba1\u7406\u7b49\u6240\u6709\u529f\u80fd\uff0c\u4e5f\u662f\u529f\u80fd\u6700\u590d\u6742\u7684\u7cfb\u7edf","title":"\u8fd0\u8425\u7ba1\u7406\u7cfb\u7edf"},{"location":"pay/design/biz/#_4","text":"\u4ee3\u7406\u5546 \u662f\u6307\u53ef\u4ee5\u63a8\u5e7f\u652f\u4ed8\u63a5\u53e3\u5e76\u8bbe\u7f6e\u4e0b\u7ea7\u5546\u6237\u7684\u7528\u6237\u3002 \u4ee3\u7406\u5546\u7ba1\u7406\u7cfb\u7edf \u53ef\u4ee5\u67e5\u770b\u3001\u65b0\u589e\u81ea\u5df1\u7684\u4e0b\u7ea7\u5546\u6237\uff0c\u67e5\u770b\u6d41\u6c34\u3001\u7ed3\u7b97\u4fe1\u606f\u7b49","title":"\u4ee3\u7406\u5546\u7ba1\u7406\u7cfb\u7edf"},{"location":"pay/design/biz/#_5","text":"\u5546\u6237 \u662f\u771f\u5b9e\u4f7f\u7528\u652f\u4ed8\u529f\u80fd\u7684\u7528\u6237\uff0c\u4e00\u4e2a\u5546\u6237\u53ef\u4ee5\u521b\u5efa\u81ea\u5df1\u7684\u5e94\u7528\uff0c\u7136\u540e\u53ef\u4ee5\u4f7f\u7528\u8be5\u5e94\u7528\u6765\u8c03\u7528\u652f\u4ed8\u63a5\u53e3\u4e0b\u5355\u3002 \u5546\u6237\u7ba1\u7406\u7cfb\u7edf \u63d0\u4f9b\u7ba1\u7406\u5e94\u7528\u3001\u67e5\u770b\u6d41\u6c34\u3001\u7ed3\u7b97\u7b49\u529f\u80fd","title":"\u5546\u6237\u7ba1\u7406\u7cfb\u7edf"},{"location":"pay/design/biz/#_6","text":"\u5047\u5982\u7528\u6237\u652f\u4ed8\u4e00\u7b14\u8ba2\u5355\uff0c\u5219\u8ba1\u7b97\u652f\u4ed8\u7cfb\u7edf\u5404\u65b9\u7684\u5229\u6da6\u65b9\u6cd5\u5982\u4e0b\uff1a","title":"\u8d39\u7387\u8ba1\u7b97\u903b\u8f91"},{"location":"pay/design/biz/#_7","text":"\u8d39\u7387(Rate)(\u5355\u4f4d\uff1a%) R c : rate of channel \u6e20\u9053\u8d39\u7387\uff08\u5373\u5fae\u4fe1\u3001\u652f\u4ed8\u5b9d\u7684\u8d39\u7387\uff09 R a : rate of agent \u4ee3\u7406\u5546\u8d39\u7387 R m : rate of merchant \u5546\u6237\u8d39\u7387 \u5229\u6da6(Profit) P p : profit of platform \u5e73\u53f0\u5229\u6da6 P a : profit of agent \u4ee3\u7406\u5546\u5229\u6da6 \u8ba2\u5355\u91d1\u989d: A","title":"\u5b9a\u4e49\u53c2\u6570"},{"location":"pay/design/biz/#_8","text":"R c <= R a <= R m < 100","title":"\u9650\u5236"},{"location":"pay/design/biz/#_9","text":"P_p=\\frac{(R_a-R_c) \\times A}{100} P_p=\\frac{(R_a-R_c) \\times A}{100} P_a=\\frac{(R_m-R_a) \\times A}{100} P_a=\\frac{(R_m-R_a) \\times A}{100} \u591a\u7ea7\u4ee3\u7406\u8ba1\u7b97\u65b9\u6cd5\uff08P a1 \u662fP a2 \u7684\u4e0a\u7ea7\u4ee3\u7406\uff09 P_{a1}=\\frac{(R_{a2}-R_{a1}) \\times A}{100} P_{a1}=\\frac{(R_{a2}-R_{a1}) \\times A}{100}","title":"\u8ba1\u7b97"},{"location":"pay/design/pay-admin/","text":"Go type A struct { } Java public class A { } Handle claim Capture Information Notify Additional Stakeholders Validate Investigate Pay Scanning Customer admnistration Claims admnistration Printing Payment Document Management System General CRM System Home & Away Policy Administration Home & Away Financial Administration Example from the \u201cArchisurance case study\u201d (OpenGroup). See = :business process = : application service = : application component","title":"1.4 \u7ba1\u7406\u540e\u53f0"},{"location":"pay/summary/pay-summary/","text":"\u652f\u4ed8\u7cfb\u7edf \u652f\u4ed8\u7cfb\u7edf\u4e3b\u8981\u662f\u7528\u4e8e\u89c4\u8303\u5316\u652f\u4ed8\u6d41\u7a0b\u3001\u52a0\u5f3a\u5b89\u5168\u3001\u8d22\u52a1\u5bf9\u8d26\u7b49\u3002\u4e00\u4e2a\u652f\u4ed8\u7cfb\u7edf\u8981\u60f3\u505a\u5f97\u597d\uff0c\u4e00\u5b9a\u8981\u505a\u597d\u63a5\u53e3\u89c4\u8303\u3001\u505a\u597d\u5b89\u5168\u63aa\u65bd\u3001\u628a\u8c03\u5355\u5bf9\u8d26\u505a\u597d\u3002\u540c\u65f6\uff0c\u670d\u52a1\u5fc5\u987b\u662f\u9ad8\u53ef\u7528\u3001\u9ad8\u4e00\u81f4\u6027\u7684\u3002 \u805a\u5408\u652f\u4ed8\u4e0e\u4e09\u65b9\u652f\u4ed8 \u89c4\u8303\u652f\u4ed8\u6d41\u7a0b \u89c4\u8303\u652f\u4ed8\u6d41\u7a0b\u7684\u65b9\u6cd5\u6709\uff1a \u62bd\u8c61\u652f\u4ed8\u573a\u666f\uff0c\u5206\u522b\u5b9a\u4e49\u652f\u4ed8\u6d41\u7a0b H5\u652f\u4ed8\uff08\u6709\u4e9b\u652f\u4ed8\u5546\u4f1a\u5b9a\u4e49\u4e3aWAP\u652f\u4ed8\uff09\uff1a\u4e3b\u8981\u9002\u7528\u4e8e\u624b\u673a\u6d4f\u89c8\u5668 APP\u652f\u4ed8 SDK\u652f\u4ed8 \u7f51\u94f6\u652f\u4ed8 \u89c4\u8303\u63a5\u53e3\u53c2\u6570\uff0c\u5c3d\u91cf\u7b80\u5316\u63a5\u5165\u65b9\u7684\u5f00\u53d1 \u63d0\u4f9b\u826f\u597d\u7684\u6d4b\u8bd5\u5de5\u5177\uff0c\u65b9\u4fbf\u8c03\u8bd5 \u5b89\u5168 \u7f51\u7edc\u5c42 \u4f7f\u7528https\u534f\u8bae\u4e0b\u5355\u3001\u56de\u8c03\uff0c\u4fdd\u8bc1\u7f51\u7edc\u6570\u636e\u4e0d\u88ab\u7a83\u542c \u63a5\u53e3\u534f\u8bae \u4f7f\u7528\u7b7e\u540d\u673a\u5236\u9632\u6b62\u53c2\u6570\u4f20\u8f93\u8fc7\u7a0b\u4e2d\u88ab\u7be1\u6539","title":"1.1 \u6982\u8ff0"},{"location":"pay/summary/pay-summary/#_1","text":"\u652f\u4ed8\u7cfb\u7edf\u4e3b\u8981\u662f\u7528\u4e8e\u89c4\u8303\u5316\u652f\u4ed8\u6d41\u7a0b\u3001\u52a0\u5f3a\u5b89\u5168\u3001\u8d22\u52a1\u5bf9\u8d26\u7b49\u3002\u4e00\u4e2a\u652f\u4ed8\u7cfb\u7edf\u8981\u60f3\u505a\u5f97\u597d\uff0c\u4e00\u5b9a\u8981\u505a\u597d\u63a5\u53e3\u89c4\u8303\u3001\u505a\u597d\u5b89\u5168\u63aa\u65bd\u3001\u628a\u8c03\u5355\u5bf9\u8d26\u505a\u597d\u3002\u540c\u65f6\uff0c\u670d\u52a1\u5fc5\u987b\u662f\u9ad8\u53ef\u7528\u3001\u9ad8\u4e00\u81f4\u6027\u7684\u3002","title":"\u652f\u4ed8\u7cfb\u7edf"},{"location":"pay/summary/pay-summary/#_2","text":"","title":"\u805a\u5408\u652f\u4ed8\u4e0e\u4e09\u65b9\u652f\u4ed8"},{"location":"pay/summary/pay-summary/#_3","text":"\u89c4\u8303\u652f\u4ed8\u6d41\u7a0b\u7684\u65b9\u6cd5\u6709\uff1a \u62bd\u8c61\u652f\u4ed8\u573a\u666f\uff0c\u5206\u522b\u5b9a\u4e49\u652f\u4ed8\u6d41\u7a0b H5\u652f\u4ed8\uff08\u6709\u4e9b\u652f\u4ed8\u5546\u4f1a\u5b9a\u4e49\u4e3aWAP\u652f\u4ed8\uff09\uff1a\u4e3b\u8981\u9002\u7528\u4e8e\u624b\u673a\u6d4f\u89c8\u5668 APP\u652f\u4ed8 SDK\u652f\u4ed8 \u7f51\u94f6\u652f\u4ed8 \u89c4\u8303\u63a5\u53e3\u53c2\u6570\uff0c\u5c3d\u91cf\u7b80\u5316\u63a5\u5165\u65b9\u7684\u5f00\u53d1 \u63d0\u4f9b\u826f\u597d\u7684\u6d4b\u8bd5\u5de5\u5177\uff0c\u65b9\u4fbf\u8c03\u8bd5","title":"\u89c4\u8303\u652f\u4ed8\u6d41\u7a0b"},{"location":"pay/summary/pay-summary/#_4","text":"\u7f51\u7edc\u5c42 \u4f7f\u7528https\u534f\u8bae\u4e0b\u5355\u3001\u56de\u8c03\uff0c\u4fdd\u8bc1\u7f51\u7edc\u6570\u636e\u4e0d\u88ab\u7a83\u542c \u63a5\u53e3\u534f\u8bae \u4f7f\u7528\u7b7e\u540d\u673a\u5236\u9632\u6b62\u53c2\u6570\u4f20\u8f93\u8fc7\u7a0b\u4e2d\u88ab\u7be1\u6539","title":"\u5b89\u5168"},{"location":"plan/stage1/","text":"\u5f00\u53d1\u8ba1\u5212 \u7b2c\u4e00\u671f \u67b6\u6784/\u6587\u6863\u8bbe\u8ba1 10-01~10-09 \u57fa\u7840\u670d\u52a1\u53d1\u73b0\u7ec4\u4ef6(ConfigService) 10-10~10-12 \u652f\u4ed8\u7f51\u5173(PayGateway) 10-13~10-15 \u6e20\u9053\u57fa\u7840\u670d\u52a1(PayChannel) 10-15~10-16 \u6570\u636e\u5e93\u670d\u52a1(PayDatabase) 10-17~10-18 \u56de\u8c03\u7f51\u5173(CallbackGateway) 10-19~10-20 \u901a\u77e5\u7f51\u5173(NotifyGateway) 10-21~10-23 \u652f\u4ed8\u4e2d\u5fc3(PayCenter) 10-23~10-26 \u90e8\u7f72/\u8c03\u8bd5 10-27~10-30","title":"\u5f00\u53d1\u8ba1\u5212"},{"location":"plan/stage1/#_1","text":"","title":"\u5f00\u53d1\u8ba1\u5212"},{"location":"plan/stage1/#_2","text":"\u67b6\u6784/\u6587\u6863\u8bbe\u8ba1 10-01~10-09 \u57fa\u7840\u670d\u52a1\u53d1\u73b0\u7ec4\u4ef6(ConfigService) 10-10~10-12 \u652f\u4ed8\u7f51\u5173(PayGateway) 10-13~10-15 \u6e20\u9053\u57fa\u7840\u670d\u52a1(PayChannel) 10-15~10-16 \u6570\u636e\u5e93\u670d\u52a1(PayDatabase) 10-17~10-18 \u56de\u8c03\u7f51\u5173(CallbackGateway) 10-19~10-20 \u901a\u77e5\u7f51\u5173(NotifyGateway) 10-21~10-23 \u652f\u4ed8\u4e2d\u5fc3(PayCenter) 10-23~10-26 \u90e8\u7f72/\u8c03\u8bd5 10-27~10-30","title":"\u7b2c\u4e00\u671f"},{"location":"specification/dev-specification/","text":"dev-specification \u5f00\u53d1\u89c4\u8303 \u4ecb\u7ecd \u6837\u5f0f (style) \u662f\u652f\u914d\u6211\u4eec\u4ee3\u7801\u7684\u60ef\u4f8b\u3002\u672f\u8bed \u6837\u5f0f \u6709\u70b9\u7528\u8bcd\u4e0d\u5f53\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u7ea6\u5b9a\u6db5\u76d6\u7684\u8303\u56f4\u4e0d\u9650\u4e8e\u7531 gofmt \u66ff\u6211\u4eec\u5904\u7406\u7684\u6e90\u6587\u4ef6\u683c\u5f0f\u3002 \u672c\u6307\u5357\u7684\u76ee\u7684\u662f\u901a\u8fc7\u8be6\u7ec6\u63cf\u8ff0\u5728 Uber \u7f16\u5199 Go \u4ee3\u7801\u7684\u6ce8\u610f\u4e8b\u9879\u6765\u7ba1\u7406\u8fd9\u79cd\u590d\u6742\u6027\u3002\u8fd9\u4e9b\u89c4\u5219\u7684\u5b58\u5728\u662f\u4e3a\u4e86\u4f7f\u4ee3\u7801\u5e93\u6613\u4e8e\u7ba1\u7406\uff0c\u540c\u65f6\u4ecd\u7136\u5141\u8bb8\u5de5\u7a0b\u5e08\u66f4\u6709\u6548\u5730\u4f7f\u7528 Go \u8bed\u8a00\u529f\u80fd\u3002 \u8be5\u6307\u5357\u6700\u521d\u7531 Prashant Varanasi \u548c Simon Newton \u7f16\u5199\uff0c\u76ee\u7684\u662f\u4f7f\u4e00\u4e9b\u540c\u4e8b\u80fd\u5feb\u901f\u4f7f\u7528 Go\u3002\u591a\u5e74\u6765\uff0c\u8be5\u6307\u5357\u5df2\u6839\u636e\u5176\u4ed6\u4eba\u7684\u53cd\u9988\u8fdb\u884c\u4e86\u4fee\u6539\u3002 \u672c\u6587\u6863\u8bb0\u5f55\u4e86\u6211\u4eec\u5728 Uber \u9075\u5faa\u7684 Go \u4ee3\u7801\u4e2d\u7684\u60ef\u7528\u7ea6\u5b9a\u3002\u5176\u4e2d\u8bb8\u591a\u662f Go \u7684\u901a\u7528\u51c6\u5219\uff0c\u800c\u5176\u4ed6\u6269\u5c55\u51c6\u5219\u4f9d\u8d56\u4e8e\u4e0b\u9762\u5916\u90e8\u7684\u6307\u5357\uff1a Effective Go The Go common mistakes guide \u6240\u6709\u4ee3\u7801\u90fd\u5e94\u8be5\u901a\u8fc7 golint \u548c go vet \u7684\u68c0\u67e5\u5e76\u65e0\u9519\u8bef\u3002\u6211\u4eec\u5efa\u8bae\u60a8\u5c06\u7f16\u8f91\u5668\u8bbe\u7f6e\u4e3a\uff1a \u4fdd\u5b58\u65f6\u8fd0\u884c goimports \u8fd0\u884c golint \u548c go vet \u68c0\u67e5\u9519\u8bef \u60a8\u53ef\u4ee5\u5728\u4ee5\u4e0b Go \u7f16\u8f91\u5668\u5de5\u5177\u652f\u6301\u9875\u9762\u4e2d\u627e\u5230\u66f4\u4e3a\u8be6\u7ec6\u7684\u4fe1\u606f\uff1a https://github.com/golang/go/wiki/IDEsAndTextEditorPlugins \u6307\u5bfc\u539f\u5219 \u6307\u5411 interface \u7684\u6307\u9488 \u60a8\u51e0\u4e4e\u4e0d\u9700\u8981\u6307\u5411\u63a5\u53e3\u7c7b\u578b\u7684\u6307\u9488\u3002\u60a8\u5e94\u8be5\u5c06\u63a5\u53e3\u4f5c\u4e3a\u503c\u8fdb\u884c\u4f20\u9012\uff0c\u5728\u8fd9\u6837\u7684\u4f20\u9012\u8fc7\u7a0b\u4e2d\uff0c\u5b9e\u8d28\u4e0a\u4f20\u9012\u7684\u5e95\u5c42\u6570\u636e\u4ecd\u7136\u53ef\u4ee5\u662f\u6307\u9488\u3002 \u63a5\u53e3\u5b9e\u8d28\u4e0a\u5728\u5e95\u5c42\u7528\u4e24\u4e2a\u5b57\u6bb5\u8868\u793a\uff1a \u4e00\u4e2a\u6307\u5411\u67d0\u4e9b\u7279\u5b9a\u7c7b\u578b\u4fe1\u606f\u7684\u6307\u9488\u3002\u60a8\u53ef\u4ee5\u5c06\u5176\u89c6\u4e3a\u201dtype\u201d\u3002 \u6570\u636e\u6307\u9488\u3002\u5982\u679c\u5b58\u50a8\u7684\u6570\u636e\u662f\u6307\u9488\uff0c\u5219\u76f4\u63a5\u5b58\u50a8\u3002\u5982\u679c\u5b58\u50a8\u7684\u6570\u636e\u662f\u4e00\u4e2a\u503c\uff0c\u5219\u5b58\u50a8\u6307\u5411\u8be5\u503c\u7684\u6307\u9488\u3002 \u5982\u679c\u5e0c\u671b\u63a5\u53e3\u65b9\u6cd5\u4fee\u6539\u57fa\u7840\u6570\u636e\uff0c\u5219\u5fc5\u987b\u4f7f\u7528\u6307\u9488\u4f20\u9012(\u5c06\u5bf9\u8c61\u6307\u9488\u8d4b\u503c\u7ed9\u63a5\u53e3\u53d8\u91cf)\u3002 type F interface { f () } type S1 struct {} func ( s S1 ) f () {} type S2 struct {} func ( s * S2 ) f () {} // f1.f()\u65e0\u6cd5\u4fee\u6539\u5e95\u5c42\u6570\u636e // f2.f() \u53ef\u4ee5\u4fee\u6539\u5e95\u5c42\u6570\u636e,\u7ed9\u63a5\u53e3\u53d8\u91cff2\u8d4b\u503c\u65f6\u4f7f\u7528\u7684\u662f\u5bf9\u8c61\u6307\u9488 var f1 F := S1 {} var f2 F := & S2 {} Interface \u5408\u7406\u6027\u9a8c\u8bc1 \u5728\u7f16\u8bd1\u65f6\u9a8c\u8bc1\u63a5\u53e3\u7684\u7b26\u5408\u6027\u3002\u8fd9\u5305\u62ec\uff1a \u5c06\u5b9e\u73b0\u7279\u5b9a\u63a5\u53e3\u7684\u5bfc\u51fa\u7c7b\u578b\u4f5c\u4e3a\u63a5\u53e3API \u7684\u4e00\u90e8\u5206\u8fdb\u884c\u68c0\u67e5 \u5b9e\u73b0\u540c\u4e00\u63a5\u53e3\u7684(\u5bfc\u51fa\u548c\u975e\u5bfc\u51fa)\u7c7b\u578b\u5c5e\u4e8e\u5b9e\u73b0\u7c7b\u578b\u7684\u96c6\u5408 \u4efb\u4f55\u8fdd\u53cd\u63a5\u53e3\u5408\u7406\u6027\u68c0\u67e5\u7684\u573a\u666f,\u90fd\u4f1a\u7ec8\u6b62\u7f16\u8bd1,\u5e76\u901a\u77e5\u7ed9\u7528\u6237 \u8865\u5145:\u4e0a\u97623\u6761\u662f\u7f16\u8bd1\u5668\u5bf9\u63a5\u53e3\u7684\u68c0\u67e5\u673a\u5236, \u5927\u4f53\u610f\u601d\u662f\u9519\u8bef\u4f7f\u7528\u63a5\u53e3\u4f1a\u5728\u7f16\u8bd1\u671f\u62a5\u9519. \u6240\u4ee5\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u673a\u5236\u8ba9\u90e8\u5206\u95ee\u9898\u5728\u7f16\u8bd1\u671f\u66b4\u9732. Bad Good // \u5982\u679cHandler\u6ca1\u6709\u5b9e\u73b0http.Handler,\u4f1a\u5728\u8fd0\u884c\u65f6\u62a5\u9519 type Handler struct { // ... } func ( h * Handler ) ServeHTTP ( w http . ResponseWriter , r * http . Request , ) { ... } type Handler struct { // ... } // \u7528\u4e8e\u89e6\u53d1\u7f16\u8bd1\u671f\u7684\u63a5\u53e3\u7684\u5408\u7406\u6027\u68c0\u67e5\u673a\u5236 // \u5982\u679cHandler\u6ca1\u6709\u5b9e\u73b0http.Handler,\u4f1a\u5728\u7f16\u8bd1\u671f\u62a5\u9519 var _ http . Handler = ( * Handler )( nil ) func ( h * Handler ) ServeHTTP ( w http . ResponseWriter , r * http . Request , ) { // ... } \u5982\u679c *Handler \u4e0e http.Handler \u7684\u63a5\u53e3\u4e0d\u5339\u914d, \u90a3\u4e48\u8bed\u53e5 var _ http.Handler = (*Handler)(nil) \u5c06\u65e0\u6cd5\u7f16\u8bd1\u901a\u8fc7. \u8d4b\u503c\u7684\u53f3\u8fb9\u5e94\u8be5\u662f\u65ad\u8a00\u7c7b\u578b\u7684\u96f6\u503c\u3002 \u5bf9\u4e8e\u6307\u9488\u7c7b\u578b\uff08\u5982 *Handler \uff09\u3001\u5207\u7247\u548c\u6620\u5c04\uff0c\u8fd9\u662f nil \uff1b \u5bf9\u4e8e\u7ed3\u6784\u7c7b\u578b\uff0c\u8fd9\u662f\u7a7a\u7ed3\u6784\u3002 type LogHandler struct { h http . Handler log * zap . Logger } var _ http . Handler = LogHandler {} func ( h LogHandler ) ServeHTTP ( w http . ResponseWriter , r * http . Request , ) { // ... } \u63a5\u6536\u5668 (receiver) \u4e0e\u63a5\u53e3 \u4f7f\u7528\u503c\u63a5\u6536\u5668\u7684\u65b9\u6cd5\u65e2\u53ef\u4ee5\u901a\u8fc7\u503c\u8c03\u7528\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u6307\u9488\u8c03\u7528\u3002 \u5e26\u6307\u9488\u63a5\u6536\u5668\u7684\u65b9\u6cd5\u53ea\u80fd\u901a\u8fc7\u6307\u9488\u6216 addressable values \u8c03\u7528. \u4f8b\u5982\uff0c type S struct { data string } func ( s S ) Read () string { return s . data } func ( s * S ) Write ( str string ) { s . data = str } sVals := map [ int ] S { 1 : { \"A\" }} // \u4f60\u53ea\u80fd\u901a\u8fc7\u503c\u8c03\u7528 Read sVals [ 1 ]. Read () // \u8fd9\u4e0d\u80fd\u7f16\u8bd1\u901a\u8fc7\uff1a // sVals[1].Write(\"test\") sPtrs := map [ int ] * S { 1 : { \"A\" }} // \u901a\u8fc7\u6307\u9488\u65e2\u53ef\u4ee5\u8c03\u7528 Read\uff0c\u4e5f\u53ef\u4ee5\u8c03\u7528 Write \u65b9\u6cd5 sPtrs [ 1 ]. Read () sPtrs [ 1 ]. Write ( \"test\" ) \u7c7b\u4f3c\u7684,\u5373\u4f7f\u65b9\u6cd5\u6709\u4e86\u503c\u63a5\u6536\u5668,\u4e5f\u540c\u6837\u53ef\u4ee5\u7528\u6307\u9488\u63a5\u6536\u5668\u6765\u6ee1\u8db3\u63a5\u53e3. type F interface { f () } type S1 struct {} func ( s S1 ) f () {} type S2 struct {} func ( s * S2 ) f () {} s1Val := S1 {} s1Ptr := & S1 {} s2Val := S2 {} s2Ptr := & S2 {} var i F i = s1Val i = s1Ptr i = s2Ptr // \u4e0b\u9762\u4ee3\u7801\u65e0\u6cd5\u901a\u8fc7\u7f16\u8bd1\u3002\u56e0\u4e3a s2Val \u662f\u4e00\u4e2a\u503c\uff0c\u800c S2 \u7684 f \u65b9\u6cd5\u4e2d\u6ca1\u6709\u4f7f\u7528\u503c\u63a5\u6536\u5668 // i = s2Val Effective Go \u4e2d\u6709\u4e00\u6bb5\u5173\u4e8e pointers vs. values \u7684\u7cbe\u5f69\u8bb2\u89e3\u3002 \u8865\u5145: \u4e00\u4e2a\u7c7b\u578b\u53ef\u4ee5\u6709\u503c\u63a5\u6536\u5668\u65b9\u6cd5\u96c6\u548c\u6307\u9488\u63a5\u6536\u5668\u65b9\u6cd5\u96c6 \u503c\u63a5\u6536\u5668\u65b9\u6cd5\u96c6\u662f\u6307\u9488\u63a5\u6536\u5668\u65b9\u6cd5\u96c6\u7684\u5b50\u96c6,\u53cd\u4e4b\u4e0d\u662f \u89c4\u5219 \u503c\u5bf9\u8c61\u53ea\u53ef\u4ee5\u4f7f\u7528\u503c\u63a5\u6536\u5668\u65b9\u6cd5\u96c6 \u6307\u9488\u5bf9\u8c61\u53ef\u4ee5\u4f7f\u7528 \u503c\u63a5\u6536\u5668\u65b9\u6cd5\u96c6 + \u6307\u9488\u63a5\u6536\u5668\u65b9\u6cd5\u96c6 \u63a5\u53e3\u7684\u5339\u914d(\u6216\u8005\u53eb\u5b9e\u73b0) \u7c7b\u578b\u5b9e\u73b0\u4e86\u63a5\u53e3\u7684\u6240\u6709\u65b9\u6cd5,\u53eb\u5339\u914d \u5177\u4f53\u7684\u8bb2,\u8981\u4e48\u662f\u7c7b\u578b\u7684\u503c\u65b9\u6cd5\u96c6\u5339\u914d\u63a5\u53e3,\u8981\u4e48\u662f\u6307\u9488\u65b9\u6cd5\u96c6\u5339\u914d\u63a5\u53e3 \u5177\u4f53\u7684\u5339\u914d\u5206\u4e24\u79cd: \u503c\u65b9\u6cd5\u96c6\u548c\u63a5\u53e3\u5339\u914d \u7ed9\u63a5\u53e3\u53d8\u91cf\u8d4b\u503c\u7684\u4e0d\u7ba1\u662f\u503c\u8fd8\u662f\u6307\u9488\u5bf9\u8c61,\u90fdok,\u56e0\u4e3a\u90fd\u5305\u542b\u503c\u65b9\u6cd5\u96c6 \u6307\u9488\u65b9\u6cd5\u96c6\u548c\u63a5\u53e3\u5339\u914d \u53ea\u80fd\u5c06\u6307\u9488\u5bf9\u8c61\u8d4b\u503c\u7ed9\u63a5\u53e3\u53d8\u91cf,\u56e0\u4e3a\u53ea\u6709\u6307\u9488\u65b9\u6cd5\u96c6\u548c\u63a5\u53e3\u5339\u914d \u5982\u679c\u5c06\u503c\u5bf9\u8c61\u8d4b\u503c\u7ed9\u63a5\u53e3\u53d8\u91cf,\u4f1a\u5728\u7f16\u8bd1\u671f\u62a5\u9519(\u4f1a\u89e6\u53d1\u63a5\u53e3\u5408\u7406\u6027\u68c0\u67e5\u673a\u5236) \u4e3a\u5565 i = s2Val \u4f1a\u62a5\u9519,\u56e0\u4e3a\u503c\u65b9\u6cd5\u96c6\u548c\u63a5\u53e3\u4e0d\u5339\u914d. \u96f6\u503c Mutex \u662f\u6709\u6548\u7684 \u96f6\u503c sync.Mutex \u548c sync.RWMutex \u662f\u6709\u6548\u7684\u3002\u6240\u4ee5\u6307\u5411 mutex \u7684\u6307\u9488\u57fa\u672c\u662f\u4e0d\u5fc5\u8981\u7684\u3002 Bad Good mu := new ( sync . Mutex ) mu . Lock () var mu sync . Mutex mu . Lock () \u5982\u679c\u4f60\u4f7f\u7528\u7ed3\u6784\u4f53\u6307\u9488\uff0cmutex \u53ef\u4ee5\u975e\u6307\u9488\u5f62\u5f0f\u4f5c\u4e3a\u7ed3\u6784\u4f53\u7684\u7ec4\u6210\u5b57\u6bb5\uff0c\u6216\u8005\u66f4\u597d\u7684\u65b9\u5f0f\u662f\u76f4\u63a5\u5d4c\u5165\u5230\u7ed3\u6784\u4f53\u4e2d\u3002 \u5982\u679c\u662f\u79c1\u6709\u7ed3\u6784\u4f53\u7c7b\u578b\u6216\u662f\u8981\u5b9e\u73b0 Mutex \u63a5\u53e3\u7684\u7c7b\u578b\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5d4c\u5165 mutex \u7684\u65b9\u6cd5\uff1a type smap struct { sync . Mutex // only for unexported types\uff08\u4ec5\u9002\u7528\u4e8e\u975e\u5bfc\u51fa\u7c7b\u578b\uff09 data map [ string ] string } func newSMap () * smap { return & smap { data : make ( map [ string ] string ), } } func ( m * smap ) Get ( k string ) string { m . Lock () defer m . Unlock () return m . data [ k ] } type SMap struct { mu sync . Mutex // \u5bf9\u4e8e\u5bfc\u51fa\u7c7b\u578b\uff0c\u8bf7\u4f7f\u7528\u79c1\u6709\u9501 data map [ string ] string } func NewSMap () * SMap { return & SMap { data : make ( map [ string ] string ), } } func ( m * SMap ) Get ( k string ) string { m . mu . Lock () defer m . mu . Unlock () return m . data [ k ] } \u4e3a\u79c1\u6709\u7c7b\u578b\u6216\u9700\u8981\u5b9e\u73b0\u4e92\u65a5\u63a5\u53e3\u7684\u7c7b\u578b\u5d4c\u5165\u3002 \u5bf9\u4e8e\u5bfc\u51fa\u7684\u7c7b\u578b\uff0c\u8bf7\u4f7f\u7528\u4e13\u7528\u5b57\u6bb5\u3002 \u5728\u8fb9\u754c\u5904\u62f7\u8d1d Slices \u548c Maps slices \u548c maps \u5305\u542b\u4e86\u6307\u5411\u5e95\u5c42\u6570\u636e\u7684\u6307\u9488\uff0c\u56e0\u6b64\u5728\u9700\u8981\u590d\u5236\u5b83\u4eec\u65f6\u8981\u7279\u522b\u6ce8\u610f\u3002 \u63a5\u6536 Slices \u548c Maps \u8bf7\u8bb0\u4f4f\uff0c\u5f53 map \u6216 slice \u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\u4f20\u5165\u65f6\uff0c\u5982\u679c\u60a8\u5b58\u50a8\u4e86\u5bf9\u5b83\u4eec\u7684\u5f15\u7528\uff0c\u5219\u7528\u6237\u53ef\u4ee5\u5bf9\u5176\u8fdb\u884c\u4fee\u6539\u3002 Bad Good func ( d * Driver ) SetTrips ( trips [] Trip ) { d . trips = trips } trips := ... d1 . SetTrips ( trips ) // \u4f60\u662f\u8981\u4fee\u6539 d1.trips \u5417\uff1f trips [ 0 ] = ... func ( d * Driver ) SetTrips ( trips [] Trip ) { d . trips = make ([] Trip , len ( trips )) copy ( d . trips , trips ) } trips := ... d1 . SetTrips ( trips ) // \u8fd9\u91cc\u6211\u4eec\u4fee\u6539 trips[0]\uff0c\u4f46\u4e0d\u4f1a\u5f71\u54cd\u5230 d1.trips trips [ 0 ] = ... \u8fd4\u56de slices \u6216 maps \u540c\u6837\uff0c\u8bf7\u6ce8\u610f\u7528\u6237\u5bf9\u66b4\u9732\u5185\u90e8\u72b6\u6001\u7684 map \u6216 slice \u7684\u4fee\u6539\u3002 Bad Good type Stats struct { mu sync . Mutex counters map [ string ] int } // Snapshot \u8fd4\u56de\u5f53\u524d\u72b6\u6001\u3002 func ( s * Stats ) Snapshot () map [ string ] int { s . mu . Lock () defer s . mu . Unlock () return s . counters } // snapshot \u4e0d\u518d\u53d7\u4e92\u65a5\u9501\u4fdd\u62a4 // \u56e0\u6b64\u5bf9 snapshot \u7684\u4efb\u4f55\u8bbf\u95ee\u90fd\u5c06\u53d7\u5230\u6570\u636e\u7ade\u4e89\u7684\u5f71\u54cd // \u5f71\u54cd stats.counters snapshot := stats . Snapshot () type Stats struct { mu sync . Mutex counters map [ string ] int } func ( s * Stats ) Snapshot () map [ string ] int { s . mu . Lock () defer s . mu . Unlock () result := make ( map [ string ] int , len ( s . counters )) for k , v := range s . counters { result [ k ] = v } return result } // snapshot \u73b0\u5728\u662f\u4e00\u4e2a\u62f7\u8d1d snapshot := stats . Snapshot () \u4f7f\u7528 defer \u91ca\u653e\u8d44\u6e90 \u4f7f\u7528 defer \u91ca\u653e\u8d44\u6e90\uff0c\u8bf8\u5982\u6587\u4ef6\u548c\u9501\u3002 Bad Good p . Lock () if p . count < 10 { p . Unlock () return p . count } p . count ++ newCount := p . count p . Unlock () return newCount // \u5f53\u6709\u591a\u4e2a return \u5206\u652f\u65f6\uff0c\u5f88\u5bb9\u6613\u9057\u5fd8 unlock p . Lock () defer p . Unlock () if p . count < 10 { return p . count } p . count ++ return p . count // \u66f4\u53ef\u8bfb Defer \u7684\u5f00\u9500\u975e\u5e38\u5c0f\uff0c\u53ea\u6709\u5728\u60a8\u53ef\u4ee5\u8bc1\u660e\u51fd\u6570\u6267\u884c\u65f6\u95f4\u5904\u4e8e\u7eb3\u79d2\u7ea7\u7684\u7a0b\u5ea6\u65f6\uff0c\u624d\u5e94\u907f\u514d\u8fd9\u6837\u505a\u3002\u4f7f\u7528 defer \u63d0\u5347\u53ef\u8bfb\u6027\u662f\u503c\u5f97\u7684\uff0c\u56e0\u4e3a\u4f7f\u7528\u5b83\u4eec\u7684\u6210\u672c\u5fae\u4e0d\u8db3\u9053\u3002\u5c24\u5176\u9002\u7528\u4e8e\u90a3\u4e9b\u4e0d\u4ec5\u4ec5\u662f\u7b80\u5355\u5185\u5b58\u8bbf\u95ee\u7684\u8f83\u5927\u7684\u65b9\u6cd5\uff0c\u5728\u8fd9\u4e9b\u65b9\u6cd5\u4e2d\u5176\u4ed6\u8ba1\u7b97\u7684\u8d44\u6e90\u6d88\u8017\u8fdc\u8d85\u8fc7 defer \u3002 Channel \u7684 size \u8981\u4e48\u662f 1\uff0c\u8981\u4e48\u662f\u65e0\u7f13\u51b2\u7684 channel \u901a\u5e38 size \u5e94\u4e3a 1 \u6216\u662f\u65e0\u7f13\u51b2\u7684\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cchannel \u662f\u65e0\u7f13\u51b2\u7684\uff0c\u5176 size \u4e3a\u96f6\u3002\u4efb\u4f55\u5176\u4ed6\u5c3a\u5bf8\u90fd\u5fc5\u987b\u7ecf\u8fc7\u4e25\u683c\u7684\u5ba1\u67e5\u3002\u6211\u4eec\u9700\u8981\u8003\u8651\u5982\u4f55\u786e\u5b9a\u5927\u5c0f\uff0c\u8003\u8651\u662f\u4ec0\u4e48\u963b\u6b62\u4e86 channel \u5728\u9ad8\u8d1f\u8f7d\u4e0b\u548c\u963b\u585e\u5199\u65f6\u7684\u5199\u5165\uff0c\u4ee5\u53ca\u5f53\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u65f6\u7cfb\u7edf\u903b\u8f91\u6709\u54ea\u4e9b\u53d8\u5316\u3002(\u7ffb\u8bd1\u89e3\u91ca\uff1a\u6309\u7167\u539f\u6587\u610f\u601d\u662f\u9700\u8981\u754c\u5b9a\u901a\u9053\u8fb9\u754c\uff0c\u7ade\u6001\u6761\u4ef6\uff0c\u4ee5\u53ca\u903b\u8f91\u4e0a\u4e0b\u6587\u68b3\u7406) Bad Good // \u5e94\u8be5\u8db3\u4ee5\u6ee1\u8db3\u4efb\u4f55\u60c5\u51b5\uff01 c := make ( chan int , 64 ) // \u5927\u5c0f\uff1a1 c := make ( chan int , 1 ) // \u6216\u8005 // \u65e0\u7f13\u51b2 channel\uff0c\u5927\u5c0f\u4e3a 0 c := make ( chan int ) \u679a\u4e3e\u4ece 1 \u5f00\u59cb \u5728 Go \u4e2d\u5f15\u5165\u679a\u4e3e\u7684\u6807\u51c6\u65b9\u6cd5\u662f\u58f0\u660e\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7c7b\u578b\u548c\u4e00\u4e2a\u4f7f\u7528\u4e86 iota \u7684 const \u7ec4\u3002\u7531\u4e8e\u53d8\u91cf\u7684\u9ed8\u8ba4\u503c\u4e3a 0\uff0c\u56e0\u6b64\u901a\u5e38\u5e94\u4ee5\u975e\u96f6\u503c\u5f00\u5934\u679a\u4e3e\u3002 Bad Good type Operation int const ( Add Operation = iota Subtract Multiply ) // Add=0, Subtract=1, Multiply=2 type Operation int const ( Add Operation = iota + 1 Subtract Multiply ) // Add=1, Subtract=2, Multiply=3 \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u96f6\u503c\u662f\u6709\u610f\u4e49\u7684\uff08\u679a\u4e3e\u4ece\u96f6\u5f00\u59cb\uff09\uff0c\u4f8b\u5982\uff0c\u5f53\u96f6\u503c\u662f\u7406\u60f3\u7684\u9ed8\u8ba4\u884c\u4e3a\u65f6\u3002 type LogOutput int const ( LogToStdout LogOutput = iota LogToFile LogToRemote ) // LogToStdout=0, LogToFile=1, LogToRemote=2 \u4f7f\u7528 time \u5904\u7406\u65f6\u95f4 \u65f6\u95f4\u5904\u7406\u5f88\u590d\u6742\u3002\u5173\u4e8e\u65f6\u95f4\u7684\u9519\u8bef\u5047\u8bbe\u901a\u5e38\u5305\u62ec\u4ee5\u4e0b\u51e0\u70b9\u3002 \u4e00\u5929\u6709 24 \u5c0f\u65f6 \u4e00\u5c0f\u65f6\u6709 60 \u5206\u949f \u4e00\u5468\u6709\u4e03\u5929 \u4e00\u5e74 365 \u5929 \u8fd8\u6709\u66f4\u591a \u4f8b\u5982\uff0c 1 \u8868\u793a\u5728\u4e00\u4e2a\u65f6\u95f4\u70b9\u4e0a\u52a0\u4e0a 24 \u5c0f\u65f6\u5e76\u4e0d\u603b\u662f\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684\u65e5\u5386\u65e5\u3002 \u56e0\u6b64\uff0c\u5728\u5904\u7406\u65f6\u95f4\u65f6\u59cb\u7ec8\u4f7f\u7528 [ \"time\" ] \u5305\uff0c\u56e0\u4e3a\u5b83\u6709\u52a9\u4e8e\u4ee5\u66f4\u5b89\u5168\u3001\u66f4\u51c6\u786e\u7684\u65b9\u5f0f\u5904\u7406\u8fd9\u4e9b\u4e0d\u6b63\u786e\u7684\u5047\u8bbe\u3002 \u4f7f\u7528 time.Time \u8868\u8fbe\u77ac\u65f6\u65f6\u95f4 \u5728\u5904\u7406\u65f6\u95f4\u7684\u77ac\u95f4\u65f6\u4f7f\u7528 [ time.time ]\uff0c\u5728\u6bd4\u8f83\u3001\u6dfb\u52a0\u6216\u51cf\u53bb\u65f6\u95f4\u65f6\u4f7f\u7528 time.Time \u4e2d\u7684\u65b9\u6cd5\u3002 Bad Good func isActive ( now , start , stop int ) bool { return start <= now && now < stop } func isActive ( now , start , stop time . Time ) bool { return ( start . Before ( now ) || start . Equal ( now )) && now . Before ( stop ) } \u4f7f\u7528 time.Duration \u8868\u8fbe\u65f6\u95f4\u6bb5 \u5728\u5904\u7406\u65f6\u95f4\u6bb5\u65f6\u4f7f\u7528 [ time.Duration ] . Bad Good func poll ( delay int ) { for { // ... time . Sleep ( time . Duration ( delay ) * time . Millisecond ) } } poll ( 10 ) // \u662f\u51e0\u79d2\u949f\u8fd8\u662f\u51e0\u6beb\u79d2? func poll ( delay time . Duration ) { for { // ... time . Sleep ( delay ) } } poll ( 10 * time . Second ) \u56de\u5230\u7b2c\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5728\u4e00\u4e2a\u65f6\u95f4\u77ac\u95f4\u52a0\u4e0a 24 \u5c0f\u65f6\uff0c\u6211\u4eec\u7528\u4e8e\u6dfb\u52a0\u65f6\u95f4\u7684\u65b9\u6cd5\u53d6\u51b3\u4e8e\u610f\u56fe\u3002\u5982\u679c\u6211\u4eec\u60f3\u8981\u4e0b\u4e00\u4e2a\u65e5\u5386\u65e5(\u5f53\u524d\u5929\u7684\u4e0b\u4e00\u5929)\u7684\u540c\u4e00\u4e2a\u65f6\u95f4\u70b9\uff0c\u6211\u4eec\u5e94\u8be5\u4f7f\u7528 [ Time.AddDate ]\u3002\u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u60f3\u4fdd\u8bc1\u67d0\u4e00\u65f6\u523b\u6bd4\u524d\u4e00\u65f6\u523b\u665a 24 \u5c0f\u65f6\uff0c\u6211\u4eec\u5e94\u8be5\u4f7f\u7528 [ Time.Add ]\u3002 newDay := t . AddDate ( 0 /* years */ , 0 , /* months */ , 1 /* days */ ) maybeNewDay := t . Add ( 24 * time . Hour ) \u5bf9\u5916\u90e8\u7cfb\u7edf\u4f7f\u7528 time.Time \u548c time.Duration \u5c3d\u53ef\u80fd\u5728\u4e0e\u5916\u90e8\u7cfb\u7edf\u7684\u4ea4\u4e92\u4e2d\u4f7f\u7528 time.Duration \u548c time.Time \u4f8b\u5982 : Command-line \u6807\u5fd7: [ flag ] \u901a\u8fc7 [ time.ParseDuration ] \u652f\u6301 time.Duration JSON: [ encoding/json ] \u901a\u8fc7\u5176 [ UnmarshalJSON method] \u65b9\u6cd5\u652f\u6301\u5c06 time.Time \u7f16\u7801\u4e3a RFC 3339 \u5b57\u7b26\u4e32 SQL: [ database/sql ] \u652f\u6301\u5c06 DATETIME \u6216 TIMESTAMP \u5217\u8f6c\u6362\u4e3a time.Time \uff0c\u5982\u679c\u5e95\u5c42\u9a71\u52a8\u7a0b\u5e8f\u652f\u6301\u5219\u8fd4\u56de YAML: [ gopkg.in/yaml.v2 ] \u652f\u6301\u5c06 time.Time \u4f5c\u4e3a RFC 3339 \u5b57\u7b26\u4e32\uff0c\u5e76\u901a\u8fc7 [ time.ParseDuration ] \u652f\u6301 time.Duration \u3002 \u5f53\u4e0d\u80fd\u5728\u8fd9\u4e9b\u4ea4\u4e92\u4e2d\u4f7f\u7528 time.Duration \u65f6\uff0c\u8bf7\u4f7f\u7528 int \u6216 float64 \uff0c\u5e76\u5728\u5b57\u6bb5\u540d\u79f0\u4e2d\u5305\u542b\u5355\u4f4d\u3002 \u4f8b\u5982\uff0c\u7531\u4e8e encoding/json \u4e0d\u652f\u6301 time.Duration \uff0c\u56e0\u6b64\u8be5\u5355\u4f4d\u5305\u542b\u5728\u5b57\u6bb5\u7684\u540d\u79f0\u4e2d\u3002 Bad Good // {\"interval\": 2} type Config struct { Interval int `json:\"interval\"` } // {\"intervalMillis\": 2000} type Config struct { IntervalMillis int `json:\"intervalMillis\"` } \u5f53\u5728\u8fd9\u4e9b\u4ea4\u4e92\u4e2d\u4e0d\u80fd\u4f7f\u7528 time.Time \u65f6\uff0c\u9664\u975e\u8fbe\u6210\u4e00\u81f4\uff0c\u5426\u5219\u4f7f\u7528 string \u548c RFC 3339 \u4e2d\u5b9a\u4e49\u7684\u683c\u5f0f\u65f6\u95f4\u6233\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c[ Time.UnmarshalText ] \u4f7f\u7528\u6b64\u683c\u5f0f\uff0c\u5e76\u53ef\u901a\u8fc7 [ time.RFC3339 ] \u5728 Time.Format \u548c time.Parse \u4e2d\u4f7f\u7528\u3002 \u5c3d\u7ba1\u8fd9\u5728\u5b9e\u8df5\u4e2d\u5e76\u4e0d\u6210\u95ee\u9898\uff0c\u4f46\u8bf7\u8bb0\u4f4f\uff0c \"time\" \u5305\u4e0d\u652f\u6301\u89e3\u6790\u95f0\u79d2\u65f6\u95f4\u6233\uff08 8728 \uff09\uff0c\u4e5f\u4e0d\u5728\u8ba1\u7b97\u4e2d\u8003\u8651\u95f0\u79d2\uff08 15190 \uff09\u3002\u5982\u679c\u60a8\u6bd4\u8f83\u4e24\u4e2a\u65f6\u95f4\u77ac\u95f4\uff0c\u5219\u5dee\u5f02\u5c06\u4e0d\u5305\u62ec\u8fd9\u4e24\u4e2a\u77ac\u95f4\u4e4b\u95f4\u53ef\u80fd\u53d1\u751f\u7684\u95f0\u79d2\u3002 \u9519\u8bef\u7c7b\u578b Go \u4e2d\u6709\u591a\u79cd\u58f0\u660e\u9519\u8bef\uff08Error) \u7684\u9009\u9879\uff1a [ errors.New ] \u5bf9\u4e8e\u7b80\u5355\u9759\u6001\u5b57\u7b26\u4e32\u7684\u9519\u8bef [ fmt.Errorf ] \u7528\u4e8e\u683c\u5f0f\u5316\u7684\u9519\u8bef\u5b57\u7b26\u4e32 \u5b9e\u73b0 Error() \u65b9\u6cd5\u7684\u81ea\u5b9a\u4e49\u7c7b\u578b \u7528 [ \"pkg/errors\".Wrap ] \u7684 Wrapped errors \u8fd4\u56de\u9519\u8bef\u65f6\uff0c\u8bf7\u8003\u8651\u4ee5\u4e0b\u56e0\u7d20\u4ee5\u786e\u5b9a\u6700\u4f73\u9009\u62e9\uff1a \u8fd9\u662f\u4e00\u4e2a\u4e0d\u9700\u8981\u989d\u5916\u4fe1\u606f\u7684\u7b80\u5355\u9519\u8bef\u5417\uff1f\u5982\u679c\u662f\u8fd9\u6837\uff0c[ errors.New ] \u8db3\u591f\u4e86\u3002 \u5ba2\u6237\u9700\u8981\u68c0\u6d4b\u5e76\u5904\u7406\u6b64\u9519\u8bef\u5417\uff1f\u5982\u679c\u662f\u8fd9\u6837\uff0c\u5219\u5e94\u4f7f\u7528\u81ea\u5b9a\u4e49\u7c7b\u578b\u5e76\u5b9e\u73b0\u8be5 Error() \u65b9\u6cd5\u3002 \u60a8\u662f\u5426\u6b63\u5728\u4f20\u64ad\u4e0b\u6e38\u51fd\u6570\u8fd4\u56de\u7684\u9519\u8bef\uff1f\u5982\u679c\u662f\u8fd9\u6837\uff0c\u8bf7\u67e5\u770b\u672c\u6587\u540e\u9762\u6709\u5173\u9519\u8bef\u5305\u88c5 section on error wrapping \u90e8\u5206\u7684\u5185\u5bb9\u3002 \u5426\u5219 [ fmt.Errorf ] \u5c31\u53ef\u4ee5\u4e86\u3002 \u5982\u679c\u5ba2\u6237\u7aef\u9700\u8981\u68c0\u6d4b\u9519\u8bef\uff0c\u5e76\u4e14\u60a8\u5df2\u4f7f\u7528\u521b\u5efa\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u9519\u8bef [ errors.New ]\uff0c\u8bf7\u4f7f\u7528\u4e00\u4e2a\u9519\u8bef\u53d8\u91cf\u3002 Bad Good // package foo func Open () error { return errors . New ( \"could not open\" ) } // package bar func use () { if err := foo . Open (); err != nil { if err . Error () == \"could not open\" { // handle } else { panic ( \"unknown error\" ) } } } // package foo var ErrCouldNotOpen = errors . New ( \"could not open\" ) func Open () error { return ErrCouldNotOpen } // package bar if err := foo . Open (); err != nil { if err == foo . ErrCouldNotOpen { // handle } else { panic ( \"unknown error\" ) } } \u5982\u679c\u60a8\u6709\u53ef\u80fd\u9700\u8981\u5ba2\u6237\u7aef\u68c0\u6d4b\u7684\u9519\u8bef\uff0c\u5e76\u4e14\u60f3\u5411\u5176\u4e2d\u6dfb\u52a0\u66f4\u591a\u4fe1\u606f\uff08\u4f8b\u5982\uff0c\u5b83\u4e0d\u662f\u9759\u6001\u5b57\u7b26\u4e32\uff09\uff0c\u5219\u5e94\u4f7f\u7528\u81ea\u5b9a\u4e49\u7c7b\u578b\u3002 Bad Good func open ( file string ) error { return fmt . Errorf ( \"file %q not found\" , file ) } func use () { if err := open ( \"testfile.txt\" ); err != nil { if strings . Contains ( err . Error (), \"not found\" ) { // handle } else { panic ( \"unknown error\" ) } } } type errNotFound struct { file string } func ( e errNotFound ) Error () string { return fmt . Sprintf ( \"file %q not found\" , e . file ) } func open ( file string ) error { return errNotFound { file : file } } func use () { if err := open ( \"testfile.txt\" ); err != nil { if _ , ok := err .( errNotFound ); ok { // handle } else { panic ( \"unknown error\" ) } } } \u76f4\u63a5\u5bfc\u51fa\u81ea\u5b9a\u4e49\u9519\u8bef\u7c7b\u578b\u65f6\u8981\u5c0f\u5fc3\uff0c\u56e0\u4e3a\u5b83\u4eec\u5df2\u6210\u4e3a\u7a0b\u5e8f\u5305\u516c\u5171 API \u7684\u4e00\u90e8\u5206\u3002\u6700\u597d\u516c\u5f00\u5339\u914d\u5668\u529f\u80fd\u4ee5\u68c0\u67e5\u9519\u8bef\u3002 // package foo type errNotFound struct { file string } func ( e errNotFound ) Error () string { return fmt . Sprintf ( \"file %q not found\" , e . file ) } func IsNotFoundError ( err error ) bool { _ , ok := err .( errNotFound ) return ok } func Open ( file string ) error { return errNotFound { file : file } } // package bar if err := foo . Open ( \"foo\" ); err != nil { if foo . IsNotFoundError ( err ) { // handle } else { panic ( \"unknown error\" ) } } \u9519\u8bef\u5305\u88c5 (Error Wrapping) \u4e00\u4e2a\uff08\u51fd\u6570/\u65b9\u6cd5\uff09\u8c03\u7528\u5931\u8d25\u65f6\uff0c\u6709\u4e09\u79cd\u4e3b\u8981\u7684\u9519\u8bef\u4f20\u64ad\u65b9\u5f0f\uff1a \u5982\u679c\u6ca1\u6709\u8981\u6dfb\u52a0\u7684\u5176\u4ed6\u4e0a\u4e0b\u6587\uff0c\u5e76\u4e14\u60a8\u60f3\u8981\u7ef4\u62a4\u539f\u59cb\u9519\u8bef\u7c7b\u578b\uff0c\u5219\u8fd4\u56de\u539f\u59cb\u9519\u8bef\u3002 \u6dfb\u52a0\u4e0a\u4e0b\u6587\uff0c\u4f7f\u7528 [ \"pkg/errors\".Wrap ] \u4ee5\u4fbf\u9519\u8bef\u6d88\u606f\u63d0\u4f9b\u66f4\u591a\u4e0a\u4e0b\u6587 ,[ \"pkg/errors\".Cause ] \u53ef\u7528\u4e8e\u63d0\u53d6\u539f\u59cb\u9519\u8bef\u3002 \u5982\u679c\u8c03\u7528\u8005\u4e0d\u9700\u8981\u68c0\u6d4b\u6216\u5904\u7406\u7684\u7279\u5b9a\u9519\u8bef\u60c5\u51b5\uff0c\u4f7f\u7528 [ fmt.Errorf ]\u3002 \u5efa\u8bae\u5728\u53ef\u80fd\u7684\u5730\u65b9\u6dfb\u52a0\u4e0a\u4e0b\u6587\uff0c\u4ee5\u4f7f\u60a8\u83b7\u5f97\u8bf8\u5982\u201c\u8c03\u7528\u670d\u52a1 foo\uff1a\u8fde\u63a5\u88ab\u62d2\u7edd\u201d\u4e4b\u7c7b\u7684\u66f4\u6709\u7528\u7684\u9519\u8bef\uff0c\u800c\u4e0d\u662f\u8bf8\u5982\u201c\u8fde\u63a5\u88ab\u62d2\u7edd\u201d\u4e4b\u7c7b\u7684\u6a21\u7cca\u9519\u8bef\u3002 \u5728\u5c06\u4e0a\u4e0b\u6587\u6dfb\u52a0\u5230\u8fd4\u56de\u7684\u9519\u8bef\u65f6\uff0c\u8bf7\u907f\u514d\u4f7f\u7528\u201cfailed to\u201d\u4e4b\u7c7b\u7684\u77ed\u8bed\u4ee5\u4fdd\u6301\u4e0a\u4e0b\u6587\u7b80\u6d01\uff0c\u8fd9\u4e9b\u77ed\u8bed\u4f1a\u9648\u8ff0\u660e\u663e\u7684\u5185\u5bb9\uff0c\u5e76\u968f\u7740\u9519\u8bef\u5728\u5806\u6808\u4e2d\u7684\u6e17\u900f\u800c\u9010\u6e10\u5806\u79ef\uff1a Bad Good s , err := store . New () if err != nil { return fmt . Errorf ( \"failed to create new store: %s\" , err ) } s , err := store . New () if err != nil { return fmt . Errorf ( \"new store: %s\" , err ) } failed to x: failed to y: failed to create new store: the error x: y: new store: the error \u4f46\u662f\uff0c\u4e00\u65e6\u5c06\u9519\u8bef\u53d1\u9001\u5230\u53e6\u4e00\u4e2a\u7cfb\u7edf\uff0c\u5c31\u5e94\u8be5\u660e\u786e\u6d88\u606f\u662f\u9519\u8bef\u6d88\u606f\uff08\u4f8b\u5982\u4f7f\u7528 err \u6807\u8bb0\uff0c\u6216\u5728\u65e5\u5fd7\u4e2d\u4ee5\u201dFailed\u201d\u4e3a\u524d\u7f00\uff09\u3002 \u53e6\u8bf7\u53c2\u89c1 Don\u2019t just check errors, handle them gracefully . \u4e0d\u8981\u53ea\u662f\u68c0\u67e5\u9519\u8bef\uff0c\u8981\u4f18\u96c5\u5730\u5904\u7406\u9519\u8bef \u5904\u7406\u7c7b\u578b\u65ad\u8a00\u5931\u8d25 type assertion \u7684\u5355\u4e2a\u8fd4\u56de\u503c\u5f62\u5f0f\u9488\u5bf9\u4e0d\u6b63\u786e\u7684\u7c7b\u578b\u5c06\u4ea7\u751f panic\u3002\u56e0\u6b64\uff0c\u8bf7\u59cb\u7ec8\u4f7f\u7528\u201ccomma ok\u201d\u7684\u60ef\u7528\u6cd5\u3002 Bad Good t := i .( string ) t , ok := i .( string ) if ! ok { // \u4f18\u96c5\u5730\u5904\u7406\u9519\u8bef } \u4e0d\u8981 panic \u5728\u751f\u4ea7\u73af\u5883\u4e2d\u8fd0\u884c\u7684\u4ee3\u7801\u5fc5\u987b\u907f\u514d\u51fa\u73b0 panic\u3002panic \u662f cascading failures \u7ea7\u8054\u5931\u8d25\u7684\u4e3b\u8981\u6839\u6e90 \u3002\u5982\u679c\u53d1\u751f\u9519\u8bef\uff0c\u8be5\u51fd\u6570\u5fc5\u987b\u8fd4\u56de\u9519\u8bef\uff0c\u5e76\u5141\u8bb8\u8c03\u7528\u65b9\u51b3\u5b9a\u5982\u4f55\u5904\u7406\u5b83\u3002 Bad Good func run ( args [] string ) { if len ( args ) == 0 { panic ( \"an argument is required\" ) } // ... } func main () { run ( os . Args [ 1 :]) } func run ( args [] string ) error { if len ( args ) == 0 { return errors . New ( \"an argument is required\" ) } // ... return nil } func main () { if err := run ( os . Args [ 1 :]); err != nil { fmt . Fprintln ( os . Stderr , err ) os . Exit ( 1 ) } } panic/recover \u4e0d\u662f\u9519\u8bef\u5904\u7406\u7b56\u7565\u3002\u4ec5\u5f53\u53d1\u751f\u4e0d\u53ef\u6062\u590d\u7684\u4e8b\u60c5\uff08\u4f8b\u5982\uff1anil \u5f15\u7528\uff09\u65f6\uff0c\u7a0b\u5e8f\u624d\u5fc5\u987b panic\u3002\u7a0b\u5e8f\u521d\u59cb\u5316\u662f\u4e00\u4e2a\u4f8b\u5916\uff1a\u7a0b\u5e8f\u542f\u52a8\u65f6\u5e94\u4f7f\u7a0b\u5e8f\u4e2d\u6b62\u7684\u4e0d\u826f\u60c5\u51b5\u53ef\u80fd\u4f1a\u5f15\u8d77 panic\u3002 var _statusTemplate = template . Must ( template . New ( \"name\" ). Parse ( \"_statusHTML\" )) \u5373\u4f7f\u5728\u6d4b\u8bd5\u4ee3\u7801\u4e2d\uff0c\u4e5f\u4f18\u5148\u4f7f\u7528 t.Fatal \u6216\u8005 t.FailNow \u800c\u4e0d\u662f panic \u6765\u786e\u4fdd\u5931\u8d25\u88ab\u6807\u8bb0\u3002 Bad Good // func TestFoo(t *testing.T) f , err := ioutil . TempFile ( \"\" , \"test\" ) if err != nil { panic ( \"failed to set up test\" ) } // func TestFoo(t *testing.T) f , err := ioutil . TempFile ( \"\" , \"test\" ) if err != nil { t . Fatal ( \"failed to set up test\" ) } \u4f7f\u7528 go.uber.org/atomic \u4f7f\u7528 sync/atomic \u5305\u7684\u539f\u5b50\u64cd\u4f5c\u5bf9\u539f\u59cb\u7c7b\u578b ( int32 , int64 \u7b49\uff09\u8fdb\u884c\u64cd\u4f5c\uff0c\u56e0\u4e3a\u5f88\u5bb9\u6613\u5fd8\u8bb0\u4f7f\u7528\u539f\u5b50\u64cd\u4f5c\u6765\u8bfb\u53d6\u6216\u4fee\u6539\u53d8\u91cf\u3002 go.uber.org/atomic \u901a\u8fc7\u9690\u85cf\u57fa\u7840\u7c7b\u578b\u4e3a\u8fd9\u4e9b\u64cd\u4f5c\u589e\u52a0\u4e86\u7c7b\u578b\u5b89\u5168\u6027\u3002\u6b64\u5916\uff0c\u5b83\u5305\u62ec\u4e00\u4e2a\u65b9\u4fbf\u7684 atomic.Bool \u7c7b\u578b\u3002 Bad Good type foo struct { running int32 // atomic } func ( f * foo ) start () { if atomic . SwapInt32 ( & f . running , 1 ) == 1 { // already running\u2026 return } // start the Foo } func ( f * foo ) isRunning () bool { return f . running == 1 // race! } type foo struct { running atomic . Bool } func ( f * foo ) start () { if f . running . Swap ( true ) { // already running\u2026 return } // start the Foo } func ( f * foo ) isRunning () bool { return f . running . Load () } \u907f\u514d\u53ef\u53d8\u5168\u5c40\u53d8\u91cf \u4f7f\u7528\u9009\u62e9\u4f9d\u8d56\u6ce8\u5165\u65b9\u5f0f\u907f\u514d\u6539\u53d8\u5168\u5c40\u53d8\u91cf\u3002 \u65e2\u9002\u7528\u4e8e\u51fd\u6570\u6307\u9488\u53c8\u9002\u7528\u4e8e\u5176\u4ed6\u503c\u7c7b\u578b Bad Good // sign.go var _timeNow = time . Now func sign ( msg string ) string { now := _timeNow () return signWithTime ( msg , now ) } // sign.go type signer struct { now func () time . Time } func newSigner () * signer { return & signer { now : time . Now , } } func ( s * signer ) Sign ( msg string ) string { now := s . now () return signWithTime ( msg , now ) } // sign_test.go func TestSign ( t * testing . T ) { oldTimeNow := _timeNow _timeNow = func () time . Time { return someFixedTime } defer func () { _timeNow = oldTimeNow }() assert . Equal ( t , want , sign ( give )) } // sign_test.go func TestSigner ( t * testing . T ) { s := newSigner () s . now = func () time . Time { return someFixedTime } assert . Equal ( t , want , s . Sign ( give )) } \u907f\u514d\u5728\u516c\u5171\u7ed3\u6784\u4e2d\u5d4c\u5165\u7c7b\u578b \u8fd9\u4e9b\u5d4c\u5165\u7684\u7c7b\u578b\u6cc4\u6f0f\u5b9e\u73b0\u7ec6\u8282\u3001\u7981\u6b62\u7c7b\u578b\u6f14\u5316\u548c\u6a21\u7cca\u7684\u6587\u6863\u3002 \u5047\u8bbe\u60a8\u4f7f\u7528\u5171\u4eab\u7684 AbstractList \u5b9e\u73b0\u4e86\u591a\u79cd\u5217\u8868\u7c7b\u578b\uff0c\u8bf7\u907f\u514d\u5728\u5177\u4f53\u7684\u5217\u8868\u5b9e\u73b0\u4e2d\u5d4c\u5165 AbstractList \u3002 \u76f8\u53cd\uff0c\u53ea\u9700\u624b\u52a8\u5c06\u65b9\u6cd5\u5199\u5165\u5177\u4f53\u7684\u5217\u8868\uff0c\u8be5\u5217\u8868\u5c06\u59d4\u6258\u7ed9\u62bd\u8c61\u5217\u8868\u3002 type AbstractList struct {} // \u6dfb\u52a0\u5c06\u5b9e\u4f53\u6dfb\u52a0\u5230\u5217\u8868\u4e2d\u3002 func ( l * AbstractList ) Add ( e Entity ) { // ... } // \u79fb\u9664\u4ece\u5217\u8868\u4e2d\u79fb\u9664\u5b9e\u4f53\u3002 func ( l * AbstractList ) Remove ( e Entity ) { // ... } Bad Good // ConcreteList \u662f\u4e00\u4e2a\u5b9e\u4f53\u5217\u8868\u3002 type ConcreteList struct { * AbstractList } // ConcreteList \u662f\u4e00\u4e2a\u5b9e\u4f53\u5217\u8868\u3002 type ConcreteList struct { list * AbstractList } // \u6dfb\u52a0\u5c06\u5b9e\u4f53\u6dfb\u52a0\u5230\u5217\u8868\u4e2d\u3002 func ( l * ConcreteList ) Add ( e Entity ) { return l . list . Add ( e ) } // \u79fb\u9664\u4ece\u5217\u8868\u4e2d\u79fb\u9664\u5b9e\u4f53\u3002 func ( l * ConcreteList ) Remove ( e Entity ) { return l . list . Remove ( e ) } Go \u5141\u8bb8 \u7c7b\u578b\u5d4c\u5165 \u4f5c\u4e3a\u7ee7\u627f\u548c\u7ec4\u5408\u4e4b\u95f4\u7684\u6298\u8877\u3002 \u5916\u90e8\u7c7b\u578b\u83b7\u53d6\u5d4c\u5165\u7c7b\u578b\u7684\u65b9\u6cd5\u7684\u9690\u5f0f\u526f\u672c\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u59d4\u6258\u7ed9\u5d4c\u5165\u5b9e\u4f8b\u7684\u540c\u4e00\u65b9\u6cd5\u3002 \u7ed3\u6784\u8fd8\u83b7\u5f97\u4e0e\u7c7b\u578b\u540c\u540d\u7684\u5b57\u6bb5\u3002 \u6240\u4ee5\uff0c\u5982\u679c\u5d4c\u5165\u7684\u7c7b\u578b\u662f public\uff0c\u90a3\u4e48\u5b57\u6bb5\u662f public\u3002\u4e3a\u4e86\u4fdd\u6301\u5411\u540e\u517c\u5bb9\u6027\uff0c\u5916\u90e8\u7c7b\u578b\u7684\u6bcf\u4e2a\u672a\u6765\u7248\u672c\u90fd\u5fc5\u987b\u4fdd\u7559\u5d4c\u5165\u7c7b\u578b\u3002 \u5f88\u5c11\u9700\u8981\u5d4c\u5165\u7c7b\u578b\u3002 \u8fd9\u662f\u4e00\u79cd\u65b9\u4fbf\uff0c\u53ef\u4ee5\u5e2e\u52a9\u60a8\u907f\u514d\u7f16\u5199\u5197\u957f\u7684\u59d4\u6258\u65b9\u6cd5\u3002 \u5373\u4f7f\u5d4c\u5165\u517c\u5bb9\u7684\u62bd\u8c61\u5217\u8868 interface \uff0c\u800c\u4e0d\u662f\u7ed3\u6784\u4f53\uff0c\u8fd9\u5c06\u4e3a\u5f00\u53d1\u4eba\u5458\u63d0\u4f9b\u66f4\u5927\u7684\u7075\u6d3b\u6027\u6765\u6539\u53d8\u672a\u6765\uff0c\u4f46\u4ecd\u7136\u6cc4\u9732\u4e86\u5177\u4f53\u5217\u8868\u4f7f\u7528\u62bd\u8c61\u5b9e\u73b0\u7684\u7ec6\u8282\u3002 Bad Good // AbstractList \u662f\u5404\u79cd\u5b9e\u4f53\u5217\u8868\u7684\u901a\u7528\u5b9e\u73b0\u3002 type AbstractList interface { Add ( Entity ) Remove ( Entity ) } // ConcreteList \u662f\u4e00\u4e2a\u5b9e\u4f53\u5217\u8868\u3002 type ConcreteList struct { AbstractList } // ConcreteList \u662f\u4e00\u4e2a\u5b9e\u4f53\u5217\u8868\u3002 type ConcreteList struct { list * AbstractList } // \u6dfb\u52a0\u5c06\u5b9e\u4f53\u6dfb\u52a0\u5230\u5217\u8868\u4e2d\u3002 func ( l * ConcreteList ) Add ( e Entity ) { return l . list . Add ( e ) } // \u79fb\u9664\u4ece\u5217\u8868\u4e2d\u79fb\u9664\u5b9e\u4f53\u3002 func ( l * ConcreteList ) Remove ( e Entity ) { return l . list . Remove ( e ) } \u65e0\u8bba\u662f\u4f7f\u7528\u5d4c\u5165\u5f0f\u7ed3\u6784\u8fd8\u662f\u4f7f\u7528\u5d4c\u5165\u5f0f\u63a5\u53e3\uff0c\u5d4c\u5165\u5f0f\u7c7b\u578b\u90fd\u4f1a\u9650\u5236\u7c7b\u578b\u7684\u6f14\u5316. \u5411\u5d4c\u5165\u5f0f\u63a5\u53e3\u6dfb\u52a0\u65b9\u6cd5\u662f\u4e00\u4e2a\u7834\u574f\u6027\u7684\u6539\u53d8\u3002 \u5220\u9664\u5d4c\u5165\u7c7b\u578b\u662f\u4e00\u4e2a\u7834\u574f\u6027\u7684\u6539\u53d8\u3002 \u5373\u4f7f\u4f7f\u7528\u6ee1\u8db3\u76f8\u540c\u63a5\u53e3\u7684\u66ff\u4ee3\u65b9\u6cd5\u66ff\u6362\u5d4c\u5165\u7c7b\u578b\uff0c\u4e5f\u662f\u4e00\u4e2a\u7834\u574f\u6027\u7684\u6539\u53d8\u3002 \u5c3d\u7ba1\u7f16\u5199\u8fd9\u4e9b\u59d4\u6258\u65b9\u6cd5\u662f\u4e4f\u5473\u7684\uff0c\u4f46\u662f\u989d\u5916\u7684\u5de5\u4f5c\u9690\u85cf\u4e86\u5b9e\u73b0\u7ec6\u8282\uff0c\u7559\u4e0b\u4e86\u66f4\u591a\u7684\u66f4\u6539\u673a\u4f1a\uff0c\u8fd8\u6d88\u9664\u4e86\u5728\u6587\u6863\u4e2d\u53d1\u73b0\u5b8c\u6574\u5217\u8868\u63a5\u53e3\u7684\u95f4\u63a5\u6027\u64cd\u4f5c\u3002 \u907f\u514d\u4f7f\u7528\u5185\u7f6e\u540d\u79f0 Go\u8bed\u8a00\u89c4\u8303 language specification \u6982\u8ff0\u4e86\u51e0\u4e2a\u5185\u7f6e\u7684\uff0c \u4e0d\u5e94\u5728Go\u9879\u76ee\u4e2d\u4f7f\u7528\u7684\u540d\u79f0\u6807\u8bc6 predeclared identifiers \u3002 \u6839\u636e\u4e0a\u4e0b\u6587\u7684\u4e0d\u540c\uff0c\u5c06\u8fd9\u4e9b\u6807\u8bc6\u7b26\u4f5c\u4e3a\u540d\u79f0\u91cd\u590d\u4f7f\u7528\uff0c \u5c06\u5728\u5f53\u524d\u4f5c\u7528\u57df\uff08\u6216\u4efb\u4f55\u5d4c\u5957\u4f5c\u7528\u57df\uff09\u4e2d\u9690\u85cf\u539f\u59cb\u6807\u8bc6\u7b26\uff0c\u6216\u8005\u6df7\u6dc6\u4ee3\u7801\u3002 \u5728\u6700\u597d\u7684\u60c5\u51b5\u4e0b\uff0c\u7f16\u8bd1\u5668\u4f1a\u62a5\u9519\uff1b\u5728\u6700\u574f\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u6837\u7684\u4ee3\u7801\u53ef\u80fd\u4f1a\u5f15\u5165\u6f5c\u5728\u7684\u3001\u96be\u4ee5\u6062\u590d\u7684\u9519\u8bef\u3002 Bad Good var error string // `error` \u4f5c\u7528\u57df\u9690\u5f0f\u8986\u76d6 // or func handleErrorMessage ( error string ) { // `error` \u4f5c\u7528\u57df\u9690\u5f0f\u8986\u76d6 } var errorMessage string // `error` \u6307\u5411\u5185\u7f6e\u7684\u975e\u8986\u76d6 // or func handleErrorMessage ( msg string ) { // `error` \u6307\u5411\u5185\u7f6e\u7684\u975e\u8986\u76d6 } type Foo struct { // \u867d\u7136\u8fd9\u4e9b\u5b57\u6bb5\u5728\u6280\u672f\u4e0a\u4e0d\u6784\u6210\u9634\u5f71\uff0c\u4f46`error`\u6216`string`\u5b57\u7b26\u4e32\u7684\u91cd\u6620\u5c04\u73b0\u5728\u662f\u4e0d\u660e\u786e\u7684\u3002 error error string string } func ( f Foo ) Error () error { // `error` \u548c `f.error` \u5728\u89c6\u89c9\u4e0a\u662f\u76f8\u4f3c\u7684 return f . error } func ( f Foo ) String () string { // `string` and `f.string` \u5728\u89c6\u89c9\u4e0a\u662f\u76f8\u4f3c\u7684 return f . string } type Foo struct { // `error` and `string` \u73b0\u5728\u662f\u660e\u786e\u7684\u3002 err error str string } func ( f Foo ) Error () error { return f . err } func ( f Foo ) String () string { return f . str } \u6ce8\u610f\uff0c\u7f16\u8bd1\u5668\u5728\u4f7f\u7528\u9884\u5148\u5206\u9694\u7684\u6807\u8bc6\u7b26\u65f6\u4e0d\u4f1a\u751f\u6210\u9519\u8bef\uff0c \u4f46\u662f\u8bf8\u5982 go vet \u4e4b\u7c7b\u7684\u5de5\u5177\u4f1a\u6b63\u786e\u5730\u6307\u51fa\u8fd9\u4e9b\u548c\u5176\u4ed6\u60c5\u51b5\u4e0b\u7684\u9690\u5f0f\u95ee\u9898\u3002 \u907f\u514d\u4f7f\u7528 init() \u5c3d\u53ef\u80fd\u907f\u514d\u4f7f\u7528 init() \u3002\u5f53 init() \u662f\u4e0d\u53ef\u907f\u514d\u6216\u53ef\u53d6\u7684\uff0c\u4ee3\u7801\u5e94\u5148\u5c1d\u8bd5\uff1a \u65e0\u8bba\u7a0b\u5e8f\u73af\u5883\u6216\u8c03\u7528\u5982\u4f55\uff0c\u90fd\u8981\u5b8c\u5168\u786e\u5b9a\u3002 \u907f\u514d\u4f9d\u8d56\u4e8e\u5176\u4ed6 init() \u51fd\u6570\u7684\u987a\u5e8f\u6216\u526f\u4f5c\u7528\u3002\u867d\u7136 init() \u987a\u5e8f\u662f\u660e\u786e\u7684\uff0c\u4f46\u4ee3\u7801\u53ef\u4ee5\u66f4\u6539\uff0c \u56e0\u6b64 init() \u51fd\u6570\u4e4b\u95f4\u7684\u5173\u7cfb\u53ef\u80fd\u4f1a\u4f7f\u4ee3\u7801\u53d8\u5f97\u8106\u5f31\u548c\u5bb9\u6613\u51fa\u9519\u3002 \u907f\u514d\u8bbf\u95ee\u6216\u64cd\u4f5c\u5168\u5c40\u6216\u73af\u5883\u72b6\u6001\uff0c\u5982\u673a\u5668\u4fe1\u606f\u3001\u73af\u5883\u53d8\u91cf\u3001\u5de5\u4f5c\u76ee\u5f55\u3001\u7a0b\u5e8f\u53c2\u6570/\u8f93\u5165\u7b49\u3002 \u907f\u514d I/O \uff0c\u5305\u62ec\u6587\u4ef6\u7cfb\u7edf\u3001\u7f51\u7edc\u548c\u7cfb\u7edf\u8c03\u7528\u3002 \u4e0d\u80fd\u6ee1\u8db3\u8fd9\u4e9b\u8981\u6c42\u7684\u4ee3\u7801\u53ef\u80fd\u5c5e\u4e8e\u8981\u4f5c\u4e3a main() \u8c03\u7528\u7684\u4e00\u90e8\u5206\uff08\u6216\u7a0b\u5e8f\u751f\u547d\u5468\u671f\u4e2d\u7684\u5176\u4ed6\u5730\u65b9\uff09\uff0c \u6216\u8005\u4f5c\u4e3a main() \u672c\u8eab\u7684\u4e00\u90e8\u5206\u5199\u5165\u3002\u7279\u522b\u662f\uff0c\u6253\u7b97\u7531\u5176\u4ed6\u7a0b\u5e8f\u4f7f\u7528\u7684\u5e93\u5e94\u8be5\u7279\u522b\u6ce8\u610f\u5b8c\u5168\u786e\u5b9a\u6027\uff0c \u800c\u4e0d\u662f\u6267\u884c\u201cinit magic\u201d Bad Good type Foo struct { // ... } var _defaultFoo Foo func init () { _defaultFoo = Foo { // ... } } var _defaultFoo = Foo { // ... } // or, \u4e3a\u4e86\u66f4\u597d\u7684\u53ef\u6d4b\u8bd5\u6027: var _defaultFoo = defaultFoo () func defaultFoo () Foo { return Foo { // ... } } type Config struct { // ... } var _config Config func init () { // Bad: \u57fa\u4e8e\u5f53\u524d\u76ee\u5f55 cwd , _ := os . Getwd () // Bad: I/O raw , _ := ioutil . ReadFile ( path . Join ( cwd , \"config\" , \"config.yaml\" ), ) yaml . Unmarshal ( raw , & _config ) } type Config struct { // ... } func loadConfig () Config { cwd , err := os . Getwd () // handle err raw , err := ioutil . ReadFile ( path . Join ( cwd , \"config\" , \"config.yaml\" ), ) // handle err var config Config yaml . Unmarshal ( raw , & config ) return config } \u8003\u8651\u5230\u4e0a\u8ff0\u60c5\u51b5\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c init() \u53ef\u80fd\u66f4\u53ef\u53d6\u6216\u662f\u5fc5\u8981\u7684\uff0c\u53ef\u80fd\u5305\u62ec\uff1a \u4e0d\u80fd\u8868\u793a\u4e3a\u5355\u4e2a\u8d4b\u503c\u7684\u590d\u6742\u8868\u8fbe\u5f0f\u3002 \u53ef\u63d2\u5165\u7684\u94a9\u5b50\uff0c\u5982 database/sql \u3001\u7f16\u7801\u7c7b\u578b\u6ce8\u518c\u8868\u7b49\u3002 \u5bf9 Google Cloud Functions \u548c\u5176\u4ed6\u5f62\u5f0f\u7684\u786e\u5b9a\u6027\u9884\u8ba1\u7b97\u7684\u4f18\u5316\u3002 \u8ffd\u52a0\u65f6\u4f18\u5148\u6307\u5b9a\u5207\u7247\u5bb9\u91cf \u8ffd\u52a0\u65f6\u4f18\u5148\u6307\u5b9a\u5207\u7247\u5bb9\u91cf \u5728\u5c3d\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\uff0c\u5728\u521d\u59cb\u5316\u8981\u8ffd\u52a0\u7684\u5207\u7247\u65f6\u4e3a make() \u63d0\u4f9b\u4e00\u4e2a\u5bb9\u91cf\u503c\u3002 Bad Good for n := 0 ; n < b . N ; n ++ { data := make ([] int , 0 ) for k := 0 ; k < size ; k ++ { data = append ( data , k ) } } for n := 0 ; n < b . N ; n ++ { data := make ([] int , 0 , size ) for k := 0 ; k < size ; k ++ { data = append ( data , k ) } } BenchmarkBad-4 100000000 2.48s BenchmarkGood-4 100000000 0.21s \u6027\u80fd \u6027\u80fd\u65b9\u9762\u7684\u7279\u5b9a\u51c6\u5219\u53ea\u9002\u7528\u4e8e\u9ad8\u9891\u573a\u666f\u3002 \u4f18\u5148\u4f7f\u7528 strconv \u800c\u4e0d\u662f fmt \u5c06\u539f\u8bed\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u6216\u4ece\u5b57\u7b26\u4e32\u8f6c\u6362\u65f6\uff0c strconv \u901f\u5ea6\u6bd4 fmt \u5feb\u3002 Bad Good for i := 0 ; i < b . N ; i ++ { s := fmt . Sprint ( rand . Int ()) } for i := 0 ; i < b . N ; i ++ { s := strconv . Itoa ( rand . Int ()) } BenchmarkFmtSprint-4 143 ns/op 2 allocs/op BenchmarkStrconv-4 64.2 ns/op 1 allocs/op \u907f\u514d\u5b57\u7b26\u4e32\u5230\u5b57\u8282\u7684\u8f6c\u6362 \u4e0d\u8981\u53cd\u590d\u4ece\u56fa\u5b9a\u5b57\u7b26\u4e32\u521b\u5efa\u5b57\u8282 slice\u3002\u76f8\u53cd\uff0c\u8bf7\u6267\u884c\u4e00\u6b21\u8f6c\u6362\u5e76\u6355\u83b7\u7ed3\u679c\u3002 Bad Good for i := 0 ; i < b . N ; i ++ { w . Write ([] byte ( \"Hello world\" )) } data := [] byte ( \"Hello world\" ) for i := 0 ; i < b . N ; i ++ { w . Write ( data ) } BenchmarkBad-4 50000000 22.2 ns/op BenchmarkGood-4 500000000 3.25 ns/op \u6307\u5b9a\u5bb9\u5668\u5bb9\u91cf \u5c3d\u53ef\u80fd\u6307\u5b9a\u5bb9\u5668\u5bb9\u91cf\uff0c\u4ee5\u4fbf\u4e3a\u5bb9\u5668\u9884\u5148\u5206\u914d\u5185\u5b58\u3002\u8fd9\u5c06\u5728\u6dfb\u52a0\u5143\u7d20\u65f6\u6700\u5c0f\u5316\u540e\u7eed\u5206\u914d\uff08\u901a\u8fc7\u590d\u5236\u548c\u8c03\u6574\u5bb9\u5668\u5927\u5c0f\uff09\u3002 \u6307\u5b9aMap\u5bb9\u91cf\u63d0\u793a \u5728\u5c3d\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\uff0c\u5728\u4f7f\u7528 make() \u521d\u59cb\u5316\u7684\u65f6\u5019\u63d0\u4f9b\u5bb9\u91cf\u4fe1\u606f make ( map [ T1 ] T2 , hint ) \u5411 make() \u63d0\u4f9b\u5bb9\u91cf\u63d0\u793a\u4f1a\u5728\u521d\u59cb\u5316\u65f6\u5c1d\u8bd5\u8c03\u6574map\u7684\u5927\u5c0f\uff0c\u8fd9\u5c06\u51cf\u5c11\u5728\u5c06\u5143\u7d20\u6dfb\u52a0\u5230map\u65f6\u4e3amap\u91cd\u65b0\u5206\u914d\u5185\u5b58\u3002 \u6ce8\u610f\uff0c\u4e0eslices\u4e0d\u540c\u3002map capacity\u63d0\u793a\u5e76\u4e0d\u4fdd\u8bc1\u5b8c\u5168\u7684\u62a2\u5360\u5f0f\u5206\u914d\uff0c\u800c\u662f\u7528\u4e8e\u4f30\u8ba1\u6240\u9700\u7684hashmap bucket\u7684\u6570\u91cf\u3002 \u56e0\u6b64\uff0c\u5728\u5c06\u5143\u7d20\u6dfb\u52a0\u5230map\u65f6\uff0c\u751a\u81f3\u5728\u6307\u5b9amap\u5bb9\u91cf\u65f6\uff0c\u4ecd\u53ef\u80fd\u53d1\u751f\u5206\u914d\u3002 Bad Good m := make ( map [ string ] os . FileInfo ) files , _ := ioutil . ReadDir ( \"./files\" ) for _ , f := range files { m [ f . Name ()] = f } files , _ := ioutil . ReadDir ( \"./files\" ) m := make ( map [ string ] os . FileInfo , len ( files )) for _ , f := range files { m [ f . Name ()] = f } `m` \u662f\u5728\u6ca1\u6709\u5927\u5c0f\u63d0\u793a\u7684\u60c5\u51b5\u4e0b\u521b\u5efa\u7684\uff1b \u5728\u8fd0\u884c\u65f6\u53ef\u80fd\u4f1a\u6709\u66f4\u591a\u5206\u914d\u3002 `m` \u662f\u6709\u5927\u5c0f\u63d0\u793a\u521b\u5efa\u7684\uff1b\u5728\u8fd0\u884c\u65f6\u53ef\u80fd\u4f1a\u6709\u66f4\u5c11\u7684\u5206\u914d\u3002 \u6307\u5b9a\u5207\u7247\u5bb9\u91cf \u5728\u5c3d\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\uff0c\u5728\u4f7f\u7528 make() \u521d\u59cb\u5316\u5207\u7247\u65f6\u63d0\u4f9b\u5bb9\u91cf\u4fe1\u606f\uff0c\u7279\u522b\u662f\u5728\u8ffd\u52a0\u5207\u7247\u65f6\u3002 make ([] T , length , capacity ) \u4e0emaps\u4e0d\u540c\uff0cslice capacity\u4e0d\u662f\u4e00\u4e2a\u63d0\u793a\uff1a\u7f16\u8bd1\u5668\u5c06\u4e3a\u63d0\u4f9b\u7ed9 make() \u7684slice\u7684\u5bb9\u91cf\u5206\u914d\u8db3\u591f\u7684\u5185\u5b58\uff0c \u8fd9\u610f\u5473\u7740\u540e\u7eed\u7684append()`\u64cd\u4f5c\u5c06\u5bfc\u81f4\u96f6\u5206\u914d\uff08\u76f4\u5230slice\u7684\u957f\u5ea6\u4e0e\u5bb9\u91cf\u5339\u914d\uff0c\u5728\u6b64\u4e4b\u540e\uff0c\u4efb\u4f55append\u90fd\u53ef\u80fd\u8c03\u6574\u5927\u5c0f\u4ee5\u5bb9\u7eb3\u5176\u4ed6\u5143\u7d20\uff09\u3002 Bad Good for n := 0 ; n < b . N ; n ++ { data := make ([] int , 0 ) for k := 0 ; k < size ; k ++ { data = append ( data , k ) } } for n := 0 ; n < b . N ; n ++ { data := make ([] int , 0 , size ) for k := 0 ; k < size ; k ++ { data = append ( data , k ) } } BenchmarkBad-4 100000000 2.48s BenchmarkGood-4 100000000 0.21s \u89c4\u8303 \u4e00\u81f4\u6027 \u672c\u6587\u4e2d\u6982\u8ff0\u7684\u4e00\u4e9b\u6807\u51c6\u90fd\u662f\u5ba2\u89c2\u6027\u7684\u8bc4\u4f30\uff0c\u662f\u6839\u636e\u573a\u666f\u3001\u4e0a\u4e0b\u6587\u3001\u6216\u8005\u4e3b\u89c2\u6027\u7684\u5224\u65ad\uff1b \u4f46\u662f\u6700\u91cd\u8981\u7684\u662f\uff0c \u4fdd\u6301\u4e00\u81f4 . \u4e00\u81f4\u6027\u7684\u4ee3\u7801\u66f4\u5bb9\u6613\u7ef4\u62a4\u3001\u662f\u66f4\u5408\u7406\u7684\u3001\u9700\u8981\u66f4\u5c11\u7684\u5b66\u4e60\u6210\u672c\u3001\u5e76\u4e14\u968f\u7740\u65b0\u7684\u7ea6\u5b9a\u51fa\u73b0\u6216\u8005\u51fa\u73b0\u9519\u8bef\u540e\u66f4\u5bb9\u6613\u8fc1\u79fb\u3001\u66f4\u65b0\u3001\u4fee\u590d bug \u76f8\u53cd\uff0c\u5728\u4e00\u4e2a\u4ee3\u7801\u5e93\u4e2d\u5305\u542b\u591a\u4e2a\u5b8c\u5168\u4e0d\u540c\u6216\u51b2\u7a81\u7684\u4ee3\u7801\u98ce\u683c\u4f1a\u5bfc\u81f4\u7ef4\u62a4\u6210\u672c\u5f00\u9500\u3001\u4e0d\u786e\u5b9a\u6027\u548c\u8ba4\u77e5\u504f\u5dee\u3002\u6240\u6709\u8fd9\u4e9b\u90fd\u4f1a\u76f4\u63a5\u5bfc\u81f4\u901f\u5ea6\u964d\u4f4e\u3001\u4ee3\u7801\u5ba1\u67e5\u75db\u82e6\u3001\u800c\u4e14\u589e\u52a0 bug \u6570\u91cf\u3002 \u5c06\u8fd9\u4e9b\u6807\u51c6\u5e94\u7528\u4e8e\u4ee3\u7801\u5e93\u65f6\uff0c\u5efa\u8bae\u5728 package\uff08\u6216\u66f4\u5927\uff09\u7ea7\u522b\u8fdb\u884c\u66f4\u6539\uff0c\u5b50\u5305\u7ea7\u522b\u7684\u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7\u5c06\u591a\u4e2a\u6837\u5f0f\u5f15\u5165\u5230\u540c\u4e00\u4ee3\u7801\u4e2d\uff0c\u8fdd\u53cd\u4e86\u4e0a\u8ff0\u5173\u6ce8\u70b9\u3002 \u76f8\u4f3c\u7684\u58f0\u660e\u653e\u5728\u4e00\u7ec4 Go \u8bed\u8a00\u652f\u6301\u5c06\u76f8\u4f3c\u7684\u58f0\u660e\u653e\u5728\u4e00\u4e2a\u7ec4\u5185\u3002 Bad Good import \"a\" import \"b\" import ( \"a\" \"b\" ) \u8fd9\u540c\u6837\u9002\u7528\u4e8e\u5e38\u91cf\u3001\u53d8\u91cf\u548c\u7c7b\u578b\u58f0\u660e\uff1a Bad Good const a = 1 const b = 2 var a = 1 var b = 2 type Area float64 type Volume float64 const ( a = 1 b = 2 ) var ( a = 1 b = 2 ) type ( Area float64 Volume float64 ) \u4ec5\u5c06\u76f8\u5173\u7684\u58f0\u660e\u653e\u5728\u4e00\u7ec4\u3002\u4e0d\u8981\u5c06\u4e0d\u76f8\u5173\u7684\u58f0\u660e\u653e\u5728\u4e00\u7ec4\u3002 Bad Good type Operation int const ( Add Operation = iota + 1 Subtract Multiply ENV_VAR = \"MY_ENV\" ) type Operation int const ( Add Operation = iota + 1 Subtract Multiply ) const ENV_VAR = \"MY_ENV\" \u5206\u7ec4\u4f7f\u7528\u7684\u4f4d\u7f6e\u6ca1\u6709\u9650\u5236\uff0c\u4f8b\u5982\uff1a\u4f60\u53ef\u4ee5\u5728\u51fd\u6570\u5185\u90e8\u4f7f\u7528\u5b83\u4eec\uff1a Bad Good func f () string { var red = color . New ( 0xff0000 ) var green = color . New ( 0x00ff00 ) var blue = color . New ( 0x0000ff ) ... } func f () string { var ( red = color . New ( 0xff0000 ) green = color . New ( 0x00ff00 ) blue = color . New ( 0x0000ff ) ) ... } import \u5206\u7ec4 \u5bfc\u5165\u5e94\u8be5\u5206\u4e3a\u4e24\u7ec4\uff1a \u6807\u51c6\u5e93 \u5176\u4ed6\u5e93 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8fd9\u662f goimports \u5e94\u7528\u7684\u5206\u7ec4\u3002 Bad Good import ( \"fmt\" \"os\" \"go.uber.org/atomic\" \"golang.org/x/sync/errgroup\" ) import ( \"fmt\" \"os\" \"go.uber.org/atomic\" \"golang.org/x/sync/errgroup\" ) \u5305\u540d \u5f53\u547d\u540d\u5305\u65f6\uff0c\u8bf7\u6309\u4e0b\u9762\u89c4\u5219\u9009\u62e9\u4e00\u4e2a\u540d\u79f0\uff1a \u5168\u90e8\u5c0f\u5199\u3002\u6ca1\u6709\u5927\u5199\u6216\u4e0b\u5212\u7ebf\u3002 \u5927\u591a\u6570\u4f7f\u7528\u547d\u540d\u5bfc\u5165\u7684\u60c5\u51b5\u4e0b\uff0c\u4e0d\u9700\u8981\u91cd\u547d\u540d\u3002 \u7b80\u77ed\u800c\u7b80\u6d01\u3002\u8bf7\u8bb0\u4f4f\uff0c\u5728\u6bcf\u4e2a\u4f7f\u7528\u7684\u5730\u65b9\u90fd\u5b8c\u6574\u6807\u8bc6\u4e86\u8be5\u540d\u79f0\u3002 \u4e0d\u7528\u590d\u6570\u3002\u4f8b\u5982 net/url \uff0c\u800c\u4e0d\u662f net/urls \u3002 \u4e0d\u8981\u7528\u201ccommon\u201d\uff0c\u201cutil\u201d\uff0c\u201cshared\u201d\u6216\u201clib\u201d\u3002\u8fd9\u4e9b\u662f\u4e0d\u597d\u7684\uff0c\u4fe1\u606f\u91cf\u4e0d\u8db3\u7684\u540d\u79f0\u3002 \u53e6\u8bf7\u53c2\u9605 Package Names \u548c Go \u5305\u6837\u5f0f\u6307\u5357 . \u51fd\u6570\u540d \u6211\u4eec\u9075\u5faa Go \u793e\u533a\u5173\u4e8e\u4f7f\u7528 MixedCaps \u4f5c\u4e3a\u51fd\u6570\u540d \u7684\u7ea6\u5b9a\u3002\u6709\u4e00\u4e2a\u4f8b\u5916\uff0c\u4e3a\u4e86\u5bf9\u76f8\u5173\u7684\u6d4b\u8bd5\u7528\u4f8b\u8fdb\u884c\u5206\u7ec4\uff0c\u51fd\u6570\u540d\u53ef\u80fd\u5305\u542b\u4e0b\u5212\u7ebf\uff0c\u5982\uff1a TestMyFunction_WhatIsBeingTested . \u5bfc\u5165\u522b\u540d \u5982\u679c\u7a0b\u5e8f\u5305\u540d\u79f0\u4e0e\u5bfc\u5165\u8def\u5f84\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4e0d\u5339\u914d\uff0c\u5219\u5fc5\u987b\u4f7f\u7528\u5bfc\u5165\u522b\u540d\u3002 import ( \"net/http\" client \"example.com/client-go\" trace \"example.com/trace/v2\" ) \u5728\u6240\u6709\u5176\u4ed6\u60c5\u51b5\u4e0b\uff0c\u9664\u975e\u5bfc\u5165\u4e4b\u95f4\u6709\u76f4\u63a5\u51b2\u7a81\uff0c\u5426\u5219\u5e94\u907f\u514d\u5bfc\u5165\u522b\u540d\u3002 Bad Good import ( \"fmt\" \"os\" nettrace \"golang.net/x/trace\" ) import ( \"fmt\" \"os\" \"runtime/trace\" nettrace \"golang.net/x/trace\" ) \u51fd\u6570\u5206\u7ec4\u4e0e\u987a\u5e8f \u51fd\u6570\u5e94\u6309\u7c97\u7565\u7684\u8c03\u7528\u987a\u5e8f\u6392\u5e8f\u3002 \u540c\u4e00\u6587\u4ef6\u4e2d\u7684\u51fd\u6570\u5e94\u6309\u63a5\u6536\u8005\u5206\u7ec4\u3002 \u56e0\u6b64\uff0c\u5bfc\u51fa\u7684\u51fd\u6570\u5e94\u5148\u51fa\u73b0\u5728\u6587\u4ef6\u4e2d\uff0c\u653e\u5728 struct , const , var \u5b9a\u4e49\u7684\u540e\u9762\u3002 \u5728\u5b9a\u4e49\u7c7b\u578b\u4e4b\u540e\uff0c\u4f46\u5728\u63a5\u6536\u8005\u7684\u5176\u4f59\u65b9\u6cd5\u4e4b\u524d\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u4e00\u4e2a newXYZ() / NewXYZ() \u7531\u4e8e\u51fd\u6570\u662f\u6309\u63a5\u6536\u8005\u5206\u7ec4\u7684\uff0c\u56e0\u6b64\u666e\u901a\u5de5\u5177\u51fd\u6570\u5e94\u5728\u6587\u4ef6\u672b\u5c3e\u51fa\u73b0\u3002 Bad Good func ( s * something ) Cost () { return calcCost ( s . weights ) } type something struct { ... } func calcCost ( n [] int ) int { ... } func ( s * something ) Stop () { ... } func newSomething () * something { return & something {} } type something struct { ... } func newSomething () * something { return & something {} } func ( s * something ) Cost () { return calcCost ( s . weights ) } func ( s * something ) Stop () { ... } func calcCost ( n [] int ) int { ... } \u51cf\u5c11\u5d4c\u5957 \u4ee3\u7801\u5e94\u901a\u8fc7\u5c3d\u53ef\u80fd\u5148\u5904\u7406\u9519\u8bef\u60c5\u51b5/\u7279\u6b8a\u60c5\u51b5\u5e76\u5c3d\u65e9\u8fd4\u56de\u6216\u7ee7\u7eed\u5faa\u73af\u6765\u51cf\u5c11\u5d4c\u5957\u3002\u51cf\u5c11\u5d4c\u5957\u591a\u4e2a\u7ea7\u522b\u7684\u4ee3\u7801\u7684\u4ee3\u7801\u91cf\u3002 Bad Good for _ , v := range data { if v . F1 == 1 { v = process ( v ) if err := v . Call (); err == nil { v . Send () } else { return err } } else { log . Printf ( \"Invalid v: %v\" , v ) } } for _ , v := range data { if v . F1 != 1 { log . Printf ( \"Invalid v: %v\" , v ) continue } v = process ( v ) if err := v . Call (); err != nil { return err } v . Send () } \u4e0d\u5fc5\u8981\u7684 else \u5982\u679c\u5728 if \u7684\u4e24\u4e2a\u5206\u652f\u4e2d\u90fd\u8bbe\u7f6e\u4e86\u53d8\u91cf\uff0c\u5219\u53ef\u4ee5\u5c06\u5176\u66ff\u6362\u4e3a\u5355\u4e2a if\u3002 Bad Good var a int if b { a = 100 } else { a = 10 } a := 10 if b { a = 100 } \u9876\u5c42\u53d8\u91cf\u58f0\u660e \u5728\u9876\u5c42\uff0c\u4f7f\u7528\u6807\u51c6 var \u5173\u952e\u5b57\u3002\u8bf7\u52ff\u6307\u5b9a\u7c7b\u578b\uff0c\u9664\u975e\u5b83\u4e0e\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\u4e0d\u540c\u3002 Bad Good var _s string = F () func F () string { return \"A\" } var _s = F () // \u7531\u4e8e F \u5df2\u7ecf\u660e\u786e\u4e86\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u56e0\u6b64\u6211\u4eec\u6ca1\u6709\u5fc5\u8981\u663e\u5f0f\u6307\u5b9a_s \u7684\u7c7b\u578b // \u8fd8\u662f\u90a3\u79cd\u7c7b\u578b func F () string { return \"A\" } \u5982\u679c\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\u4e0e\u6240\u9700\u7684\u7c7b\u578b\u4e0d\u5b8c\u5168\u5339\u914d\uff0c\u8bf7\u6307\u5b9a\u7c7b\u578b\u3002 type myError struct {} func ( myError ) Error () string { return \"error\" } func F () myError { return myError {} } var _e error = F () // F \u8fd4\u56de\u4e00\u4e2a myError \u7c7b\u578b\u7684\u5b9e\u4f8b\uff0c\u4f46\u662f\u6211\u4eec\u8981 error \u7c7b\u578b \u5bf9\u4e8e\u672a\u5bfc\u51fa\u7684\u9876\u5c42\u5e38\u91cf\u548c\u53d8\u91cf\uff0c\u4f7f\u7528_\u4f5c\u4e3a\u524d\u7f00 \u5728\u672a\u5bfc\u51fa\u7684\u9876\u7ea7 vars \u548c consts \uff0c \u524d\u9762\u52a0\u4e0a\u524d\u7f00_\uff0c\u4ee5\u4f7f\u5b83\u4eec\u5728\u4f7f\u7528\u65f6\u660e\u786e\u8868\u793a\u5b83\u4eec\u662f\u5168\u5c40\u7b26\u53f7\u3002 \u4f8b\u5916\uff1a\u672a\u5bfc\u51fa\u7684\u9519\u8bef\u503c\uff0c\u5e94\u4ee5 err \u5f00\u5934\u3002 \u57fa\u672c\u4f9d\u636e\uff1a\u9876\u7ea7\u53d8\u91cf\u548c\u5e38\u91cf\u5177\u6709\u5305\u8303\u56f4\u4f5c\u7528\u57df\u3002\u4f7f\u7528\u901a\u7528\u540d\u79f0\u53ef\u80fd\u5f88\u5bb9\u6613\u5728\u5176\u4ed6\u6587\u4ef6\u4e2d\u610f\u5916\u4f7f\u7528\u9519\u8bef\u7684\u503c\u3002 Bad Good // foo.go const ( defaultPort = 8080 defaultUser = \"user\" ) // bar.go func Bar () { defaultPort := 9090 ... fmt . Println ( \"Default port\" , defaultPort ) // We will not see a compile error if the first line of // Bar() is deleted. } // foo.go const ( _defaultPort = 8080 _defaultUser = \"user\" ) \u7ed3\u6784\u4f53\u4e2d\u7684\u5d4c\u5165 \u5d4c\u5165\u5f0f\u7c7b\u578b\uff08\u4f8b\u5982 mutex\uff09\u5e94\u4f4d\u4e8e\u7ed3\u6784\u4f53\u5185\u7684\u5b57\u6bb5\u5217\u8868\u7684\u9876\u90e8\uff0c\u5e76\u4e14\u5fc5\u987b\u6709\u4e00\u4e2a\u7a7a\u884c\u5c06\u5d4c\u5165\u5f0f\u5b57\u6bb5\u4e0e\u5e38\u89c4\u5b57\u6bb5\u5206\u9694\u5f00\u3002 Bad Good type Client struct { version int http . Client } type Client struct { http . Client version int } \u5185\u5d4c\u5e94\u8be5\u63d0\u4f9b\u5207\u5b9e\u7684\u597d\u5904\uff0c\u6bd4\u5982\u4ee5\u8bed\u4e49\u4e0a\u5408\u9002\u7684\u65b9\u5f0f\u6dfb\u52a0\u6216\u589e\u5f3a\u529f\u80fd\u3002 \u5b83\u5e94\u8be5\u5728\u5bf9\u7528\u6237\u4e0d\u5229\u5f71\u54cd\u7684\u60c5\u51b5\u4e0b\u5b8c\u6210\u8fd9\u9879\u5de5\u4f5c\uff08\u53e6\u8bf7\u53c2\u89c1\uff1a \u907f\u514d\u5728\u516c\u5171\u7ed3\u6784\u4e2d\u5d4c\u5165\u7c7b\u578b Avoid Embedding Types in Public Structs \uff09\u3002 \u5d4c\u5165 \u4e0d\u5e94\u8be5 : \u7eaf\u7cb9\u662f\u4e3a\u4e86\u7f8e\u89c2\u6216\u65b9\u4fbf\u3002 \u4f7f\u5916\u90e8\u7c7b\u578b\u66f4\u96be\u6784\u9020\u6216\u4f7f\u7528\u3002 \u5f71\u54cd\u5916\u90e8\u7c7b\u578b\u7684\u96f6\u503c\u3002\u5982\u679c\u5916\u90e8\u7c7b\u578b\u6709\u4e00\u4e2a\u6709\u7528\u7684\u96f6\u503c\uff0c\u5219\u5728\u5d4c\u5165\u5185\u90e8\u7c7b\u578b\u4e4b\u540e\u5e94\u8be5\u4ecd\u7136\u6709\u4e00\u4e2a\u6709\u7528\u7684\u96f6\u503c\u3002 \u4f5c\u4e3a\u5d4c\u5165\u5185\u90e8\u7c7b\u578b\u7684\u526f\u4f5c\u7528\uff0c\u4ece\u5916\u90e8\u7c7b\u578b\u516c\u5f00\u4e0d\u76f8\u5173\u7684\u51fd\u6570\u6216\u5b57\u6bb5\u3002 \u516c\u5f00\u672a\u5bfc\u51fa\u7684\u7c7b\u578b\u3002 \u5f71\u54cd\u5916\u90e8\u7c7b\u578b\u7684\u590d\u5236\u5f62\u5f0f\u3002 \u66f4\u6539\u5916\u90e8\u7c7b\u578b\u7684API\u6216\u7c7b\u578b\u8bed\u4e49\u3002 \u5d4c\u5165\u5185\u90e8\u7c7b\u578b\u7684\u975e\u89c4\u8303\u5f62\u5f0f\u3002 \u516c\u5f00\u5916\u90e8\u7c7b\u578b\u7684\u5b9e\u73b0\u8be6\u7ec6\u4fe1\u606f\u3002 \u5141\u8bb8\u7528\u6237\u89c2\u5bdf\u6216\u63a7\u5236\u7c7b\u578b\u5185\u90e8\u3002 \u901a\u8fc7\u5305\u88c5\u7684\u65b9\u5f0f\u6539\u53d8\u5185\u90e8\u51fd\u6570\u7684\u4e00\u822c\u884c\u4e3a\uff0c\u8fd9\u79cd\u5305\u88c5\u65b9\u5f0f\u4f1a\u7ed9\u7528\u6237\u5e26\u6765\u4e00\u4e9b\u610f\u6599\u4e4b\u5916\u60c5\u51b5\u3002 \u7b80\u5355\u5730\u8bf4\uff0c\u6709\u610f\u8bc6\u5730\u548c\u6709\u76ee\u7684\u5730\u5d4c\u5165\u3002\u4e00\u79cd\u5f88\u597d\u7684\u6d4b\u8bd5\u4f53\u9a8c\u662f\uff0c \u201c\u662f\u5426\u6240\u6709\u8fd9\u4e9b\u5bfc\u51fa\u7684\u5185\u90e8\u65b9\u6cd5/\u5b57\u6bb5\u90fd\u5c06\u76f4\u63a5\u6dfb\u52a0\u5230\u5916\u90e8\u7c7b\u578b\u201d \u5982\u679c\u7b54\u6848\u662f some \u6216 no \uff0c\u4e0d\u8981\u5d4c\u5165\u5185\u90e8\u7c7b\u578b-\u800c\u662f\u4f7f\u7528\u5b57\u6bb5\u3002 Bad Good type A struct { // Bad: A.Lock() and A.Unlock() \u73b0\u5728\u53ef\u7528 // \u4e0d\u63d0\u4f9b\u4efb\u4f55\u529f\u80fd\u6027\u597d\u5904\uff0c\u5e76\u5141\u8bb8\u7528\u6237\u63a7\u5236\u6709\u5173A\u7684\u5185\u90e8\u7ec6\u8282\u3002 sync . Mutex } type countingWriteCloser struct { // Good: Write() \u5728\u5916\u5c42\u63d0\u4f9b\u7528\u4e8e\u7279\u5b9a\u76ee\u7684\uff0c // \u5e76\u4e14\u59d4\u6258\u5de5\u4f5c\u5230\u5185\u90e8\u7c7b\u578b\u7684Write()\u4e2d\u3002 io . WriteCloser count int } func ( w * countingWriteCloser ) Write ( bs [] byte ) ( int , error ) { w . count += len ( bs ) return w . WriteCloser . Write ( bs ) } type Book struct { // Bad: \u6307\u9488\u66f4\u6539\u96f6\u503c\u7684\u6709\u7528\u6027 io . ReadWriter // other fields } // later var b Book b . Read ( ... ) // panic: nil pointer b . String () // panic: nil pointer b . Write ( ... ) // panic: nil pointer type Book struct { // Good: \u6709\u7528\u7684\u96f6\u503c bytes . Buffer // other fields } // later var b Book b . Read ( ... ) // ok b . String () // ok b . Write ( ... ) // ok type Client struct { sync . Mutex sync . WaitGroup bytes . Buffer url . URL } type Client struct { mtx sync . Mutex wg sync . WaitGroup buf bytes . Buffer url url . URL } \u4f7f\u7528\u5b57\u6bb5\u540d\u521d\u59cb\u5316\u7ed3\u6784\u4f53 \u521d\u59cb\u5316\u7ed3\u6784\u4f53\u65f6\uff0c\u5e94\u8be5\u6307\u5b9a\u5b57\u6bb5\u540d\u79f0\u3002\u73b0\u5728\u7531 [ go vet ] \u5f3a\u5236\u6267\u884c\u3002 Bad Good k := User { \"John\" , \"Doe\" , true } k := User { FirstName : \"John\" , LastName : \"Doe\" , Admin : true , } \u4f8b\u5916\uff1a\u5982\u679c\u6709 3 \u4e2a\u6216\u66f4\u5c11\u7684\u5b57\u6bb5\uff0c\u5219\u53ef\u4ee5\u5728\u6d4b\u8bd5\u8868\u4e2d\u7701\u7565\u5b57\u6bb5\u540d\u79f0\u3002 tests := [] struct { op Operation want string }{ { Add , \"add\" }, { Subtract , \"subtract\" }, } \u672c\u5730\u53d8\u91cf\u58f0\u660e \u5982\u679c\u5c06\u53d8\u91cf\u660e\u786e\u8bbe\u7f6e\u4e3a\u67d0\u4e2a\u503c\uff0c\u5219\u5e94\u4f7f\u7528\u77ed\u53d8\u91cf\u58f0\u660e\u5f62\u5f0f ( := )\u3002 Bad Good var s = \"foo\" s := \"foo\" \u4f46\u662f\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c var \u4f7f\u7528\u5173\u952e\u5b57\u65f6\u9ed8\u8ba4\u503c\u4f1a\u66f4\u6e05\u6670\u3002\u4f8b\u5982\uff0c\u58f0\u660e\u7a7a\u5207\u7247\u3002 Bad Good func f ( list [] int ) { filtered := [] int {} for _ , v := range list { if v > 10 { filtered = append ( filtered , v ) } } } func f ( list [] int ) { var filtered [] int for _ , v := range list { if v > 10 { filtered = append ( filtered , v ) } } } nil \u662f\u4e00\u4e2a\u6709\u6548\u7684 slice nil \u662f\u4e00\u4e2a\u6709\u6548\u7684\u957f\u5ea6\u4e3a 0 \u7684 slice\uff0c\u8fd9\u610f\u5473\u7740\uff0c \u60a8\u4e0d\u5e94\u660e\u786e\u8fd4\u56de\u957f\u5ea6\u4e3a\u96f6\u7684\u5207\u7247\u3002\u5e94\u8be5\u8fd4\u56de nil \u6765\u4ee3\u66ff\u3002 Bad Good if x == \"\" { return [] int {} } if x == \"\" { return nil } \u8981\u68c0\u67e5\u5207\u7247\u662f\u5426\u4e3a\u7a7a\uff0c\u8bf7\u59cb\u7ec8\u4f7f\u7528 len(s) == 0 \u3002\u800c\u975e nil \u3002 Bad Good func isEmpty ( s [] string ) bool { return s == nil } func isEmpty ( s [] string ) bool { return len ( s ) == 0 } \u96f6\u503c\u5207\u7247\uff08\u7528 var \u58f0\u660e\u7684\u5207\u7247\uff09\u53ef\u7acb\u5373\u4f7f\u7528\uff0c\u65e0\u9700\u8c03\u7528 make() \u521b\u5efa\u3002 Bad Good nums := [] int {} // or, nums := make([]int) if add1 { nums = append ( nums , 1 ) } if add2 { nums = append ( nums , 2 ) } var nums [] int if add1 { nums = append ( nums , 1 ) } if add2 { nums = append ( nums , 2 ) } \u8bb0\u4f4f\uff0c\u867d\u7136nil\u5207\u7247\u662f\u6709\u6548\u7684\u5207\u7247\uff0c\u4f46\u5b83\u4e0d\u7b49\u4e8e\u957f\u5ea6\u4e3a0\u7684\u5207\u7247\uff08\u4e00\u4e2a\u4e3anil\uff0c\u53e6\u4e00\u4e2a\u4e0d\u662f\uff09\uff0c\u5e76\u4e14\u5728\u4e0d\u540c\u7684\u60c5\u51b5\u4e0b\uff08\u4f8b\u5982\u5e8f\u5217\u5316\uff09\uff0c\u8fd9\u4e24\u4e2a\u5207\u7247\u7684\u5904\u7406\u65b9\u5f0f\u53ef\u80fd\u4e0d\u540c\u3002 \u7f29\u5c0f\u53d8\u91cf\u4f5c\u7528\u57df \u5982\u679c\u6709\u53ef\u80fd\uff0c\u5c3d\u91cf\u7f29\u5c0f\u53d8\u91cf\u4f5c\u7528\u8303\u56f4\u3002\u9664\u975e\u5b83\u4e0e \u51cf\u5c11\u5d4c\u5957 \u7684\u89c4\u5219\u51b2\u7a81\u3002 Bad Good err := ioutil . WriteFile ( name , data , 0644 ) if err != nil { return err } if err := ioutil . WriteFile ( name , data , 0644 ); err != nil { return err } \u5982\u679c\u9700\u8981\u5728 if \u4e4b\u5916\u4f7f\u7528\u51fd\u6570\u8c03\u7528\u7684\u7ed3\u679c\uff0c\u5219\u4e0d\u5e94\u5c1d\u8bd5\u7f29\u5c0f\u8303\u56f4\u3002 Bad Good if data , err := ioutil . ReadFile ( name ); err == nil { err = cfg . Decode ( data ) if err != nil { return err } fmt . Println ( cfg ) return nil } else { return err } data , err := ioutil . ReadFile ( name ) if err != nil { return err } if err := cfg . Decode ( data ); err != nil { return err } fmt . Println ( cfg ) return nil \u907f\u514d\u53c2\u6570\u8bed\u4e49\u4e0d\u660e\u786e(Avoid Naked Parameters) \u51fd\u6570\u8c03\u7528\u4e2d\u7684 \u610f\u4e49\u4e0d\u660e\u786e\u7684\u53c2\u6570 \u53ef\u80fd\u4f1a\u635f\u5bb3\u53ef\u8bfb\u6027\u3002\u5f53\u53c2\u6570\u540d\u79f0\u7684\u542b\u4e49\u4e0d\u660e\u663e\u65f6\uff0c\u8bf7\u4e3a\u53c2\u6570\u6dfb\u52a0 C \u6837\u5f0f\u6ce8\u91ca ( /* ... */ ) Bad Good // func printInfo(name string, isLocal, done bool) printInfo ( \"foo\" , true , true ) // func printInfo(name string, isLocal, done bool) printInfo ( \"foo\" , true /* isLocal */ , true /* done */ ) \u5bf9\u4e8e\u4e0a\u9762\u7684\u793a\u4f8b\u4ee3\u7801\uff0c\u8fd8\u6709\u4e00\u79cd\u66f4\u597d\u7684\u5904\u7406\u65b9\u5f0f\u662f\u5c06\u4e0a\u9762\u7684 bool \u7c7b\u578b\u6362\u6210\u81ea\u5b9a\u4e49\u7c7b\u578b\u3002\u5c06\u6765\uff0c\u8be5\u53c2\u6570\u53ef\u4ee5\u652f\u6301\u4e0d\u4ec5\u4ec5\u5c40\u9650\u4e8e\u4e24\u4e2a\u72b6\u6001\uff08true/false\uff09\u3002 type Region int const ( UnknownRegion Region = iota Local ) type Status int const ( StatusReady Status = iota + 1 StatusDone // Maybe we will have a StatusInProgress in the future. ) func printInfo ( name string , region Region , status Status ) \u4f7f\u7528\u539f\u59cb\u5b57\u7b26\u4e32\u5b57\u9762\u503c\uff0c\u907f\u514d\u8f6c\u4e49 Go \u652f\u6301\u4f7f\u7528 \u539f\u59cb\u5b57\u7b26\u4e32\u5b57\u9762\u503c \uff0c\u4e5f\u5c31\u662f \u201d ` \u201d \u6765\u8868\u793a\u539f\u751f\u5b57\u7b26\u4e32\uff0c\u5728\u9700\u8981\u8f6c\u4e49\u7684\u573a\u666f\u4e0b\uff0c\u6211\u4eec\u5e94\u8be5\u5c3d\u91cf\u4f7f\u7528\u8fd9\u79cd\u65b9\u6848\u6765\u66ff\u6362\u3002 \u53ef\u4ee5\u8de8\u8d8a\u591a\u884c\u5e76\u5305\u542b\u5f15\u53f7\u3002\u4f7f\u7528\u8fd9\u4e9b\u5b57\u7b26\u4e32\u53ef\u4ee5\u907f\u514d\u66f4\u96be\u9605\u8bfb\u7684\u624b\u5de5\u8f6c\u4e49\u7684\u5b57\u7b26\u4e32\u3002 Bad Good wantError := \"unknown name:\\\"test\\\"\" wantError := `unknown error:\"test\"` \u521d\u59cb\u5316 Struct \u5f15\u7528 \u5728\u521d\u59cb\u5316\u7ed3\u6784\u5f15\u7528\u65f6\uff0c\u8bf7\u4f7f\u7528 &T{} \u4ee3\u66ff new(T) \uff0c\u4ee5\u4f7f\u5176\u4e0e\u7ed3\u6784\u4f53\u521d\u59cb\u5316\u4e00\u81f4\u3002 Bad Good sval := T { Name : \"foo\" } // inconsistent sptr := new ( T ) sptr . Name = \"bar\" sval := T { Name : \"foo\" } sptr := & T { Name : \"bar\" } \u521d\u59cb\u5316 Maps \u5bf9\u4e8e\u7a7a map \u8bf7\u4f7f\u7528 make(..) \u521d\u59cb\u5316\uff0c \u5e76\u4e14 map \u662f\u901a\u8fc7\u7f16\u7a0b\u65b9\u5f0f\u586b\u5145\u7684\u3002 \u8fd9\u4f7f\u5f97 map \u521d\u59cb\u5316\u5728\u8868\u73b0\u4e0a\u4e0d\u540c\u4e8e\u58f0\u660e\uff0c\u5e76\u4e14\u5b83\u8fd8\u53ef\u4ee5\u65b9\u4fbf\u5730\u5728 make \u540e\u6dfb\u52a0\u5927\u5c0f\u63d0\u793a\u3002 Bad Good var ( // m1 \u8bfb\u5199\u5b89\u5168; // m2 \u5728\u5199\u5165\u65f6\u4f1a panic m1 = map [ T1 ] T2 {} m2 map [ T1 ] T2 ) var ( // m1 \u8bfb\u5199\u5b89\u5168; // m2 \u5728\u5199\u5165\u65f6\u4f1a panic m1 = make ( map [ T1 ] T2 ) m2 map [ T1 ] T2 ) \u58f0\u660e\u548c\u521d\u59cb\u5316\u770b\u8d77\u6765\u975e\u5e38\u76f8\u4f3c\u7684\u3002 \u58f0\u660e\u548c\u521d\u59cb\u5316\u770b\u8d77\u6765\u5dee\u522b\u975e\u5e38\u5927\u3002 \u5728\u5c3d\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\uff0c\u8bf7\u5728\u521d\u59cb\u5316\u65f6\u63d0\u4f9b map \u5bb9\u91cf\u5927\u5c0f\uff0c\u8be6\u7ec6\u8bf7\u770b \u6307\u5b9aMap\u5bb9\u91cf\u63d0\u793a \u3002 \u53e6\u5916\uff0c\u5982\u679c map \u5305\u542b\u56fa\u5b9a\u7684\u5143\u7d20\u5217\u8868\uff0c\u5219\u4f7f\u7528 map literals(map \u521d\u59cb\u5316\u5217\u8868) \u521d\u59cb\u5316\u6620\u5c04\u3002 Bad Good m := make ( map [ T1 ] T2 , 3 ) m [ k1 ] = v1 m [ k2 ] = v2 m [ k3 ] = v3 m := map [ T1 ] T2 { k1 : v1 , k2 : v2 , k3 : v3 , } \u57fa\u672c\u51c6\u5219\u662f\uff1a\u5728\u521d\u59cb\u5316\u65f6\u4f7f\u7528 map \u521d\u59cb\u5316\u5217\u8868 \u6765\u6dfb\u52a0\u4e00\u7ec4\u56fa\u5b9a\u7684\u5143\u7d20\u3002\u5426\u5219\u4f7f\u7528 make (\u5982\u679c\u53ef\u4ee5\uff0c\u8bf7\u5c3d\u91cf\u6307\u5b9a map \u5bb9\u91cf)\u3002 \u5b57\u7b26\u4e32 string format \u5982\u679c\u4f60\u5728\u51fd\u6570\u5916\u58f0\u660e Printf -style \u51fd\u6570\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\uff0c\u8bf7\u5c06\u5176\u8bbe\u7f6e\u4e3a const \u5e38\u91cf\u3002 \u8fd9\u6709\u52a9\u4e8e go vet \u5bf9\u683c\u5f0f\u5b57\u7b26\u4e32\u6267\u884c\u9759\u6001\u5206\u6790\u3002 Bad Good msg := \"unexpected values %v, %v\\n\" fmt . Printf ( msg , 1 , 2 ) const msg = \"unexpected values %v, %v\\n\" fmt . Printf ( msg , 1 , 2 ) \u547d\u540d Printf \u6837\u5f0f\u7684\u51fd\u6570 \u58f0\u660e Printf -style \u51fd\u6570\u65f6\uff0c\u8bf7\u786e\u4fdd go vet \u53ef\u4ee5\u68c0\u6d4b\u5230\u5b83\u5e76\u68c0\u67e5\u683c\u5f0f\u5b57\u7b26\u4e32\u3002 \u8fd9\u610f\u5473\u7740\u60a8\u5e94\u5c3d\u53ef\u80fd\u4f7f\u7528\u9884\u5b9a\u4e49\u7684 Printf -style \u51fd\u6570\u540d\u79f0\u3002 go vet \u5c06\u9ed8\u8ba4\u68c0\u67e5\u8fd9\u4e9b\u3002\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 Printf \u7cfb\u5217 \u3002 \u5982\u679c\u4e0d\u80fd\u4f7f\u7528\u9884\u5b9a\u4e49\u7684\u540d\u79f0\uff0c\u8bf7\u4ee5 f \u7ed3\u675f\u9009\u62e9\u7684\u540d\u79f0\uff1a Wrapf \uff0c\u800c\u4e0d\u662f Wrap \u3002 go vet \u53ef\u4ee5\u8981\u6c42\u68c0\u67e5\u7279\u5b9a\u7684 Printf \u6837\u5f0f\u540d\u79f0\uff0c\u4f46\u540d\u79f0\u5fc5\u987b\u4ee5 f \u7ed3\u5c3e\u3002 $ go vet -printfuncs = wrapf,statusf \u53e6\u8bf7\u53c2\u9605 go vet: Printf family check . \u7f16\u7a0b\u6a21\u5f0f \u8868\u9a71\u52a8\u6d4b\u8bd5 \u5f53\u6d4b\u8bd5\u903b\u8f91\u662f\u91cd\u590d\u7684\u65f6\u5019\uff0c\u901a\u8fc7 subtests \u4f7f\u7528 table \u9a71\u52a8\u7684\u65b9\u5f0f\u7f16\u5199 case \u4ee3\u7801\u770b\u4e0a\u53bb\u4f1a\u66f4\u7b80\u6d01\u3002 Bad Good // func TestSplitHostPort(t *testing.T) host , port , err := net . SplitHostPort ( \"192.0.2.0:8000\" ) require . NoError ( t , err ) assert . Equal ( t , \"192.0.2.0\" , host ) assert . Equal ( t , \"8000\" , port ) host , port , err = net . SplitHostPort ( \"192.0.2.0:http\" ) require . NoError ( t , err ) assert . Equal ( t , \"192.0.2.0\" , host ) assert . Equal ( t , \"http\" , port ) host , port , err = net . SplitHostPort ( \":8000\" ) require . NoError ( t , err ) assert . Equal ( t , \"\" , host ) assert . Equal ( t , \"8000\" , port ) host , port , err = net . SplitHostPort ( \"1:8\" ) require . NoError ( t , err ) assert . Equal ( t , \"1\" , host ) assert . Equal ( t , \"8\" , port ) // func TestSplitHostPort(t *testing.T) tests := [] struct { give string wantHost string wantPort string }{ { give : \"192.0.2.0:8000\" , wantHost : \"192.0.2.0\" , wantPort : \"8000\" , }, { give : \"192.0.2.0:http\" , wantHost : \"192.0.2.0\" , wantPort : \"http\" , }, { give : \":8000\" , wantHost : \"\" , wantPort : \"8000\" , }, { give : \"1:8\" , wantHost : \"1\" , wantPort : \"8\" , }, } for _ , tt := range tests { t . Run ( tt . give , func ( t * testing . T ) { host , port , err := net . SplitHostPort ( tt . give ) require . NoError ( t , err ) assert . Equal ( t , tt . wantHost , host ) assert . Equal ( t , tt . wantPort , port ) }) } \u5f88\u660e\u663e\uff0c\u4f7f\u7528 test table \u7684\u65b9\u5f0f\u5728\u4ee3\u7801\u903b\u8f91\u6269\u5c55\u7684\u65f6\u5019\uff0c\u6bd4\u5982\u65b0\u589e test case\uff0c\u90fd\u4f1a\u663e\u5f97\u66f4\u52a0\u7684\u6e05\u6670\u3002 \u6211\u4eec\u9075\u5faa\u8fd9\u6837\u7684\u7ea6\u5b9a\uff1a\u5c06\u7ed3\u6784\u4f53\u5207\u7247\u79f0\u4e3a tests \u3002 \u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u79f0\u4e3a tt \u3002\u6b64\u5916\uff0c\u6211\u4eec\u9f13\u52b1\u4f7f\u7528 give \u548c want \u524d\u7f00\u8bf4\u660e\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u7684\u8f93\u5165\u548c\u8f93\u51fa\u503c\u3002 tests := [] struct { give string wantHost string wantPort string }{ // ... } for _ , tt := range tests { // ... } \u529f\u80fd\u9009\u9879 \u529f\u80fd\u9009\u9879\u662f\u4e00\u79cd\u6a21\u5f0f\uff0c\u60a8\u53ef\u4ee5\u5728\u5176\u4e2d\u58f0\u660e\u4e00\u4e2a\u4e0d\u900f\u660e Option \u7c7b\u578b\uff0c\u8be5\u7c7b\u578b\u5728\u67d0\u4e9b\u5185\u90e8\u7ed3\u6784\u4e2d\u8bb0\u5f55\u4fe1\u606f\u3002\u60a8\u63a5\u53d7\u8fd9\u4e9b\u9009\u9879\u7684\u53ef\u53d8\u7f16\u53f7\uff0c\u5e76\u6839\u636e\u5185\u90e8\u7ed3\u6784\u4e0a\u7684\u9009\u9879\u8bb0\u5f55\u7684\u5168\u90e8\u4fe1\u606f\u91c7\u53d6\u884c\u52a8\u3002 \u5c06\u6b64\u6a21\u5f0f\u7528\u4e8e\u60a8\u9700\u8981\u6269\u5c55\u7684\u6784\u9020\u51fd\u6570\u548c\u5176\u4ed6\u516c\u5171 API \u4e2d\u7684\u53ef\u9009\u53c2\u6570\uff0c\u5c24\u5176\u662f\u5728\u8fd9\u4e9b\u529f\u80fd\u4e0a\u5df2\u7ecf\u5177\u6709\u4e09\u4e2a\u6216\u66f4\u591a\u53c2\u6570\u7684\u60c5\u51b5\u4e0b\u3002 Bad Good // package db func Open ( addr string , cache bool , logger * zap . Logger ) ( * Connection , error ) { // ... } // package db type Option interface { // ... } func WithCache ( c bool ) Option { // ... } func WithLogger ( log * zap . Logger ) Option { // ... } // Open creates a connection. func Open ( addr string , opts ... Option , ) ( * Connection , error ) { // ... } \u5fc5\u987b\u59cb\u7ec8\u63d0\u4f9b\u7f13\u5b58\u548c\u8bb0\u5f55\u5668\u53c2\u6570\uff0c\u5373\u4f7f\u7528\u6237\u5e0c\u671b\u4f7f\u7528\u9ed8\u8ba4\u503c\u3002 db . Open ( addr , db . DefaultCache , zap . NewNop ()) db . Open ( addr , db . DefaultCache , log ) db . Open ( addr , false /* cache */ , zap . NewNop ()) db . Open ( addr , false /* cache */ , log ) \u53ea\u6709\u5728\u9700\u8981\u65f6\u624d\u63d0\u4f9b\u9009\u9879\u3002 db . Open ( addr ) db . Open ( addr , db . WithLogger ( log )) db . Open ( addr , db . WithCache ( false )) db . Open ( addr , db . WithCache ( false ), db . WithLogger ( log ), ) Our suggested way of implementing this pattern is with an Option interface that holds an unexported method, recording options on an unexported options struct. \u6211\u4eec\u5efa\u8bae\u5b9e\u73b0\u6b64\u6a21\u5f0f\u7684\u65b9\u6cd5\u662f\u4f7f\u7528\u4e00\u4e2a Option \u63a5\u53e3\uff0c\u8be5\u63a5\u53e3\u4fdd\u5b58\u4e00\u4e2a\u672a\u5bfc\u51fa\u7684\u65b9\u6cd5\uff0c\u5728\u4e00\u4e2a\u672a\u5bfc\u51fa\u7684 options \u7ed3\u6784\u4e0a\u8bb0\u5f55\u9009\u9879\u3002 type options struct { cache bool logger * zap . Logger } type Option interface { apply ( * options ) } type cacheOption bool func ( c cacheOption ) apply ( opts * options ) { opts . cache = bool ( c ) } func WithCache ( c bool ) Option { return cacheOption ( c ) } type loggerOption struct { Log * zap . Logger } func ( l loggerOption ) apply ( opts * options ) { opts . logger = l . Log } func WithLogger ( log * zap . Logger ) Option { return loggerOption { Log : log } } // Open creates a connection. func Open ( addr string , opts ... Option , ) ( * Connection , error ) { options := options { cache : defaultCache , logger : zap . NewNop (), } for _ , o := range opts { o . apply ( & options ) } // ... } \u6ce8\u610f: \u8fd8\u6709\u4e00\u79cd\u4f7f\u7528\u95ed\u5305\u5b9e\u73b0\u8fd9\u4e2a\u6a21\u5f0f\u7684\u65b9\u6cd5\uff0c\u4f46\u662f\u6211\u4eec\u76f8\u4fe1\u4e0a\u9762\u7684\u6a21\u5f0f\u4e3a\u4f5c\u8005\u63d0\u4f9b\u4e86\u66f4\u591a\u7684\u7075\u6d3b\u6027\uff0c\u5e76\u4e14\u66f4\u5bb9\u6613\u5bf9\u7528\u6237\u8fdb\u884c\u8c03\u8bd5\u548c\u6d4b\u8bd5\u3002\u7279\u522b\u662f\uff0c\u5728\u4e0d\u53ef\u80fd\u8fdb\u884c\u6bd4\u8f83\u7684\u60c5\u51b5\u4e0b\u5b83\u5141\u8bb8\u5728\u6d4b\u8bd5\u548c\u6a21\u62df\u4e2d\u5bf9\u9009\u9879\u8fdb\u884c\u6bd4\u8f83\u3002\u6b64\u5916\uff0c\u5b83\u8fd8\u5141\u8bb8\u9009\u9879\u5b9e\u73b0\u5176\u4ed6\u63a5\u53e3\uff0c\u5305\u62ec fmt.Stringer \uff0c\u5141\u8bb8\u7528\u6237\u8bfb\u53d6\u9009\u9879\u7684\u5b57\u7b26\u4e32\u8868\u793a\u5f62\u5f0f\u3002 \u8fd8\u53ef\u4ee5\u53c2\u8003\u4e0b\u9762\u8d44\u6599\uff1a Self-referential functions and the design of options Functional options for friendly APIs Linting \u6bd4\u4efb\u4f55 \u201cblessed\u201d linter \u96c6\u66f4\u91cd\u8981\u7684\u662f\uff0clint\u5728\u4e00\u4e2a\u4ee3\u7801\u5e93\u4e2d\u59cb\u7ec8\u4fdd\u6301\u4e00\u81f4\u3002 \u6211\u4eec\u5efa\u8bae\u81f3\u5c11\u4f7f\u7528\u4ee5\u4e0blinters\uff0c\u56e0\u4e3a\u6211\u8ba4\u4e3a\u5b83\u4eec\u6709\u52a9\u4e8e\u53d1\u73b0\u6700\u5e38\u89c1\u7684\u95ee\u9898\uff0c\u5e76\u5728\u4e0d\u9700\u8981\u89c4\u5b9a\u7684\u60c5\u51b5\u4e0b\u4e3a\u4ee3\u7801\u8d28\u91cf\u5efa\u7acb\u4e00\u4e2a\u9ad8\u6807\u51c6\uff1a errcheck \u4ee5\u786e\u4fdd\u9519\u8bef\u5f97\u5230\u5904\u7406 goimports \u683c\u5f0f\u5316\u4ee3\u7801\u548c\u7ba1\u7406 imports golint \u6307\u51fa\u5e38\u89c1\u7684\u6587\u4f53\u9519\u8bef govet \u5206\u6790\u4ee3\u7801\u4e2d\u7684\u5e38\u89c1\u9519\u8bef staticcheck \u5404\u79cd\u9759\u6001\u5206\u6790\u68c0\u67e5 Lint Runners \u6211\u4eec\u63a8\u8350 golangci-lint \u4f5c\u4e3ago-to lint\u7684\u8fd0\u884c\u7a0b\u5e8f\uff0c\u8fd9\u4e3b\u8981\u662f\u56e0\u4e3a\u5b83\u5728\u8f83\u5927\u7684\u4ee3\u7801\u5e93\u4e2d\u7684\u6027\u80fd\u4ee5\u53ca\u80fd\u591f\u540c\u65f6\u914d\u7f6e\u548c\u4f7f\u7528\u8bb8\u591a\u89c4\u8303\u3002\u8fd9\u4e2arepo\u6709\u4e00\u4e2a\u793a\u4f8b\u914d\u7f6e\u6587\u4ef6 .golangci.yml \u548c\u63a8\u8350\u7684linter\u8bbe\u7f6e\u3002 golangci-lint \u6709 various-linters \u53ef\u4f9b\u4f7f\u7528\u3002\u5efa\u8bae\u5c06\u4e0a\u8ff0linters\u4f5c\u4e3a\u57fa\u672cset\uff0c\u6211\u4eec\u9f13\u52b1\u56e2\u961f\u6dfb\u52a0\u5bf9\u4ed6\u4eec\u7684\u9879\u76ee\u6709\u610f\u4e49\u7684\u4efb\u4f55\u9644\u52a0linters\u3002 Stargazers over time","title":"1 \u5f00\u53d1\u89c4\u8303"},{"location":"specification/dev-specification/#dev-specification","text":"\u5f00\u53d1\u89c4\u8303","title":"dev-specification"},{"location":"specification/dev-specification/#_1","text":"\u6837\u5f0f (style) \u662f\u652f\u914d\u6211\u4eec\u4ee3\u7801\u7684\u60ef\u4f8b\u3002\u672f\u8bed \u6837\u5f0f \u6709\u70b9\u7528\u8bcd\u4e0d\u5f53\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u7ea6\u5b9a\u6db5\u76d6\u7684\u8303\u56f4\u4e0d\u9650\u4e8e\u7531 gofmt \u66ff\u6211\u4eec\u5904\u7406\u7684\u6e90\u6587\u4ef6\u683c\u5f0f\u3002 \u672c\u6307\u5357\u7684\u76ee\u7684\u662f\u901a\u8fc7\u8be6\u7ec6\u63cf\u8ff0\u5728 Uber \u7f16\u5199 Go \u4ee3\u7801\u7684\u6ce8\u610f\u4e8b\u9879\u6765\u7ba1\u7406\u8fd9\u79cd\u590d\u6742\u6027\u3002\u8fd9\u4e9b\u89c4\u5219\u7684\u5b58\u5728\u662f\u4e3a\u4e86\u4f7f\u4ee3\u7801\u5e93\u6613\u4e8e\u7ba1\u7406\uff0c\u540c\u65f6\u4ecd\u7136\u5141\u8bb8\u5de5\u7a0b\u5e08\u66f4\u6709\u6548\u5730\u4f7f\u7528 Go \u8bed\u8a00\u529f\u80fd\u3002 \u8be5\u6307\u5357\u6700\u521d\u7531 Prashant Varanasi \u548c Simon Newton \u7f16\u5199\uff0c\u76ee\u7684\u662f\u4f7f\u4e00\u4e9b\u540c\u4e8b\u80fd\u5feb\u901f\u4f7f\u7528 Go\u3002\u591a\u5e74\u6765\uff0c\u8be5\u6307\u5357\u5df2\u6839\u636e\u5176\u4ed6\u4eba\u7684\u53cd\u9988\u8fdb\u884c\u4e86\u4fee\u6539\u3002 \u672c\u6587\u6863\u8bb0\u5f55\u4e86\u6211\u4eec\u5728 Uber \u9075\u5faa\u7684 Go \u4ee3\u7801\u4e2d\u7684\u60ef\u7528\u7ea6\u5b9a\u3002\u5176\u4e2d\u8bb8\u591a\u662f Go \u7684\u901a\u7528\u51c6\u5219\uff0c\u800c\u5176\u4ed6\u6269\u5c55\u51c6\u5219\u4f9d\u8d56\u4e8e\u4e0b\u9762\u5916\u90e8\u7684\u6307\u5357\uff1a Effective Go The Go common mistakes guide \u6240\u6709\u4ee3\u7801\u90fd\u5e94\u8be5\u901a\u8fc7 golint \u548c go vet \u7684\u68c0\u67e5\u5e76\u65e0\u9519\u8bef\u3002\u6211\u4eec\u5efa\u8bae\u60a8\u5c06\u7f16\u8f91\u5668\u8bbe\u7f6e\u4e3a\uff1a \u4fdd\u5b58\u65f6\u8fd0\u884c goimports \u8fd0\u884c golint \u548c go vet \u68c0\u67e5\u9519\u8bef \u60a8\u53ef\u4ee5\u5728\u4ee5\u4e0b Go \u7f16\u8f91\u5668\u5de5\u5177\u652f\u6301\u9875\u9762\u4e2d\u627e\u5230\u66f4\u4e3a\u8be6\u7ec6\u7684\u4fe1\u606f\uff1a https://github.com/golang/go/wiki/IDEsAndTextEditorPlugins","title":"\u4ecb\u7ecd"},{"location":"specification/dev-specification/#_2","text":"","title":"\u6307\u5bfc\u539f\u5219"},{"location":"specification/dev-specification/#interface","text":"\u60a8\u51e0\u4e4e\u4e0d\u9700\u8981\u6307\u5411\u63a5\u53e3\u7c7b\u578b\u7684\u6307\u9488\u3002\u60a8\u5e94\u8be5\u5c06\u63a5\u53e3\u4f5c\u4e3a\u503c\u8fdb\u884c\u4f20\u9012\uff0c\u5728\u8fd9\u6837\u7684\u4f20\u9012\u8fc7\u7a0b\u4e2d\uff0c\u5b9e\u8d28\u4e0a\u4f20\u9012\u7684\u5e95\u5c42\u6570\u636e\u4ecd\u7136\u53ef\u4ee5\u662f\u6307\u9488\u3002 \u63a5\u53e3\u5b9e\u8d28\u4e0a\u5728\u5e95\u5c42\u7528\u4e24\u4e2a\u5b57\u6bb5\u8868\u793a\uff1a \u4e00\u4e2a\u6307\u5411\u67d0\u4e9b\u7279\u5b9a\u7c7b\u578b\u4fe1\u606f\u7684\u6307\u9488\u3002\u60a8\u53ef\u4ee5\u5c06\u5176\u89c6\u4e3a\u201dtype\u201d\u3002 \u6570\u636e\u6307\u9488\u3002\u5982\u679c\u5b58\u50a8\u7684\u6570\u636e\u662f\u6307\u9488\uff0c\u5219\u76f4\u63a5\u5b58\u50a8\u3002\u5982\u679c\u5b58\u50a8\u7684\u6570\u636e\u662f\u4e00\u4e2a\u503c\uff0c\u5219\u5b58\u50a8\u6307\u5411\u8be5\u503c\u7684\u6307\u9488\u3002 \u5982\u679c\u5e0c\u671b\u63a5\u53e3\u65b9\u6cd5\u4fee\u6539\u57fa\u7840\u6570\u636e\uff0c\u5219\u5fc5\u987b\u4f7f\u7528\u6307\u9488\u4f20\u9012(\u5c06\u5bf9\u8c61\u6307\u9488\u8d4b\u503c\u7ed9\u63a5\u53e3\u53d8\u91cf)\u3002 type F interface { f () } type S1 struct {} func ( s S1 ) f () {} type S2 struct {} func ( s * S2 ) f () {} // f1.f()\u65e0\u6cd5\u4fee\u6539\u5e95\u5c42\u6570\u636e // f2.f() \u53ef\u4ee5\u4fee\u6539\u5e95\u5c42\u6570\u636e,\u7ed9\u63a5\u53e3\u53d8\u91cff2\u8d4b\u503c\u65f6\u4f7f\u7528\u7684\u662f\u5bf9\u8c61\u6307\u9488 var f1 F := S1 {} var f2 F := & S2 {}","title":"\u6307\u5411 interface \u7684\u6307\u9488"},{"location":"specification/dev-specification/#interface_1","text":"\u5728\u7f16\u8bd1\u65f6\u9a8c\u8bc1\u63a5\u53e3\u7684\u7b26\u5408\u6027\u3002\u8fd9\u5305\u62ec\uff1a \u5c06\u5b9e\u73b0\u7279\u5b9a\u63a5\u53e3\u7684\u5bfc\u51fa\u7c7b\u578b\u4f5c\u4e3a\u63a5\u53e3API \u7684\u4e00\u90e8\u5206\u8fdb\u884c\u68c0\u67e5 \u5b9e\u73b0\u540c\u4e00\u63a5\u53e3\u7684(\u5bfc\u51fa\u548c\u975e\u5bfc\u51fa)\u7c7b\u578b\u5c5e\u4e8e\u5b9e\u73b0\u7c7b\u578b\u7684\u96c6\u5408 \u4efb\u4f55\u8fdd\u53cd\u63a5\u53e3\u5408\u7406\u6027\u68c0\u67e5\u7684\u573a\u666f,\u90fd\u4f1a\u7ec8\u6b62\u7f16\u8bd1,\u5e76\u901a\u77e5\u7ed9\u7528\u6237 \u8865\u5145:\u4e0a\u97623\u6761\u662f\u7f16\u8bd1\u5668\u5bf9\u63a5\u53e3\u7684\u68c0\u67e5\u673a\u5236, \u5927\u4f53\u610f\u601d\u662f\u9519\u8bef\u4f7f\u7528\u63a5\u53e3\u4f1a\u5728\u7f16\u8bd1\u671f\u62a5\u9519. \u6240\u4ee5\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u673a\u5236\u8ba9\u90e8\u5206\u95ee\u9898\u5728\u7f16\u8bd1\u671f\u66b4\u9732. Bad Good // \u5982\u679cHandler\u6ca1\u6709\u5b9e\u73b0http.Handler,\u4f1a\u5728\u8fd0\u884c\u65f6\u62a5\u9519 type Handler struct { // ... } func ( h * Handler ) ServeHTTP ( w http . ResponseWriter , r * http . Request , ) { ... } type Handler struct { // ... } // \u7528\u4e8e\u89e6\u53d1\u7f16\u8bd1\u671f\u7684\u63a5\u53e3\u7684\u5408\u7406\u6027\u68c0\u67e5\u673a\u5236 // \u5982\u679cHandler\u6ca1\u6709\u5b9e\u73b0http.Handler,\u4f1a\u5728\u7f16\u8bd1\u671f\u62a5\u9519 var _ http . Handler = ( * Handler )( nil ) func ( h * Handler ) ServeHTTP ( w http . ResponseWriter , r * http . Request , ) { // ... } \u5982\u679c *Handler \u4e0e http.Handler \u7684\u63a5\u53e3\u4e0d\u5339\u914d, \u90a3\u4e48\u8bed\u53e5 var _ http.Handler = (*Handler)(nil) \u5c06\u65e0\u6cd5\u7f16\u8bd1\u901a\u8fc7. \u8d4b\u503c\u7684\u53f3\u8fb9\u5e94\u8be5\u662f\u65ad\u8a00\u7c7b\u578b\u7684\u96f6\u503c\u3002 \u5bf9\u4e8e\u6307\u9488\u7c7b\u578b\uff08\u5982 *Handler \uff09\u3001\u5207\u7247\u548c\u6620\u5c04\uff0c\u8fd9\u662f nil \uff1b \u5bf9\u4e8e\u7ed3\u6784\u7c7b\u578b\uff0c\u8fd9\u662f\u7a7a\u7ed3\u6784\u3002 type LogHandler struct { h http . Handler log * zap . Logger } var _ http . Handler = LogHandler {} func ( h LogHandler ) ServeHTTP ( w http . ResponseWriter , r * http . Request , ) { // ... }","title":"Interface \u5408\u7406\u6027\u9a8c\u8bc1"},{"location":"specification/dev-specification/#receiver","text":"\u4f7f\u7528\u503c\u63a5\u6536\u5668\u7684\u65b9\u6cd5\u65e2\u53ef\u4ee5\u901a\u8fc7\u503c\u8c03\u7528\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u6307\u9488\u8c03\u7528\u3002 \u5e26\u6307\u9488\u63a5\u6536\u5668\u7684\u65b9\u6cd5\u53ea\u80fd\u901a\u8fc7\u6307\u9488\u6216 addressable values \u8c03\u7528. \u4f8b\u5982\uff0c type S struct { data string } func ( s S ) Read () string { return s . data } func ( s * S ) Write ( str string ) { s . data = str } sVals := map [ int ] S { 1 : { \"A\" }} // \u4f60\u53ea\u80fd\u901a\u8fc7\u503c\u8c03\u7528 Read sVals [ 1 ]. Read () // \u8fd9\u4e0d\u80fd\u7f16\u8bd1\u901a\u8fc7\uff1a // sVals[1].Write(\"test\") sPtrs := map [ int ] * S { 1 : { \"A\" }} // \u901a\u8fc7\u6307\u9488\u65e2\u53ef\u4ee5\u8c03\u7528 Read\uff0c\u4e5f\u53ef\u4ee5\u8c03\u7528 Write \u65b9\u6cd5 sPtrs [ 1 ]. Read () sPtrs [ 1 ]. Write ( \"test\" ) \u7c7b\u4f3c\u7684,\u5373\u4f7f\u65b9\u6cd5\u6709\u4e86\u503c\u63a5\u6536\u5668,\u4e5f\u540c\u6837\u53ef\u4ee5\u7528\u6307\u9488\u63a5\u6536\u5668\u6765\u6ee1\u8db3\u63a5\u53e3. type F interface { f () } type S1 struct {} func ( s S1 ) f () {} type S2 struct {} func ( s * S2 ) f () {} s1Val := S1 {} s1Ptr := & S1 {} s2Val := S2 {} s2Ptr := & S2 {} var i F i = s1Val i = s1Ptr i = s2Ptr // \u4e0b\u9762\u4ee3\u7801\u65e0\u6cd5\u901a\u8fc7\u7f16\u8bd1\u3002\u56e0\u4e3a s2Val \u662f\u4e00\u4e2a\u503c\uff0c\u800c S2 \u7684 f \u65b9\u6cd5\u4e2d\u6ca1\u6709\u4f7f\u7528\u503c\u63a5\u6536\u5668 // i = s2Val Effective Go \u4e2d\u6709\u4e00\u6bb5\u5173\u4e8e pointers vs. values \u7684\u7cbe\u5f69\u8bb2\u89e3\u3002 \u8865\u5145: \u4e00\u4e2a\u7c7b\u578b\u53ef\u4ee5\u6709\u503c\u63a5\u6536\u5668\u65b9\u6cd5\u96c6\u548c\u6307\u9488\u63a5\u6536\u5668\u65b9\u6cd5\u96c6 \u503c\u63a5\u6536\u5668\u65b9\u6cd5\u96c6\u662f\u6307\u9488\u63a5\u6536\u5668\u65b9\u6cd5\u96c6\u7684\u5b50\u96c6,\u53cd\u4e4b\u4e0d\u662f \u89c4\u5219 \u503c\u5bf9\u8c61\u53ea\u53ef\u4ee5\u4f7f\u7528\u503c\u63a5\u6536\u5668\u65b9\u6cd5\u96c6 \u6307\u9488\u5bf9\u8c61\u53ef\u4ee5\u4f7f\u7528 \u503c\u63a5\u6536\u5668\u65b9\u6cd5\u96c6 + \u6307\u9488\u63a5\u6536\u5668\u65b9\u6cd5\u96c6 \u63a5\u53e3\u7684\u5339\u914d(\u6216\u8005\u53eb\u5b9e\u73b0) \u7c7b\u578b\u5b9e\u73b0\u4e86\u63a5\u53e3\u7684\u6240\u6709\u65b9\u6cd5,\u53eb\u5339\u914d \u5177\u4f53\u7684\u8bb2,\u8981\u4e48\u662f\u7c7b\u578b\u7684\u503c\u65b9\u6cd5\u96c6\u5339\u914d\u63a5\u53e3,\u8981\u4e48\u662f\u6307\u9488\u65b9\u6cd5\u96c6\u5339\u914d\u63a5\u53e3 \u5177\u4f53\u7684\u5339\u914d\u5206\u4e24\u79cd: \u503c\u65b9\u6cd5\u96c6\u548c\u63a5\u53e3\u5339\u914d \u7ed9\u63a5\u53e3\u53d8\u91cf\u8d4b\u503c\u7684\u4e0d\u7ba1\u662f\u503c\u8fd8\u662f\u6307\u9488\u5bf9\u8c61,\u90fdok,\u56e0\u4e3a\u90fd\u5305\u542b\u503c\u65b9\u6cd5\u96c6 \u6307\u9488\u65b9\u6cd5\u96c6\u548c\u63a5\u53e3\u5339\u914d \u53ea\u80fd\u5c06\u6307\u9488\u5bf9\u8c61\u8d4b\u503c\u7ed9\u63a5\u53e3\u53d8\u91cf,\u56e0\u4e3a\u53ea\u6709\u6307\u9488\u65b9\u6cd5\u96c6\u548c\u63a5\u53e3\u5339\u914d \u5982\u679c\u5c06\u503c\u5bf9\u8c61\u8d4b\u503c\u7ed9\u63a5\u53e3\u53d8\u91cf,\u4f1a\u5728\u7f16\u8bd1\u671f\u62a5\u9519(\u4f1a\u89e6\u53d1\u63a5\u53e3\u5408\u7406\u6027\u68c0\u67e5\u673a\u5236) \u4e3a\u5565 i = s2Val \u4f1a\u62a5\u9519,\u56e0\u4e3a\u503c\u65b9\u6cd5\u96c6\u548c\u63a5\u53e3\u4e0d\u5339\u914d.","title":"\u63a5\u6536\u5668 (receiver) \u4e0e\u63a5\u53e3"},{"location":"specification/dev-specification/#mutex","text":"\u96f6\u503c sync.Mutex \u548c sync.RWMutex \u662f\u6709\u6548\u7684\u3002\u6240\u4ee5\u6307\u5411 mutex \u7684\u6307\u9488\u57fa\u672c\u662f\u4e0d\u5fc5\u8981\u7684\u3002 Bad Good mu := new ( sync . Mutex ) mu . Lock () var mu sync . Mutex mu . Lock () \u5982\u679c\u4f60\u4f7f\u7528\u7ed3\u6784\u4f53\u6307\u9488\uff0cmutex \u53ef\u4ee5\u975e\u6307\u9488\u5f62\u5f0f\u4f5c\u4e3a\u7ed3\u6784\u4f53\u7684\u7ec4\u6210\u5b57\u6bb5\uff0c\u6216\u8005\u66f4\u597d\u7684\u65b9\u5f0f\u662f\u76f4\u63a5\u5d4c\u5165\u5230\u7ed3\u6784\u4f53\u4e2d\u3002 \u5982\u679c\u662f\u79c1\u6709\u7ed3\u6784\u4f53\u7c7b\u578b\u6216\u662f\u8981\u5b9e\u73b0 Mutex \u63a5\u53e3\u7684\u7c7b\u578b\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5d4c\u5165 mutex \u7684\u65b9\u6cd5\uff1a type smap struct { sync . Mutex // only for unexported types\uff08\u4ec5\u9002\u7528\u4e8e\u975e\u5bfc\u51fa\u7c7b\u578b\uff09 data map [ string ] string } func newSMap () * smap { return & smap { data : make ( map [ string ] string ), } } func ( m * smap ) Get ( k string ) string { m . Lock () defer m . Unlock () return m . data [ k ] } type SMap struct { mu sync . Mutex // \u5bf9\u4e8e\u5bfc\u51fa\u7c7b\u578b\uff0c\u8bf7\u4f7f\u7528\u79c1\u6709\u9501 data map [ string ] string } func NewSMap () * SMap { return & SMap { data : make ( map [ string ] string ), } } func ( m * SMap ) Get ( k string ) string { m . mu . Lock () defer m . mu . Unlock () return m . data [ k ] } \u4e3a\u79c1\u6709\u7c7b\u578b\u6216\u9700\u8981\u5b9e\u73b0\u4e92\u65a5\u63a5\u53e3\u7684\u7c7b\u578b\u5d4c\u5165\u3002 \u5bf9\u4e8e\u5bfc\u51fa\u7684\u7c7b\u578b\uff0c\u8bf7\u4f7f\u7528\u4e13\u7528\u5b57\u6bb5\u3002","title":"\u96f6\u503c Mutex \u662f\u6709\u6548\u7684"},{"location":"specification/dev-specification/#slices-maps","text":"slices \u548c maps \u5305\u542b\u4e86\u6307\u5411\u5e95\u5c42\u6570\u636e\u7684\u6307\u9488\uff0c\u56e0\u6b64\u5728\u9700\u8981\u590d\u5236\u5b83\u4eec\u65f6\u8981\u7279\u522b\u6ce8\u610f\u3002","title":"\u5728\u8fb9\u754c\u5904\u62f7\u8d1d Slices \u548c Maps"},{"location":"specification/dev-specification/#slices-maps_1","text":"\u8bf7\u8bb0\u4f4f\uff0c\u5f53 map \u6216 slice \u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\u4f20\u5165\u65f6\uff0c\u5982\u679c\u60a8\u5b58\u50a8\u4e86\u5bf9\u5b83\u4eec\u7684\u5f15\u7528\uff0c\u5219\u7528\u6237\u53ef\u4ee5\u5bf9\u5176\u8fdb\u884c\u4fee\u6539\u3002 Bad Good func ( d * Driver ) SetTrips ( trips [] Trip ) { d . trips = trips } trips := ... d1 . SetTrips ( trips ) // \u4f60\u662f\u8981\u4fee\u6539 d1.trips \u5417\uff1f trips [ 0 ] = ... func ( d * Driver ) SetTrips ( trips [] Trip ) { d . trips = make ([] Trip , len ( trips )) copy ( d . trips , trips ) } trips := ... d1 . SetTrips ( trips ) // \u8fd9\u91cc\u6211\u4eec\u4fee\u6539 trips[0]\uff0c\u4f46\u4e0d\u4f1a\u5f71\u54cd\u5230 d1.trips trips [ 0 ] = ...","title":"\u63a5\u6536 Slices \u548c Maps"},{"location":"specification/dev-specification/#slices-maps_2","text":"\u540c\u6837\uff0c\u8bf7\u6ce8\u610f\u7528\u6237\u5bf9\u66b4\u9732\u5185\u90e8\u72b6\u6001\u7684 map \u6216 slice \u7684\u4fee\u6539\u3002 Bad Good type Stats struct { mu sync . Mutex counters map [ string ] int } // Snapshot \u8fd4\u56de\u5f53\u524d\u72b6\u6001\u3002 func ( s * Stats ) Snapshot () map [ string ] int { s . mu . Lock () defer s . mu . Unlock () return s . counters } // snapshot \u4e0d\u518d\u53d7\u4e92\u65a5\u9501\u4fdd\u62a4 // \u56e0\u6b64\u5bf9 snapshot \u7684\u4efb\u4f55\u8bbf\u95ee\u90fd\u5c06\u53d7\u5230\u6570\u636e\u7ade\u4e89\u7684\u5f71\u54cd // \u5f71\u54cd stats.counters snapshot := stats . Snapshot () type Stats struct { mu sync . Mutex counters map [ string ] int } func ( s * Stats ) Snapshot () map [ string ] int { s . mu . Lock () defer s . mu . Unlock () result := make ( map [ string ] int , len ( s . counters )) for k , v := range s . counters { result [ k ] = v } return result } // snapshot \u73b0\u5728\u662f\u4e00\u4e2a\u62f7\u8d1d snapshot := stats . Snapshot ()","title":"\u8fd4\u56de slices \u6216 maps"},{"location":"specification/dev-specification/#defer","text":"\u4f7f\u7528 defer \u91ca\u653e\u8d44\u6e90\uff0c\u8bf8\u5982\u6587\u4ef6\u548c\u9501\u3002 Bad Good p . Lock () if p . count < 10 { p . Unlock () return p . count } p . count ++ newCount := p . count p . Unlock () return newCount // \u5f53\u6709\u591a\u4e2a return \u5206\u652f\u65f6\uff0c\u5f88\u5bb9\u6613\u9057\u5fd8 unlock p . Lock () defer p . Unlock () if p . count < 10 { return p . count } p . count ++ return p . count // \u66f4\u53ef\u8bfb Defer \u7684\u5f00\u9500\u975e\u5e38\u5c0f\uff0c\u53ea\u6709\u5728\u60a8\u53ef\u4ee5\u8bc1\u660e\u51fd\u6570\u6267\u884c\u65f6\u95f4\u5904\u4e8e\u7eb3\u79d2\u7ea7\u7684\u7a0b\u5ea6\u65f6\uff0c\u624d\u5e94\u907f\u514d\u8fd9\u6837\u505a\u3002\u4f7f\u7528 defer \u63d0\u5347\u53ef\u8bfb\u6027\u662f\u503c\u5f97\u7684\uff0c\u56e0\u4e3a\u4f7f\u7528\u5b83\u4eec\u7684\u6210\u672c\u5fae\u4e0d\u8db3\u9053\u3002\u5c24\u5176\u9002\u7528\u4e8e\u90a3\u4e9b\u4e0d\u4ec5\u4ec5\u662f\u7b80\u5355\u5185\u5b58\u8bbf\u95ee\u7684\u8f83\u5927\u7684\u65b9\u6cd5\uff0c\u5728\u8fd9\u4e9b\u65b9\u6cd5\u4e2d\u5176\u4ed6\u8ba1\u7b97\u7684\u8d44\u6e90\u6d88\u8017\u8fdc\u8d85\u8fc7 defer \u3002","title":"\u4f7f\u7528 defer \u91ca\u653e\u8d44\u6e90"},{"location":"specification/dev-specification/#channel-size-1","text":"channel \u901a\u5e38 size \u5e94\u4e3a 1 \u6216\u662f\u65e0\u7f13\u51b2\u7684\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cchannel \u662f\u65e0\u7f13\u51b2\u7684\uff0c\u5176 size \u4e3a\u96f6\u3002\u4efb\u4f55\u5176\u4ed6\u5c3a\u5bf8\u90fd\u5fc5\u987b\u7ecf\u8fc7\u4e25\u683c\u7684\u5ba1\u67e5\u3002\u6211\u4eec\u9700\u8981\u8003\u8651\u5982\u4f55\u786e\u5b9a\u5927\u5c0f\uff0c\u8003\u8651\u662f\u4ec0\u4e48\u963b\u6b62\u4e86 channel \u5728\u9ad8\u8d1f\u8f7d\u4e0b\u548c\u963b\u585e\u5199\u65f6\u7684\u5199\u5165\uff0c\u4ee5\u53ca\u5f53\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u65f6\u7cfb\u7edf\u903b\u8f91\u6709\u54ea\u4e9b\u53d8\u5316\u3002(\u7ffb\u8bd1\u89e3\u91ca\uff1a\u6309\u7167\u539f\u6587\u610f\u601d\u662f\u9700\u8981\u754c\u5b9a\u901a\u9053\u8fb9\u754c\uff0c\u7ade\u6001\u6761\u4ef6\uff0c\u4ee5\u53ca\u903b\u8f91\u4e0a\u4e0b\u6587\u68b3\u7406) Bad Good // \u5e94\u8be5\u8db3\u4ee5\u6ee1\u8db3\u4efb\u4f55\u60c5\u51b5\uff01 c := make ( chan int , 64 ) // \u5927\u5c0f\uff1a1 c := make ( chan int , 1 ) // \u6216\u8005 // \u65e0\u7f13\u51b2 channel\uff0c\u5927\u5c0f\u4e3a 0 c := make ( chan int )","title":"Channel \u7684 size \u8981\u4e48\u662f 1\uff0c\u8981\u4e48\u662f\u65e0\u7f13\u51b2\u7684"},{"location":"specification/dev-specification/#1","text":"\u5728 Go \u4e2d\u5f15\u5165\u679a\u4e3e\u7684\u6807\u51c6\u65b9\u6cd5\u662f\u58f0\u660e\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7c7b\u578b\u548c\u4e00\u4e2a\u4f7f\u7528\u4e86 iota \u7684 const \u7ec4\u3002\u7531\u4e8e\u53d8\u91cf\u7684\u9ed8\u8ba4\u503c\u4e3a 0\uff0c\u56e0\u6b64\u901a\u5e38\u5e94\u4ee5\u975e\u96f6\u503c\u5f00\u5934\u679a\u4e3e\u3002 Bad Good type Operation int const ( Add Operation = iota Subtract Multiply ) // Add=0, Subtract=1, Multiply=2 type Operation int const ( Add Operation = iota + 1 Subtract Multiply ) // Add=1, Subtract=2, Multiply=3 \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u96f6\u503c\u662f\u6709\u610f\u4e49\u7684\uff08\u679a\u4e3e\u4ece\u96f6\u5f00\u59cb\uff09\uff0c\u4f8b\u5982\uff0c\u5f53\u96f6\u503c\u662f\u7406\u60f3\u7684\u9ed8\u8ba4\u884c\u4e3a\u65f6\u3002 type LogOutput int const ( LogToStdout LogOutput = iota LogToFile LogToRemote ) // LogToStdout=0, LogToFile=1, LogToRemote=2","title":"\u679a\u4e3e\u4ece 1 \u5f00\u59cb"},{"location":"specification/dev-specification/#time","text":"\u65f6\u95f4\u5904\u7406\u5f88\u590d\u6742\u3002\u5173\u4e8e\u65f6\u95f4\u7684\u9519\u8bef\u5047\u8bbe\u901a\u5e38\u5305\u62ec\u4ee5\u4e0b\u51e0\u70b9\u3002 \u4e00\u5929\u6709 24 \u5c0f\u65f6 \u4e00\u5c0f\u65f6\u6709 60 \u5206\u949f \u4e00\u5468\u6709\u4e03\u5929 \u4e00\u5e74 365 \u5929 \u8fd8\u6709\u66f4\u591a \u4f8b\u5982\uff0c 1 \u8868\u793a\u5728\u4e00\u4e2a\u65f6\u95f4\u70b9\u4e0a\u52a0\u4e0a 24 \u5c0f\u65f6\u5e76\u4e0d\u603b\u662f\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684\u65e5\u5386\u65e5\u3002 \u56e0\u6b64\uff0c\u5728\u5904\u7406\u65f6\u95f4\u65f6\u59cb\u7ec8\u4f7f\u7528 [ \"time\" ] \u5305\uff0c\u56e0\u4e3a\u5b83\u6709\u52a9\u4e8e\u4ee5\u66f4\u5b89\u5168\u3001\u66f4\u51c6\u786e\u7684\u65b9\u5f0f\u5904\u7406\u8fd9\u4e9b\u4e0d\u6b63\u786e\u7684\u5047\u8bbe\u3002","title":"\u4f7f\u7528 time \u5904\u7406\u65f6\u95f4"},{"location":"specification/dev-specification/#timetime","text":"\u5728\u5904\u7406\u65f6\u95f4\u7684\u77ac\u95f4\u65f6\u4f7f\u7528 [ time.time ]\uff0c\u5728\u6bd4\u8f83\u3001\u6dfb\u52a0\u6216\u51cf\u53bb\u65f6\u95f4\u65f6\u4f7f\u7528 time.Time \u4e2d\u7684\u65b9\u6cd5\u3002 Bad Good func isActive ( now , start , stop int ) bool { return start <= now && now < stop } func isActive ( now , start , stop time . Time ) bool { return ( start . Before ( now ) || start . Equal ( now )) && now . Before ( stop ) }","title":"\u4f7f\u7528 time.Time \u8868\u8fbe\u77ac\u65f6\u65f6\u95f4"},{"location":"specification/dev-specification/#timeduration","text":"\u5728\u5904\u7406\u65f6\u95f4\u6bb5\u65f6\u4f7f\u7528 [ time.Duration ] . Bad Good func poll ( delay int ) { for { // ... time . Sleep ( time . Duration ( delay ) * time . Millisecond ) } } poll ( 10 ) // \u662f\u51e0\u79d2\u949f\u8fd8\u662f\u51e0\u6beb\u79d2? func poll ( delay time . Duration ) { for { // ... time . Sleep ( delay ) } } poll ( 10 * time . Second ) \u56de\u5230\u7b2c\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5728\u4e00\u4e2a\u65f6\u95f4\u77ac\u95f4\u52a0\u4e0a 24 \u5c0f\u65f6\uff0c\u6211\u4eec\u7528\u4e8e\u6dfb\u52a0\u65f6\u95f4\u7684\u65b9\u6cd5\u53d6\u51b3\u4e8e\u610f\u56fe\u3002\u5982\u679c\u6211\u4eec\u60f3\u8981\u4e0b\u4e00\u4e2a\u65e5\u5386\u65e5(\u5f53\u524d\u5929\u7684\u4e0b\u4e00\u5929)\u7684\u540c\u4e00\u4e2a\u65f6\u95f4\u70b9\uff0c\u6211\u4eec\u5e94\u8be5\u4f7f\u7528 [ Time.AddDate ]\u3002\u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u60f3\u4fdd\u8bc1\u67d0\u4e00\u65f6\u523b\u6bd4\u524d\u4e00\u65f6\u523b\u665a 24 \u5c0f\u65f6\uff0c\u6211\u4eec\u5e94\u8be5\u4f7f\u7528 [ Time.Add ]\u3002 newDay := t . AddDate ( 0 /* years */ , 0 , /* months */ , 1 /* days */ ) maybeNewDay := t . Add ( 24 * time . Hour )","title":"\u4f7f\u7528 time.Duration \u8868\u8fbe\u65f6\u95f4\u6bb5"},{"location":"specification/dev-specification/#timetime-timeduration","text":"\u5c3d\u53ef\u80fd\u5728\u4e0e\u5916\u90e8\u7cfb\u7edf\u7684\u4ea4\u4e92\u4e2d\u4f7f\u7528 time.Duration \u548c time.Time \u4f8b\u5982 : Command-line \u6807\u5fd7: [ flag ] \u901a\u8fc7 [ time.ParseDuration ] \u652f\u6301 time.Duration JSON: [ encoding/json ] \u901a\u8fc7\u5176 [ UnmarshalJSON method] \u65b9\u6cd5\u652f\u6301\u5c06 time.Time \u7f16\u7801\u4e3a RFC 3339 \u5b57\u7b26\u4e32 SQL: [ database/sql ] \u652f\u6301\u5c06 DATETIME \u6216 TIMESTAMP \u5217\u8f6c\u6362\u4e3a time.Time \uff0c\u5982\u679c\u5e95\u5c42\u9a71\u52a8\u7a0b\u5e8f\u652f\u6301\u5219\u8fd4\u56de YAML: [ gopkg.in/yaml.v2 ] \u652f\u6301\u5c06 time.Time \u4f5c\u4e3a RFC 3339 \u5b57\u7b26\u4e32\uff0c\u5e76\u901a\u8fc7 [ time.ParseDuration ] \u652f\u6301 time.Duration \u3002 \u5f53\u4e0d\u80fd\u5728\u8fd9\u4e9b\u4ea4\u4e92\u4e2d\u4f7f\u7528 time.Duration \u65f6\uff0c\u8bf7\u4f7f\u7528 int \u6216 float64 \uff0c\u5e76\u5728\u5b57\u6bb5\u540d\u79f0\u4e2d\u5305\u542b\u5355\u4f4d\u3002 \u4f8b\u5982\uff0c\u7531\u4e8e encoding/json \u4e0d\u652f\u6301 time.Duration \uff0c\u56e0\u6b64\u8be5\u5355\u4f4d\u5305\u542b\u5728\u5b57\u6bb5\u7684\u540d\u79f0\u4e2d\u3002 Bad Good // {\"interval\": 2} type Config struct { Interval int `json:\"interval\"` } // {\"intervalMillis\": 2000} type Config struct { IntervalMillis int `json:\"intervalMillis\"` } \u5f53\u5728\u8fd9\u4e9b\u4ea4\u4e92\u4e2d\u4e0d\u80fd\u4f7f\u7528 time.Time \u65f6\uff0c\u9664\u975e\u8fbe\u6210\u4e00\u81f4\uff0c\u5426\u5219\u4f7f\u7528 string \u548c RFC 3339 \u4e2d\u5b9a\u4e49\u7684\u683c\u5f0f\u65f6\u95f4\u6233\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c[ Time.UnmarshalText ] \u4f7f\u7528\u6b64\u683c\u5f0f\uff0c\u5e76\u53ef\u901a\u8fc7 [ time.RFC3339 ] \u5728 Time.Format \u548c time.Parse \u4e2d\u4f7f\u7528\u3002 \u5c3d\u7ba1\u8fd9\u5728\u5b9e\u8df5\u4e2d\u5e76\u4e0d\u6210\u95ee\u9898\uff0c\u4f46\u8bf7\u8bb0\u4f4f\uff0c \"time\" \u5305\u4e0d\u652f\u6301\u89e3\u6790\u95f0\u79d2\u65f6\u95f4\u6233\uff08 8728 \uff09\uff0c\u4e5f\u4e0d\u5728\u8ba1\u7b97\u4e2d\u8003\u8651\u95f0\u79d2\uff08 15190 \uff09\u3002\u5982\u679c\u60a8\u6bd4\u8f83\u4e24\u4e2a\u65f6\u95f4\u77ac\u95f4\uff0c\u5219\u5dee\u5f02\u5c06\u4e0d\u5305\u62ec\u8fd9\u4e24\u4e2a\u77ac\u95f4\u4e4b\u95f4\u53ef\u80fd\u53d1\u751f\u7684\u95f0\u79d2\u3002","title":"\u5bf9\u5916\u90e8\u7cfb\u7edf\u4f7f\u7528 time.Time \u548c time.Duration"},{"location":"specification/dev-specification/#_3","text":"Go \u4e2d\u6709\u591a\u79cd\u58f0\u660e\u9519\u8bef\uff08Error) \u7684\u9009\u9879\uff1a [ errors.New ] \u5bf9\u4e8e\u7b80\u5355\u9759\u6001\u5b57\u7b26\u4e32\u7684\u9519\u8bef [ fmt.Errorf ] \u7528\u4e8e\u683c\u5f0f\u5316\u7684\u9519\u8bef\u5b57\u7b26\u4e32 \u5b9e\u73b0 Error() \u65b9\u6cd5\u7684\u81ea\u5b9a\u4e49\u7c7b\u578b \u7528 [ \"pkg/errors\".Wrap ] \u7684 Wrapped errors \u8fd4\u56de\u9519\u8bef\u65f6\uff0c\u8bf7\u8003\u8651\u4ee5\u4e0b\u56e0\u7d20\u4ee5\u786e\u5b9a\u6700\u4f73\u9009\u62e9\uff1a \u8fd9\u662f\u4e00\u4e2a\u4e0d\u9700\u8981\u989d\u5916\u4fe1\u606f\u7684\u7b80\u5355\u9519\u8bef\u5417\uff1f\u5982\u679c\u662f\u8fd9\u6837\uff0c[ errors.New ] \u8db3\u591f\u4e86\u3002 \u5ba2\u6237\u9700\u8981\u68c0\u6d4b\u5e76\u5904\u7406\u6b64\u9519\u8bef\u5417\uff1f\u5982\u679c\u662f\u8fd9\u6837\uff0c\u5219\u5e94\u4f7f\u7528\u81ea\u5b9a\u4e49\u7c7b\u578b\u5e76\u5b9e\u73b0\u8be5 Error() \u65b9\u6cd5\u3002 \u60a8\u662f\u5426\u6b63\u5728\u4f20\u64ad\u4e0b\u6e38\u51fd\u6570\u8fd4\u56de\u7684\u9519\u8bef\uff1f\u5982\u679c\u662f\u8fd9\u6837\uff0c\u8bf7\u67e5\u770b\u672c\u6587\u540e\u9762\u6709\u5173\u9519\u8bef\u5305\u88c5 section on error wrapping \u90e8\u5206\u7684\u5185\u5bb9\u3002 \u5426\u5219 [ fmt.Errorf ] \u5c31\u53ef\u4ee5\u4e86\u3002 \u5982\u679c\u5ba2\u6237\u7aef\u9700\u8981\u68c0\u6d4b\u9519\u8bef\uff0c\u5e76\u4e14\u60a8\u5df2\u4f7f\u7528\u521b\u5efa\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u9519\u8bef [ errors.New ]\uff0c\u8bf7\u4f7f\u7528\u4e00\u4e2a\u9519\u8bef\u53d8\u91cf\u3002 Bad Good // package foo func Open () error { return errors . New ( \"could not open\" ) } // package bar func use () { if err := foo . Open (); err != nil { if err . Error () == \"could not open\" { // handle } else { panic ( \"unknown error\" ) } } } // package foo var ErrCouldNotOpen = errors . New ( \"could not open\" ) func Open () error { return ErrCouldNotOpen } // package bar if err := foo . Open (); err != nil { if err == foo . ErrCouldNotOpen { // handle } else { panic ( \"unknown error\" ) } } \u5982\u679c\u60a8\u6709\u53ef\u80fd\u9700\u8981\u5ba2\u6237\u7aef\u68c0\u6d4b\u7684\u9519\u8bef\uff0c\u5e76\u4e14\u60f3\u5411\u5176\u4e2d\u6dfb\u52a0\u66f4\u591a\u4fe1\u606f\uff08\u4f8b\u5982\uff0c\u5b83\u4e0d\u662f\u9759\u6001\u5b57\u7b26\u4e32\uff09\uff0c\u5219\u5e94\u4f7f\u7528\u81ea\u5b9a\u4e49\u7c7b\u578b\u3002 Bad Good func open ( file string ) error { return fmt . Errorf ( \"file %q not found\" , file ) } func use () { if err := open ( \"testfile.txt\" ); err != nil { if strings . Contains ( err . Error (), \"not found\" ) { // handle } else { panic ( \"unknown error\" ) } } } type errNotFound struct { file string } func ( e errNotFound ) Error () string { return fmt . Sprintf ( \"file %q not found\" , e . file ) } func open ( file string ) error { return errNotFound { file : file } } func use () { if err := open ( \"testfile.txt\" ); err != nil { if _ , ok := err .( errNotFound ); ok { // handle } else { panic ( \"unknown error\" ) } } } \u76f4\u63a5\u5bfc\u51fa\u81ea\u5b9a\u4e49\u9519\u8bef\u7c7b\u578b\u65f6\u8981\u5c0f\u5fc3\uff0c\u56e0\u4e3a\u5b83\u4eec\u5df2\u6210\u4e3a\u7a0b\u5e8f\u5305\u516c\u5171 API \u7684\u4e00\u90e8\u5206\u3002\u6700\u597d\u516c\u5f00\u5339\u914d\u5668\u529f\u80fd\u4ee5\u68c0\u67e5\u9519\u8bef\u3002 // package foo type errNotFound struct { file string } func ( e errNotFound ) Error () string { return fmt . Sprintf ( \"file %q not found\" , e . file ) } func IsNotFoundError ( err error ) bool { _ , ok := err .( errNotFound ) return ok } func Open ( file string ) error { return errNotFound { file : file } } // package bar if err := foo . Open ( \"foo\" ); err != nil { if foo . IsNotFoundError ( err ) { // handle } else { panic ( \"unknown error\" ) } }","title":"\u9519\u8bef\u7c7b\u578b"},{"location":"specification/dev-specification/#error-wrapping","text":"\u4e00\u4e2a\uff08\u51fd\u6570/\u65b9\u6cd5\uff09\u8c03\u7528\u5931\u8d25\u65f6\uff0c\u6709\u4e09\u79cd\u4e3b\u8981\u7684\u9519\u8bef\u4f20\u64ad\u65b9\u5f0f\uff1a \u5982\u679c\u6ca1\u6709\u8981\u6dfb\u52a0\u7684\u5176\u4ed6\u4e0a\u4e0b\u6587\uff0c\u5e76\u4e14\u60a8\u60f3\u8981\u7ef4\u62a4\u539f\u59cb\u9519\u8bef\u7c7b\u578b\uff0c\u5219\u8fd4\u56de\u539f\u59cb\u9519\u8bef\u3002 \u6dfb\u52a0\u4e0a\u4e0b\u6587\uff0c\u4f7f\u7528 [ \"pkg/errors\".Wrap ] \u4ee5\u4fbf\u9519\u8bef\u6d88\u606f\u63d0\u4f9b\u66f4\u591a\u4e0a\u4e0b\u6587 ,[ \"pkg/errors\".Cause ] \u53ef\u7528\u4e8e\u63d0\u53d6\u539f\u59cb\u9519\u8bef\u3002 \u5982\u679c\u8c03\u7528\u8005\u4e0d\u9700\u8981\u68c0\u6d4b\u6216\u5904\u7406\u7684\u7279\u5b9a\u9519\u8bef\u60c5\u51b5\uff0c\u4f7f\u7528 [ fmt.Errorf ]\u3002 \u5efa\u8bae\u5728\u53ef\u80fd\u7684\u5730\u65b9\u6dfb\u52a0\u4e0a\u4e0b\u6587\uff0c\u4ee5\u4f7f\u60a8\u83b7\u5f97\u8bf8\u5982\u201c\u8c03\u7528\u670d\u52a1 foo\uff1a\u8fde\u63a5\u88ab\u62d2\u7edd\u201d\u4e4b\u7c7b\u7684\u66f4\u6709\u7528\u7684\u9519\u8bef\uff0c\u800c\u4e0d\u662f\u8bf8\u5982\u201c\u8fde\u63a5\u88ab\u62d2\u7edd\u201d\u4e4b\u7c7b\u7684\u6a21\u7cca\u9519\u8bef\u3002 \u5728\u5c06\u4e0a\u4e0b\u6587\u6dfb\u52a0\u5230\u8fd4\u56de\u7684\u9519\u8bef\u65f6\uff0c\u8bf7\u907f\u514d\u4f7f\u7528\u201cfailed to\u201d\u4e4b\u7c7b\u7684\u77ed\u8bed\u4ee5\u4fdd\u6301\u4e0a\u4e0b\u6587\u7b80\u6d01\uff0c\u8fd9\u4e9b\u77ed\u8bed\u4f1a\u9648\u8ff0\u660e\u663e\u7684\u5185\u5bb9\uff0c\u5e76\u968f\u7740\u9519\u8bef\u5728\u5806\u6808\u4e2d\u7684\u6e17\u900f\u800c\u9010\u6e10\u5806\u79ef\uff1a Bad Good s , err := store . New () if err != nil { return fmt . Errorf ( \"failed to create new store: %s\" , err ) } s , err := store . New () if err != nil { return fmt . Errorf ( \"new store: %s\" , err ) } failed to x: failed to y: failed to create new store: the error x: y: new store: the error \u4f46\u662f\uff0c\u4e00\u65e6\u5c06\u9519\u8bef\u53d1\u9001\u5230\u53e6\u4e00\u4e2a\u7cfb\u7edf\uff0c\u5c31\u5e94\u8be5\u660e\u786e\u6d88\u606f\u662f\u9519\u8bef\u6d88\u606f\uff08\u4f8b\u5982\u4f7f\u7528 err \u6807\u8bb0\uff0c\u6216\u5728\u65e5\u5fd7\u4e2d\u4ee5\u201dFailed\u201d\u4e3a\u524d\u7f00\uff09\u3002 \u53e6\u8bf7\u53c2\u89c1 Don\u2019t just check errors, handle them gracefully . \u4e0d\u8981\u53ea\u662f\u68c0\u67e5\u9519\u8bef\uff0c\u8981\u4f18\u96c5\u5730\u5904\u7406\u9519\u8bef","title":"\u9519\u8bef\u5305\u88c5 (Error Wrapping)"},{"location":"specification/dev-specification/#_4","text":"type assertion \u7684\u5355\u4e2a\u8fd4\u56de\u503c\u5f62\u5f0f\u9488\u5bf9\u4e0d\u6b63\u786e\u7684\u7c7b\u578b\u5c06\u4ea7\u751f panic\u3002\u56e0\u6b64\uff0c\u8bf7\u59cb\u7ec8\u4f7f\u7528\u201ccomma ok\u201d\u7684\u60ef\u7528\u6cd5\u3002 Bad Good t := i .( string ) t , ok := i .( string ) if ! ok { // \u4f18\u96c5\u5730\u5904\u7406\u9519\u8bef }","title":"\u5904\u7406\u7c7b\u578b\u65ad\u8a00\u5931\u8d25"},{"location":"specification/dev-specification/#panic","text":"\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u8fd0\u884c\u7684\u4ee3\u7801\u5fc5\u987b\u907f\u514d\u51fa\u73b0 panic\u3002panic \u662f cascading failures \u7ea7\u8054\u5931\u8d25\u7684\u4e3b\u8981\u6839\u6e90 \u3002\u5982\u679c\u53d1\u751f\u9519\u8bef\uff0c\u8be5\u51fd\u6570\u5fc5\u987b\u8fd4\u56de\u9519\u8bef\uff0c\u5e76\u5141\u8bb8\u8c03\u7528\u65b9\u51b3\u5b9a\u5982\u4f55\u5904\u7406\u5b83\u3002 Bad Good func run ( args [] string ) { if len ( args ) == 0 { panic ( \"an argument is required\" ) } // ... } func main () { run ( os . Args [ 1 :]) } func run ( args [] string ) error { if len ( args ) == 0 { return errors . New ( \"an argument is required\" ) } // ... return nil } func main () { if err := run ( os . Args [ 1 :]); err != nil { fmt . Fprintln ( os . Stderr , err ) os . Exit ( 1 ) } } panic/recover \u4e0d\u662f\u9519\u8bef\u5904\u7406\u7b56\u7565\u3002\u4ec5\u5f53\u53d1\u751f\u4e0d\u53ef\u6062\u590d\u7684\u4e8b\u60c5\uff08\u4f8b\u5982\uff1anil \u5f15\u7528\uff09\u65f6\uff0c\u7a0b\u5e8f\u624d\u5fc5\u987b panic\u3002\u7a0b\u5e8f\u521d\u59cb\u5316\u662f\u4e00\u4e2a\u4f8b\u5916\uff1a\u7a0b\u5e8f\u542f\u52a8\u65f6\u5e94\u4f7f\u7a0b\u5e8f\u4e2d\u6b62\u7684\u4e0d\u826f\u60c5\u51b5\u53ef\u80fd\u4f1a\u5f15\u8d77 panic\u3002 var _statusTemplate = template . Must ( template . New ( \"name\" ). Parse ( \"_statusHTML\" )) \u5373\u4f7f\u5728\u6d4b\u8bd5\u4ee3\u7801\u4e2d\uff0c\u4e5f\u4f18\u5148\u4f7f\u7528 t.Fatal \u6216\u8005 t.FailNow \u800c\u4e0d\u662f panic \u6765\u786e\u4fdd\u5931\u8d25\u88ab\u6807\u8bb0\u3002 Bad Good // func TestFoo(t *testing.T) f , err := ioutil . TempFile ( \"\" , \"test\" ) if err != nil { panic ( \"failed to set up test\" ) } // func TestFoo(t *testing.T) f , err := ioutil . TempFile ( \"\" , \"test\" ) if err != nil { t . Fatal ( \"failed to set up test\" ) }","title":"\u4e0d\u8981 panic"},{"location":"specification/dev-specification/#gouberorgatomic","text":"\u4f7f\u7528 sync/atomic \u5305\u7684\u539f\u5b50\u64cd\u4f5c\u5bf9\u539f\u59cb\u7c7b\u578b ( int32 , int64 \u7b49\uff09\u8fdb\u884c\u64cd\u4f5c\uff0c\u56e0\u4e3a\u5f88\u5bb9\u6613\u5fd8\u8bb0\u4f7f\u7528\u539f\u5b50\u64cd\u4f5c\u6765\u8bfb\u53d6\u6216\u4fee\u6539\u53d8\u91cf\u3002 go.uber.org/atomic \u901a\u8fc7\u9690\u85cf\u57fa\u7840\u7c7b\u578b\u4e3a\u8fd9\u4e9b\u64cd\u4f5c\u589e\u52a0\u4e86\u7c7b\u578b\u5b89\u5168\u6027\u3002\u6b64\u5916\uff0c\u5b83\u5305\u62ec\u4e00\u4e2a\u65b9\u4fbf\u7684 atomic.Bool \u7c7b\u578b\u3002 Bad Good type foo struct { running int32 // atomic } func ( f * foo ) start () { if atomic . SwapInt32 ( & f . running , 1 ) == 1 { // already running\u2026 return } // start the Foo } func ( f * foo ) isRunning () bool { return f . running == 1 // race! } type foo struct { running atomic . Bool } func ( f * foo ) start () { if f . running . Swap ( true ) { // already running\u2026 return } // start the Foo } func ( f * foo ) isRunning () bool { return f . running . Load () }","title":"\u4f7f\u7528 go.uber.org/atomic"},{"location":"specification/dev-specification/#_5","text":"\u4f7f\u7528\u9009\u62e9\u4f9d\u8d56\u6ce8\u5165\u65b9\u5f0f\u907f\u514d\u6539\u53d8\u5168\u5c40\u53d8\u91cf\u3002 \u65e2\u9002\u7528\u4e8e\u51fd\u6570\u6307\u9488\u53c8\u9002\u7528\u4e8e\u5176\u4ed6\u503c\u7c7b\u578b Bad Good // sign.go var _timeNow = time . Now func sign ( msg string ) string { now := _timeNow () return signWithTime ( msg , now ) } // sign.go type signer struct { now func () time . Time } func newSigner () * signer { return & signer { now : time . Now , } } func ( s * signer ) Sign ( msg string ) string { now := s . now () return signWithTime ( msg , now ) } // sign_test.go func TestSign ( t * testing . T ) { oldTimeNow := _timeNow _timeNow = func () time . Time { return someFixedTime } defer func () { _timeNow = oldTimeNow }() assert . Equal ( t , want , sign ( give )) } // sign_test.go func TestSigner ( t * testing . T ) { s := newSigner () s . now = func () time . Time { return someFixedTime } assert . Equal ( t , want , s . Sign ( give )) }","title":"\u907f\u514d\u53ef\u53d8\u5168\u5c40\u53d8\u91cf"},{"location":"specification/dev-specification/#_6","text":"\u8fd9\u4e9b\u5d4c\u5165\u7684\u7c7b\u578b\u6cc4\u6f0f\u5b9e\u73b0\u7ec6\u8282\u3001\u7981\u6b62\u7c7b\u578b\u6f14\u5316\u548c\u6a21\u7cca\u7684\u6587\u6863\u3002 \u5047\u8bbe\u60a8\u4f7f\u7528\u5171\u4eab\u7684 AbstractList \u5b9e\u73b0\u4e86\u591a\u79cd\u5217\u8868\u7c7b\u578b\uff0c\u8bf7\u907f\u514d\u5728\u5177\u4f53\u7684\u5217\u8868\u5b9e\u73b0\u4e2d\u5d4c\u5165 AbstractList \u3002 \u76f8\u53cd\uff0c\u53ea\u9700\u624b\u52a8\u5c06\u65b9\u6cd5\u5199\u5165\u5177\u4f53\u7684\u5217\u8868\uff0c\u8be5\u5217\u8868\u5c06\u59d4\u6258\u7ed9\u62bd\u8c61\u5217\u8868\u3002 type AbstractList struct {} // \u6dfb\u52a0\u5c06\u5b9e\u4f53\u6dfb\u52a0\u5230\u5217\u8868\u4e2d\u3002 func ( l * AbstractList ) Add ( e Entity ) { // ... } // \u79fb\u9664\u4ece\u5217\u8868\u4e2d\u79fb\u9664\u5b9e\u4f53\u3002 func ( l * AbstractList ) Remove ( e Entity ) { // ... } Bad Good // ConcreteList \u662f\u4e00\u4e2a\u5b9e\u4f53\u5217\u8868\u3002 type ConcreteList struct { * AbstractList } // ConcreteList \u662f\u4e00\u4e2a\u5b9e\u4f53\u5217\u8868\u3002 type ConcreteList struct { list * AbstractList } // \u6dfb\u52a0\u5c06\u5b9e\u4f53\u6dfb\u52a0\u5230\u5217\u8868\u4e2d\u3002 func ( l * ConcreteList ) Add ( e Entity ) { return l . list . Add ( e ) } // \u79fb\u9664\u4ece\u5217\u8868\u4e2d\u79fb\u9664\u5b9e\u4f53\u3002 func ( l * ConcreteList ) Remove ( e Entity ) { return l . list . Remove ( e ) } Go \u5141\u8bb8 \u7c7b\u578b\u5d4c\u5165 \u4f5c\u4e3a\u7ee7\u627f\u548c\u7ec4\u5408\u4e4b\u95f4\u7684\u6298\u8877\u3002 \u5916\u90e8\u7c7b\u578b\u83b7\u53d6\u5d4c\u5165\u7c7b\u578b\u7684\u65b9\u6cd5\u7684\u9690\u5f0f\u526f\u672c\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u59d4\u6258\u7ed9\u5d4c\u5165\u5b9e\u4f8b\u7684\u540c\u4e00\u65b9\u6cd5\u3002 \u7ed3\u6784\u8fd8\u83b7\u5f97\u4e0e\u7c7b\u578b\u540c\u540d\u7684\u5b57\u6bb5\u3002 \u6240\u4ee5\uff0c\u5982\u679c\u5d4c\u5165\u7684\u7c7b\u578b\u662f public\uff0c\u90a3\u4e48\u5b57\u6bb5\u662f public\u3002\u4e3a\u4e86\u4fdd\u6301\u5411\u540e\u517c\u5bb9\u6027\uff0c\u5916\u90e8\u7c7b\u578b\u7684\u6bcf\u4e2a\u672a\u6765\u7248\u672c\u90fd\u5fc5\u987b\u4fdd\u7559\u5d4c\u5165\u7c7b\u578b\u3002 \u5f88\u5c11\u9700\u8981\u5d4c\u5165\u7c7b\u578b\u3002 \u8fd9\u662f\u4e00\u79cd\u65b9\u4fbf\uff0c\u53ef\u4ee5\u5e2e\u52a9\u60a8\u907f\u514d\u7f16\u5199\u5197\u957f\u7684\u59d4\u6258\u65b9\u6cd5\u3002 \u5373\u4f7f\u5d4c\u5165\u517c\u5bb9\u7684\u62bd\u8c61\u5217\u8868 interface \uff0c\u800c\u4e0d\u662f\u7ed3\u6784\u4f53\uff0c\u8fd9\u5c06\u4e3a\u5f00\u53d1\u4eba\u5458\u63d0\u4f9b\u66f4\u5927\u7684\u7075\u6d3b\u6027\u6765\u6539\u53d8\u672a\u6765\uff0c\u4f46\u4ecd\u7136\u6cc4\u9732\u4e86\u5177\u4f53\u5217\u8868\u4f7f\u7528\u62bd\u8c61\u5b9e\u73b0\u7684\u7ec6\u8282\u3002 Bad Good // AbstractList \u662f\u5404\u79cd\u5b9e\u4f53\u5217\u8868\u7684\u901a\u7528\u5b9e\u73b0\u3002 type AbstractList interface { Add ( Entity ) Remove ( Entity ) } // ConcreteList \u662f\u4e00\u4e2a\u5b9e\u4f53\u5217\u8868\u3002 type ConcreteList struct { AbstractList } // ConcreteList \u662f\u4e00\u4e2a\u5b9e\u4f53\u5217\u8868\u3002 type ConcreteList struct { list * AbstractList } // \u6dfb\u52a0\u5c06\u5b9e\u4f53\u6dfb\u52a0\u5230\u5217\u8868\u4e2d\u3002 func ( l * ConcreteList ) Add ( e Entity ) { return l . list . Add ( e ) } // \u79fb\u9664\u4ece\u5217\u8868\u4e2d\u79fb\u9664\u5b9e\u4f53\u3002 func ( l * ConcreteList ) Remove ( e Entity ) { return l . list . Remove ( e ) } \u65e0\u8bba\u662f\u4f7f\u7528\u5d4c\u5165\u5f0f\u7ed3\u6784\u8fd8\u662f\u4f7f\u7528\u5d4c\u5165\u5f0f\u63a5\u53e3\uff0c\u5d4c\u5165\u5f0f\u7c7b\u578b\u90fd\u4f1a\u9650\u5236\u7c7b\u578b\u7684\u6f14\u5316. \u5411\u5d4c\u5165\u5f0f\u63a5\u53e3\u6dfb\u52a0\u65b9\u6cd5\u662f\u4e00\u4e2a\u7834\u574f\u6027\u7684\u6539\u53d8\u3002 \u5220\u9664\u5d4c\u5165\u7c7b\u578b\u662f\u4e00\u4e2a\u7834\u574f\u6027\u7684\u6539\u53d8\u3002 \u5373\u4f7f\u4f7f\u7528\u6ee1\u8db3\u76f8\u540c\u63a5\u53e3\u7684\u66ff\u4ee3\u65b9\u6cd5\u66ff\u6362\u5d4c\u5165\u7c7b\u578b\uff0c\u4e5f\u662f\u4e00\u4e2a\u7834\u574f\u6027\u7684\u6539\u53d8\u3002 \u5c3d\u7ba1\u7f16\u5199\u8fd9\u4e9b\u59d4\u6258\u65b9\u6cd5\u662f\u4e4f\u5473\u7684\uff0c\u4f46\u662f\u989d\u5916\u7684\u5de5\u4f5c\u9690\u85cf\u4e86\u5b9e\u73b0\u7ec6\u8282\uff0c\u7559\u4e0b\u4e86\u66f4\u591a\u7684\u66f4\u6539\u673a\u4f1a\uff0c\u8fd8\u6d88\u9664\u4e86\u5728\u6587\u6863\u4e2d\u53d1\u73b0\u5b8c\u6574\u5217\u8868\u63a5\u53e3\u7684\u95f4\u63a5\u6027\u64cd\u4f5c\u3002","title":"\u907f\u514d\u5728\u516c\u5171\u7ed3\u6784\u4e2d\u5d4c\u5165\u7c7b\u578b"},{"location":"specification/dev-specification/#_7","text":"Go\u8bed\u8a00\u89c4\u8303 language specification \u6982\u8ff0\u4e86\u51e0\u4e2a\u5185\u7f6e\u7684\uff0c \u4e0d\u5e94\u5728Go\u9879\u76ee\u4e2d\u4f7f\u7528\u7684\u540d\u79f0\u6807\u8bc6 predeclared identifiers \u3002 \u6839\u636e\u4e0a\u4e0b\u6587\u7684\u4e0d\u540c\uff0c\u5c06\u8fd9\u4e9b\u6807\u8bc6\u7b26\u4f5c\u4e3a\u540d\u79f0\u91cd\u590d\u4f7f\u7528\uff0c \u5c06\u5728\u5f53\u524d\u4f5c\u7528\u57df\uff08\u6216\u4efb\u4f55\u5d4c\u5957\u4f5c\u7528\u57df\uff09\u4e2d\u9690\u85cf\u539f\u59cb\u6807\u8bc6\u7b26\uff0c\u6216\u8005\u6df7\u6dc6\u4ee3\u7801\u3002 \u5728\u6700\u597d\u7684\u60c5\u51b5\u4e0b\uff0c\u7f16\u8bd1\u5668\u4f1a\u62a5\u9519\uff1b\u5728\u6700\u574f\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u6837\u7684\u4ee3\u7801\u53ef\u80fd\u4f1a\u5f15\u5165\u6f5c\u5728\u7684\u3001\u96be\u4ee5\u6062\u590d\u7684\u9519\u8bef\u3002 Bad Good var error string // `error` \u4f5c\u7528\u57df\u9690\u5f0f\u8986\u76d6 // or func handleErrorMessage ( error string ) { // `error` \u4f5c\u7528\u57df\u9690\u5f0f\u8986\u76d6 } var errorMessage string // `error` \u6307\u5411\u5185\u7f6e\u7684\u975e\u8986\u76d6 // or func handleErrorMessage ( msg string ) { // `error` \u6307\u5411\u5185\u7f6e\u7684\u975e\u8986\u76d6 } type Foo struct { // \u867d\u7136\u8fd9\u4e9b\u5b57\u6bb5\u5728\u6280\u672f\u4e0a\u4e0d\u6784\u6210\u9634\u5f71\uff0c\u4f46`error`\u6216`string`\u5b57\u7b26\u4e32\u7684\u91cd\u6620\u5c04\u73b0\u5728\u662f\u4e0d\u660e\u786e\u7684\u3002 error error string string } func ( f Foo ) Error () error { // `error` \u548c `f.error` \u5728\u89c6\u89c9\u4e0a\u662f\u76f8\u4f3c\u7684 return f . error } func ( f Foo ) String () string { // `string` and `f.string` \u5728\u89c6\u89c9\u4e0a\u662f\u76f8\u4f3c\u7684 return f . string } type Foo struct { // `error` and `string` \u73b0\u5728\u662f\u660e\u786e\u7684\u3002 err error str string } func ( f Foo ) Error () error { return f . err } func ( f Foo ) String () string { return f . str } \u6ce8\u610f\uff0c\u7f16\u8bd1\u5668\u5728\u4f7f\u7528\u9884\u5148\u5206\u9694\u7684\u6807\u8bc6\u7b26\u65f6\u4e0d\u4f1a\u751f\u6210\u9519\u8bef\uff0c \u4f46\u662f\u8bf8\u5982 go vet \u4e4b\u7c7b\u7684\u5de5\u5177\u4f1a\u6b63\u786e\u5730\u6307\u51fa\u8fd9\u4e9b\u548c\u5176\u4ed6\u60c5\u51b5\u4e0b\u7684\u9690\u5f0f\u95ee\u9898\u3002","title":"\u907f\u514d\u4f7f\u7528\u5185\u7f6e\u540d\u79f0"},{"location":"specification/dev-specification/#init","text":"\u5c3d\u53ef\u80fd\u907f\u514d\u4f7f\u7528 init() \u3002\u5f53 init() \u662f\u4e0d\u53ef\u907f\u514d\u6216\u53ef\u53d6\u7684\uff0c\u4ee3\u7801\u5e94\u5148\u5c1d\u8bd5\uff1a \u65e0\u8bba\u7a0b\u5e8f\u73af\u5883\u6216\u8c03\u7528\u5982\u4f55\uff0c\u90fd\u8981\u5b8c\u5168\u786e\u5b9a\u3002 \u907f\u514d\u4f9d\u8d56\u4e8e\u5176\u4ed6 init() \u51fd\u6570\u7684\u987a\u5e8f\u6216\u526f\u4f5c\u7528\u3002\u867d\u7136 init() \u987a\u5e8f\u662f\u660e\u786e\u7684\uff0c\u4f46\u4ee3\u7801\u53ef\u4ee5\u66f4\u6539\uff0c \u56e0\u6b64 init() \u51fd\u6570\u4e4b\u95f4\u7684\u5173\u7cfb\u53ef\u80fd\u4f1a\u4f7f\u4ee3\u7801\u53d8\u5f97\u8106\u5f31\u548c\u5bb9\u6613\u51fa\u9519\u3002 \u907f\u514d\u8bbf\u95ee\u6216\u64cd\u4f5c\u5168\u5c40\u6216\u73af\u5883\u72b6\u6001\uff0c\u5982\u673a\u5668\u4fe1\u606f\u3001\u73af\u5883\u53d8\u91cf\u3001\u5de5\u4f5c\u76ee\u5f55\u3001\u7a0b\u5e8f\u53c2\u6570/\u8f93\u5165\u7b49\u3002 \u907f\u514d I/O \uff0c\u5305\u62ec\u6587\u4ef6\u7cfb\u7edf\u3001\u7f51\u7edc\u548c\u7cfb\u7edf\u8c03\u7528\u3002 \u4e0d\u80fd\u6ee1\u8db3\u8fd9\u4e9b\u8981\u6c42\u7684\u4ee3\u7801\u53ef\u80fd\u5c5e\u4e8e\u8981\u4f5c\u4e3a main() \u8c03\u7528\u7684\u4e00\u90e8\u5206\uff08\u6216\u7a0b\u5e8f\u751f\u547d\u5468\u671f\u4e2d\u7684\u5176\u4ed6\u5730\u65b9\uff09\uff0c \u6216\u8005\u4f5c\u4e3a main() \u672c\u8eab\u7684\u4e00\u90e8\u5206\u5199\u5165\u3002\u7279\u522b\u662f\uff0c\u6253\u7b97\u7531\u5176\u4ed6\u7a0b\u5e8f\u4f7f\u7528\u7684\u5e93\u5e94\u8be5\u7279\u522b\u6ce8\u610f\u5b8c\u5168\u786e\u5b9a\u6027\uff0c \u800c\u4e0d\u662f\u6267\u884c\u201cinit magic\u201d Bad Good type Foo struct { // ... } var _defaultFoo Foo func init () { _defaultFoo = Foo { // ... } } var _defaultFoo = Foo { // ... } // or, \u4e3a\u4e86\u66f4\u597d\u7684\u53ef\u6d4b\u8bd5\u6027: var _defaultFoo = defaultFoo () func defaultFoo () Foo { return Foo { // ... } } type Config struct { // ... } var _config Config func init () { // Bad: \u57fa\u4e8e\u5f53\u524d\u76ee\u5f55 cwd , _ := os . Getwd () // Bad: I/O raw , _ := ioutil . ReadFile ( path . Join ( cwd , \"config\" , \"config.yaml\" ), ) yaml . Unmarshal ( raw , & _config ) } type Config struct { // ... } func loadConfig () Config { cwd , err := os . Getwd () // handle err raw , err := ioutil . ReadFile ( path . Join ( cwd , \"config\" , \"config.yaml\" ), ) // handle err var config Config yaml . Unmarshal ( raw , & config ) return config } \u8003\u8651\u5230\u4e0a\u8ff0\u60c5\u51b5\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c init() \u53ef\u80fd\u66f4\u53ef\u53d6\u6216\u662f\u5fc5\u8981\u7684\uff0c\u53ef\u80fd\u5305\u62ec\uff1a \u4e0d\u80fd\u8868\u793a\u4e3a\u5355\u4e2a\u8d4b\u503c\u7684\u590d\u6742\u8868\u8fbe\u5f0f\u3002 \u53ef\u63d2\u5165\u7684\u94a9\u5b50\uff0c\u5982 database/sql \u3001\u7f16\u7801\u7c7b\u578b\u6ce8\u518c\u8868\u7b49\u3002 \u5bf9 Google Cloud Functions \u548c\u5176\u4ed6\u5f62\u5f0f\u7684\u786e\u5b9a\u6027\u9884\u8ba1\u7b97\u7684\u4f18\u5316\u3002","title":"\u907f\u514d\u4f7f\u7528 init()"},{"location":"specification/dev-specification/#_8","text":"\u8ffd\u52a0\u65f6\u4f18\u5148\u6307\u5b9a\u5207\u7247\u5bb9\u91cf \u5728\u5c3d\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\uff0c\u5728\u521d\u59cb\u5316\u8981\u8ffd\u52a0\u7684\u5207\u7247\u65f6\u4e3a make() \u63d0\u4f9b\u4e00\u4e2a\u5bb9\u91cf\u503c\u3002 Bad Good for n := 0 ; n < b . N ; n ++ { data := make ([] int , 0 ) for k := 0 ; k < size ; k ++ { data = append ( data , k ) } } for n := 0 ; n < b . N ; n ++ { data := make ([] int , 0 , size ) for k := 0 ; k < size ; k ++ { data = append ( data , k ) } } BenchmarkBad-4 100000000 2.48s BenchmarkGood-4 100000000 0.21s","title":"\u8ffd\u52a0\u65f6\u4f18\u5148\u6307\u5b9a\u5207\u7247\u5bb9\u91cf"},{"location":"specification/dev-specification/#_9","text":"\u6027\u80fd\u65b9\u9762\u7684\u7279\u5b9a\u51c6\u5219\u53ea\u9002\u7528\u4e8e\u9ad8\u9891\u573a\u666f\u3002","title":"\u6027\u80fd"},{"location":"specification/dev-specification/#strconv-fmt","text":"\u5c06\u539f\u8bed\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u6216\u4ece\u5b57\u7b26\u4e32\u8f6c\u6362\u65f6\uff0c strconv \u901f\u5ea6\u6bd4 fmt \u5feb\u3002 Bad Good for i := 0 ; i < b . N ; i ++ { s := fmt . Sprint ( rand . Int ()) } for i := 0 ; i < b . N ; i ++ { s := strconv . Itoa ( rand . Int ()) } BenchmarkFmtSprint-4 143 ns/op 2 allocs/op BenchmarkStrconv-4 64.2 ns/op 1 allocs/op","title":"\u4f18\u5148\u4f7f\u7528 strconv \u800c\u4e0d\u662f fmt"},{"location":"specification/dev-specification/#_10","text":"\u4e0d\u8981\u53cd\u590d\u4ece\u56fa\u5b9a\u5b57\u7b26\u4e32\u521b\u5efa\u5b57\u8282 slice\u3002\u76f8\u53cd\uff0c\u8bf7\u6267\u884c\u4e00\u6b21\u8f6c\u6362\u5e76\u6355\u83b7\u7ed3\u679c\u3002 Bad Good for i := 0 ; i < b . N ; i ++ { w . Write ([] byte ( \"Hello world\" )) } data := [] byte ( \"Hello world\" ) for i := 0 ; i < b . N ; i ++ { w . Write ( data ) } BenchmarkBad-4 50000000 22.2 ns/op BenchmarkGood-4 500000000 3.25 ns/op","title":"\u907f\u514d\u5b57\u7b26\u4e32\u5230\u5b57\u8282\u7684\u8f6c\u6362"},{"location":"specification/dev-specification/#_11","text":"\u5c3d\u53ef\u80fd\u6307\u5b9a\u5bb9\u5668\u5bb9\u91cf\uff0c\u4ee5\u4fbf\u4e3a\u5bb9\u5668\u9884\u5148\u5206\u914d\u5185\u5b58\u3002\u8fd9\u5c06\u5728\u6dfb\u52a0\u5143\u7d20\u65f6\u6700\u5c0f\u5316\u540e\u7eed\u5206\u914d\uff08\u901a\u8fc7\u590d\u5236\u548c\u8c03\u6574\u5bb9\u5668\u5927\u5c0f\uff09\u3002","title":"\u6307\u5b9a\u5bb9\u5668\u5bb9\u91cf"},{"location":"specification/dev-specification/#map","text":"\u5728\u5c3d\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\uff0c\u5728\u4f7f\u7528 make() \u521d\u59cb\u5316\u7684\u65f6\u5019\u63d0\u4f9b\u5bb9\u91cf\u4fe1\u606f make ( map [ T1 ] T2 , hint ) \u5411 make() \u63d0\u4f9b\u5bb9\u91cf\u63d0\u793a\u4f1a\u5728\u521d\u59cb\u5316\u65f6\u5c1d\u8bd5\u8c03\u6574map\u7684\u5927\u5c0f\uff0c\u8fd9\u5c06\u51cf\u5c11\u5728\u5c06\u5143\u7d20\u6dfb\u52a0\u5230map\u65f6\u4e3amap\u91cd\u65b0\u5206\u914d\u5185\u5b58\u3002 \u6ce8\u610f\uff0c\u4e0eslices\u4e0d\u540c\u3002map capacity\u63d0\u793a\u5e76\u4e0d\u4fdd\u8bc1\u5b8c\u5168\u7684\u62a2\u5360\u5f0f\u5206\u914d\uff0c\u800c\u662f\u7528\u4e8e\u4f30\u8ba1\u6240\u9700\u7684hashmap bucket\u7684\u6570\u91cf\u3002 \u56e0\u6b64\uff0c\u5728\u5c06\u5143\u7d20\u6dfb\u52a0\u5230map\u65f6\uff0c\u751a\u81f3\u5728\u6307\u5b9amap\u5bb9\u91cf\u65f6\uff0c\u4ecd\u53ef\u80fd\u53d1\u751f\u5206\u914d\u3002 Bad Good m := make ( map [ string ] os . FileInfo ) files , _ := ioutil . ReadDir ( \"./files\" ) for _ , f := range files { m [ f . Name ()] = f } files , _ := ioutil . ReadDir ( \"./files\" ) m := make ( map [ string ] os . FileInfo , len ( files )) for _ , f := range files { m [ f . Name ()] = f } `m` \u662f\u5728\u6ca1\u6709\u5927\u5c0f\u63d0\u793a\u7684\u60c5\u51b5\u4e0b\u521b\u5efa\u7684\uff1b \u5728\u8fd0\u884c\u65f6\u53ef\u80fd\u4f1a\u6709\u66f4\u591a\u5206\u914d\u3002 `m` \u662f\u6709\u5927\u5c0f\u63d0\u793a\u521b\u5efa\u7684\uff1b\u5728\u8fd0\u884c\u65f6\u53ef\u80fd\u4f1a\u6709\u66f4\u5c11\u7684\u5206\u914d\u3002","title":"\u6307\u5b9aMap\u5bb9\u91cf\u63d0\u793a"},{"location":"specification/dev-specification/#_12","text":"\u5728\u5c3d\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\uff0c\u5728\u4f7f\u7528 make() \u521d\u59cb\u5316\u5207\u7247\u65f6\u63d0\u4f9b\u5bb9\u91cf\u4fe1\u606f\uff0c\u7279\u522b\u662f\u5728\u8ffd\u52a0\u5207\u7247\u65f6\u3002 make ([] T , length , capacity ) \u4e0emaps\u4e0d\u540c\uff0cslice capacity\u4e0d\u662f\u4e00\u4e2a\u63d0\u793a\uff1a\u7f16\u8bd1\u5668\u5c06\u4e3a\u63d0\u4f9b\u7ed9 make() \u7684slice\u7684\u5bb9\u91cf\u5206\u914d\u8db3\u591f\u7684\u5185\u5b58\uff0c \u8fd9\u610f\u5473\u7740\u540e\u7eed\u7684append()`\u64cd\u4f5c\u5c06\u5bfc\u81f4\u96f6\u5206\u914d\uff08\u76f4\u5230slice\u7684\u957f\u5ea6\u4e0e\u5bb9\u91cf\u5339\u914d\uff0c\u5728\u6b64\u4e4b\u540e\uff0c\u4efb\u4f55append\u90fd\u53ef\u80fd\u8c03\u6574\u5927\u5c0f\u4ee5\u5bb9\u7eb3\u5176\u4ed6\u5143\u7d20\uff09\u3002 Bad Good for n := 0 ; n < b . N ; n ++ { data := make ([] int , 0 ) for k := 0 ; k < size ; k ++ { data = append ( data , k ) } } for n := 0 ; n < b . N ; n ++ { data := make ([] int , 0 , size ) for k := 0 ; k < size ; k ++ { data = append ( data , k ) } } BenchmarkBad-4 100000000 2.48s BenchmarkGood-4 100000000 0.21s","title":"\u6307\u5b9a\u5207\u7247\u5bb9\u91cf"},{"location":"specification/dev-specification/#_13","text":"","title":"\u89c4\u8303"},{"location":"specification/dev-specification/#_14","text":"\u672c\u6587\u4e2d\u6982\u8ff0\u7684\u4e00\u4e9b\u6807\u51c6\u90fd\u662f\u5ba2\u89c2\u6027\u7684\u8bc4\u4f30\uff0c\u662f\u6839\u636e\u573a\u666f\u3001\u4e0a\u4e0b\u6587\u3001\u6216\u8005\u4e3b\u89c2\u6027\u7684\u5224\u65ad\uff1b \u4f46\u662f\u6700\u91cd\u8981\u7684\u662f\uff0c \u4fdd\u6301\u4e00\u81f4 . \u4e00\u81f4\u6027\u7684\u4ee3\u7801\u66f4\u5bb9\u6613\u7ef4\u62a4\u3001\u662f\u66f4\u5408\u7406\u7684\u3001\u9700\u8981\u66f4\u5c11\u7684\u5b66\u4e60\u6210\u672c\u3001\u5e76\u4e14\u968f\u7740\u65b0\u7684\u7ea6\u5b9a\u51fa\u73b0\u6216\u8005\u51fa\u73b0\u9519\u8bef\u540e\u66f4\u5bb9\u6613\u8fc1\u79fb\u3001\u66f4\u65b0\u3001\u4fee\u590d bug \u76f8\u53cd\uff0c\u5728\u4e00\u4e2a\u4ee3\u7801\u5e93\u4e2d\u5305\u542b\u591a\u4e2a\u5b8c\u5168\u4e0d\u540c\u6216\u51b2\u7a81\u7684\u4ee3\u7801\u98ce\u683c\u4f1a\u5bfc\u81f4\u7ef4\u62a4\u6210\u672c\u5f00\u9500\u3001\u4e0d\u786e\u5b9a\u6027\u548c\u8ba4\u77e5\u504f\u5dee\u3002\u6240\u6709\u8fd9\u4e9b\u90fd\u4f1a\u76f4\u63a5\u5bfc\u81f4\u901f\u5ea6\u964d\u4f4e\u3001\u4ee3\u7801\u5ba1\u67e5\u75db\u82e6\u3001\u800c\u4e14\u589e\u52a0 bug \u6570\u91cf\u3002 \u5c06\u8fd9\u4e9b\u6807\u51c6\u5e94\u7528\u4e8e\u4ee3\u7801\u5e93\u65f6\uff0c\u5efa\u8bae\u5728 package\uff08\u6216\u66f4\u5927\uff09\u7ea7\u522b\u8fdb\u884c\u66f4\u6539\uff0c\u5b50\u5305\u7ea7\u522b\u7684\u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7\u5c06\u591a\u4e2a\u6837\u5f0f\u5f15\u5165\u5230\u540c\u4e00\u4ee3\u7801\u4e2d\uff0c\u8fdd\u53cd\u4e86\u4e0a\u8ff0\u5173\u6ce8\u70b9\u3002","title":"\u4e00\u81f4\u6027"},{"location":"specification/dev-specification/#_15","text":"Go \u8bed\u8a00\u652f\u6301\u5c06\u76f8\u4f3c\u7684\u58f0\u660e\u653e\u5728\u4e00\u4e2a\u7ec4\u5185\u3002 Bad Good import \"a\" import \"b\" import ( \"a\" \"b\" ) \u8fd9\u540c\u6837\u9002\u7528\u4e8e\u5e38\u91cf\u3001\u53d8\u91cf\u548c\u7c7b\u578b\u58f0\u660e\uff1a Bad Good const a = 1 const b = 2 var a = 1 var b = 2 type Area float64 type Volume float64 const ( a = 1 b = 2 ) var ( a = 1 b = 2 ) type ( Area float64 Volume float64 ) \u4ec5\u5c06\u76f8\u5173\u7684\u58f0\u660e\u653e\u5728\u4e00\u7ec4\u3002\u4e0d\u8981\u5c06\u4e0d\u76f8\u5173\u7684\u58f0\u660e\u653e\u5728\u4e00\u7ec4\u3002 Bad Good type Operation int const ( Add Operation = iota + 1 Subtract Multiply ENV_VAR = \"MY_ENV\" ) type Operation int const ( Add Operation = iota + 1 Subtract Multiply ) const ENV_VAR = \"MY_ENV\" \u5206\u7ec4\u4f7f\u7528\u7684\u4f4d\u7f6e\u6ca1\u6709\u9650\u5236\uff0c\u4f8b\u5982\uff1a\u4f60\u53ef\u4ee5\u5728\u51fd\u6570\u5185\u90e8\u4f7f\u7528\u5b83\u4eec\uff1a Bad Good func f () string { var red = color . New ( 0xff0000 ) var green = color . New ( 0x00ff00 ) var blue = color . New ( 0x0000ff ) ... } func f () string { var ( red = color . New ( 0xff0000 ) green = color . New ( 0x00ff00 ) blue = color . New ( 0x0000ff ) ) ... }","title":"\u76f8\u4f3c\u7684\u58f0\u660e\u653e\u5728\u4e00\u7ec4"},{"location":"specification/dev-specification/#import","text":"\u5bfc\u5165\u5e94\u8be5\u5206\u4e3a\u4e24\u7ec4\uff1a \u6807\u51c6\u5e93 \u5176\u4ed6\u5e93 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8fd9\u662f goimports \u5e94\u7528\u7684\u5206\u7ec4\u3002 Bad Good import ( \"fmt\" \"os\" \"go.uber.org/atomic\" \"golang.org/x/sync/errgroup\" ) import ( \"fmt\" \"os\" \"go.uber.org/atomic\" \"golang.org/x/sync/errgroup\" )","title":"import \u5206\u7ec4"},{"location":"specification/dev-specification/#_16","text":"\u5f53\u547d\u540d\u5305\u65f6\uff0c\u8bf7\u6309\u4e0b\u9762\u89c4\u5219\u9009\u62e9\u4e00\u4e2a\u540d\u79f0\uff1a \u5168\u90e8\u5c0f\u5199\u3002\u6ca1\u6709\u5927\u5199\u6216\u4e0b\u5212\u7ebf\u3002 \u5927\u591a\u6570\u4f7f\u7528\u547d\u540d\u5bfc\u5165\u7684\u60c5\u51b5\u4e0b\uff0c\u4e0d\u9700\u8981\u91cd\u547d\u540d\u3002 \u7b80\u77ed\u800c\u7b80\u6d01\u3002\u8bf7\u8bb0\u4f4f\uff0c\u5728\u6bcf\u4e2a\u4f7f\u7528\u7684\u5730\u65b9\u90fd\u5b8c\u6574\u6807\u8bc6\u4e86\u8be5\u540d\u79f0\u3002 \u4e0d\u7528\u590d\u6570\u3002\u4f8b\u5982 net/url \uff0c\u800c\u4e0d\u662f net/urls \u3002 \u4e0d\u8981\u7528\u201ccommon\u201d\uff0c\u201cutil\u201d\uff0c\u201cshared\u201d\u6216\u201clib\u201d\u3002\u8fd9\u4e9b\u662f\u4e0d\u597d\u7684\uff0c\u4fe1\u606f\u91cf\u4e0d\u8db3\u7684\u540d\u79f0\u3002 \u53e6\u8bf7\u53c2\u9605 Package Names \u548c Go \u5305\u6837\u5f0f\u6307\u5357 .","title":"\u5305\u540d"},{"location":"specification/dev-specification/#_17","text":"\u6211\u4eec\u9075\u5faa Go \u793e\u533a\u5173\u4e8e\u4f7f\u7528 MixedCaps \u4f5c\u4e3a\u51fd\u6570\u540d \u7684\u7ea6\u5b9a\u3002\u6709\u4e00\u4e2a\u4f8b\u5916\uff0c\u4e3a\u4e86\u5bf9\u76f8\u5173\u7684\u6d4b\u8bd5\u7528\u4f8b\u8fdb\u884c\u5206\u7ec4\uff0c\u51fd\u6570\u540d\u53ef\u80fd\u5305\u542b\u4e0b\u5212\u7ebf\uff0c\u5982\uff1a TestMyFunction_WhatIsBeingTested .","title":"\u51fd\u6570\u540d"},{"location":"specification/dev-specification/#_18","text":"\u5982\u679c\u7a0b\u5e8f\u5305\u540d\u79f0\u4e0e\u5bfc\u5165\u8def\u5f84\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4e0d\u5339\u914d\uff0c\u5219\u5fc5\u987b\u4f7f\u7528\u5bfc\u5165\u522b\u540d\u3002 import ( \"net/http\" client \"example.com/client-go\" trace \"example.com/trace/v2\" ) \u5728\u6240\u6709\u5176\u4ed6\u60c5\u51b5\u4e0b\uff0c\u9664\u975e\u5bfc\u5165\u4e4b\u95f4\u6709\u76f4\u63a5\u51b2\u7a81\uff0c\u5426\u5219\u5e94\u907f\u514d\u5bfc\u5165\u522b\u540d\u3002 Bad Good import ( \"fmt\" \"os\" nettrace \"golang.net/x/trace\" ) import ( \"fmt\" \"os\" \"runtime/trace\" nettrace \"golang.net/x/trace\" )","title":"\u5bfc\u5165\u522b\u540d"},{"location":"specification/dev-specification/#_19","text":"\u51fd\u6570\u5e94\u6309\u7c97\u7565\u7684\u8c03\u7528\u987a\u5e8f\u6392\u5e8f\u3002 \u540c\u4e00\u6587\u4ef6\u4e2d\u7684\u51fd\u6570\u5e94\u6309\u63a5\u6536\u8005\u5206\u7ec4\u3002 \u56e0\u6b64\uff0c\u5bfc\u51fa\u7684\u51fd\u6570\u5e94\u5148\u51fa\u73b0\u5728\u6587\u4ef6\u4e2d\uff0c\u653e\u5728 struct , const , var \u5b9a\u4e49\u7684\u540e\u9762\u3002 \u5728\u5b9a\u4e49\u7c7b\u578b\u4e4b\u540e\uff0c\u4f46\u5728\u63a5\u6536\u8005\u7684\u5176\u4f59\u65b9\u6cd5\u4e4b\u524d\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u4e00\u4e2a newXYZ() / NewXYZ() \u7531\u4e8e\u51fd\u6570\u662f\u6309\u63a5\u6536\u8005\u5206\u7ec4\u7684\uff0c\u56e0\u6b64\u666e\u901a\u5de5\u5177\u51fd\u6570\u5e94\u5728\u6587\u4ef6\u672b\u5c3e\u51fa\u73b0\u3002 Bad Good func ( s * something ) Cost () { return calcCost ( s . weights ) } type something struct { ... } func calcCost ( n [] int ) int { ... } func ( s * something ) Stop () { ... } func newSomething () * something { return & something {} } type something struct { ... } func newSomething () * something { return & something {} } func ( s * something ) Cost () { return calcCost ( s . weights ) } func ( s * something ) Stop () { ... } func calcCost ( n [] int ) int { ... }","title":"\u51fd\u6570\u5206\u7ec4\u4e0e\u987a\u5e8f"},{"location":"specification/dev-specification/#_20","text":"\u4ee3\u7801\u5e94\u901a\u8fc7\u5c3d\u53ef\u80fd\u5148\u5904\u7406\u9519\u8bef\u60c5\u51b5/\u7279\u6b8a\u60c5\u51b5\u5e76\u5c3d\u65e9\u8fd4\u56de\u6216\u7ee7\u7eed\u5faa\u73af\u6765\u51cf\u5c11\u5d4c\u5957\u3002\u51cf\u5c11\u5d4c\u5957\u591a\u4e2a\u7ea7\u522b\u7684\u4ee3\u7801\u7684\u4ee3\u7801\u91cf\u3002 Bad Good for _ , v := range data { if v . F1 == 1 { v = process ( v ) if err := v . Call (); err == nil { v . Send () } else { return err } } else { log . Printf ( \"Invalid v: %v\" , v ) } } for _ , v := range data { if v . F1 != 1 { log . Printf ( \"Invalid v: %v\" , v ) continue } v = process ( v ) if err := v . Call (); err != nil { return err } v . Send () }","title":"\u51cf\u5c11\u5d4c\u5957"},{"location":"specification/dev-specification/#else","text":"\u5982\u679c\u5728 if \u7684\u4e24\u4e2a\u5206\u652f\u4e2d\u90fd\u8bbe\u7f6e\u4e86\u53d8\u91cf\uff0c\u5219\u53ef\u4ee5\u5c06\u5176\u66ff\u6362\u4e3a\u5355\u4e2a if\u3002 Bad Good var a int if b { a = 100 } else { a = 10 } a := 10 if b { a = 100 }","title":"\u4e0d\u5fc5\u8981\u7684 else"},{"location":"specification/dev-specification/#_21","text":"\u5728\u9876\u5c42\uff0c\u4f7f\u7528\u6807\u51c6 var \u5173\u952e\u5b57\u3002\u8bf7\u52ff\u6307\u5b9a\u7c7b\u578b\uff0c\u9664\u975e\u5b83\u4e0e\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\u4e0d\u540c\u3002 Bad Good var _s string = F () func F () string { return \"A\" } var _s = F () // \u7531\u4e8e F \u5df2\u7ecf\u660e\u786e\u4e86\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u56e0\u6b64\u6211\u4eec\u6ca1\u6709\u5fc5\u8981\u663e\u5f0f\u6307\u5b9a_s \u7684\u7c7b\u578b // \u8fd8\u662f\u90a3\u79cd\u7c7b\u578b func F () string { return \"A\" } \u5982\u679c\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\u4e0e\u6240\u9700\u7684\u7c7b\u578b\u4e0d\u5b8c\u5168\u5339\u914d\uff0c\u8bf7\u6307\u5b9a\u7c7b\u578b\u3002 type myError struct {} func ( myError ) Error () string { return \"error\" } func F () myError { return myError {} } var _e error = F () // F \u8fd4\u56de\u4e00\u4e2a myError \u7c7b\u578b\u7684\u5b9e\u4f8b\uff0c\u4f46\u662f\u6211\u4eec\u8981 error \u7c7b\u578b","title":"\u9876\u5c42\u53d8\u91cf\u58f0\u660e"},{"location":"specification/dev-specification/#_","text":"\u5728\u672a\u5bfc\u51fa\u7684\u9876\u7ea7 vars \u548c consts \uff0c \u524d\u9762\u52a0\u4e0a\u524d\u7f00_\uff0c\u4ee5\u4f7f\u5b83\u4eec\u5728\u4f7f\u7528\u65f6\u660e\u786e\u8868\u793a\u5b83\u4eec\u662f\u5168\u5c40\u7b26\u53f7\u3002 \u4f8b\u5916\uff1a\u672a\u5bfc\u51fa\u7684\u9519\u8bef\u503c\uff0c\u5e94\u4ee5 err \u5f00\u5934\u3002 \u57fa\u672c\u4f9d\u636e\uff1a\u9876\u7ea7\u53d8\u91cf\u548c\u5e38\u91cf\u5177\u6709\u5305\u8303\u56f4\u4f5c\u7528\u57df\u3002\u4f7f\u7528\u901a\u7528\u540d\u79f0\u53ef\u80fd\u5f88\u5bb9\u6613\u5728\u5176\u4ed6\u6587\u4ef6\u4e2d\u610f\u5916\u4f7f\u7528\u9519\u8bef\u7684\u503c\u3002 Bad Good // foo.go const ( defaultPort = 8080 defaultUser = \"user\" ) // bar.go func Bar () { defaultPort := 9090 ... fmt . Println ( \"Default port\" , defaultPort ) // We will not see a compile error if the first line of // Bar() is deleted. } // foo.go const ( _defaultPort = 8080 _defaultUser = \"user\" )","title":"\u5bf9\u4e8e\u672a\u5bfc\u51fa\u7684\u9876\u5c42\u5e38\u91cf\u548c\u53d8\u91cf\uff0c\u4f7f\u7528_\u4f5c\u4e3a\u524d\u7f00"},{"location":"specification/dev-specification/#_22","text":"\u5d4c\u5165\u5f0f\u7c7b\u578b\uff08\u4f8b\u5982 mutex\uff09\u5e94\u4f4d\u4e8e\u7ed3\u6784\u4f53\u5185\u7684\u5b57\u6bb5\u5217\u8868\u7684\u9876\u90e8\uff0c\u5e76\u4e14\u5fc5\u987b\u6709\u4e00\u4e2a\u7a7a\u884c\u5c06\u5d4c\u5165\u5f0f\u5b57\u6bb5\u4e0e\u5e38\u89c4\u5b57\u6bb5\u5206\u9694\u5f00\u3002 Bad Good type Client struct { version int http . Client } type Client struct { http . Client version int } \u5185\u5d4c\u5e94\u8be5\u63d0\u4f9b\u5207\u5b9e\u7684\u597d\u5904\uff0c\u6bd4\u5982\u4ee5\u8bed\u4e49\u4e0a\u5408\u9002\u7684\u65b9\u5f0f\u6dfb\u52a0\u6216\u589e\u5f3a\u529f\u80fd\u3002 \u5b83\u5e94\u8be5\u5728\u5bf9\u7528\u6237\u4e0d\u5229\u5f71\u54cd\u7684\u60c5\u51b5\u4e0b\u5b8c\u6210\u8fd9\u9879\u5de5\u4f5c\uff08\u53e6\u8bf7\u53c2\u89c1\uff1a \u907f\u514d\u5728\u516c\u5171\u7ed3\u6784\u4e2d\u5d4c\u5165\u7c7b\u578b Avoid Embedding Types in Public Structs \uff09\u3002 \u5d4c\u5165 \u4e0d\u5e94\u8be5 : \u7eaf\u7cb9\u662f\u4e3a\u4e86\u7f8e\u89c2\u6216\u65b9\u4fbf\u3002 \u4f7f\u5916\u90e8\u7c7b\u578b\u66f4\u96be\u6784\u9020\u6216\u4f7f\u7528\u3002 \u5f71\u54cd\u5916\u90e8\u7c7b\u578b\u7684\u96f6\u503c\u3002\u5982\u679c\u5916\u90e8\u7c7b\u578b\u6709\u4e00\u4e2a\u6709\u7528\u7684\u96f6\u503c\uff0c\u5219\u5728\u5d4c\u5165\u5185\u90e8\u7c7b\u578b\u4e4b\u540e\u5e94\u8be5\u4ecd\u7136\u6709\u4e00\u4e2a\u6709\u7528\u7684\u96f6\u503c\u3002 \u4f5c\u4e3a\u5d4c\u5165\u5185\u90e8\u7c7b\u578b\u7684\u526f\u4f5c\u7528\uff0c\u4ece\u5916\u90e8\u7c7b\u578b\u516c\u5f00\u4e0d\u76f8\u5173\u7684\u51fd\u6570\u6216\u5b57\u6bb5\u3002 \u516c\u5f00\u672a\u5bfc\u51fa\u7684\u7c7b\u578b\u3002 \u5f71\u54cd\u5916\u90e8\u7c7b\u578b\u7684\u590d\u5236\u5f62\u5f0f\u3002 \u66f4\u6539\u5916\u90e8\u7c7b\u578b\u7684API\u6216\u7c7b\u578b\u8bed\u4e49\u3002 \u5d4c\u5165\u5185\u90e8\u7c7b\u578b\u7684\u975e\u89c4\u8303\u5f62\u5f0f\u3002 \u516c\u5f00\u5916\u90e8\u7c7b\u578b\u7684\u5b9e\u73b0\u8be6\u7ec6\u4fe1\u606f\u3002 \u5141\u8bb8\u7528\u6237\u89c2\u5bdf\u6216\u63a7\u5236\u7c7b\u578b\u5185\u90e8\u3002 \u901a\u8fc7\u5305\u88c5\u7684\u65b9\u5f0f\u6539\u53d8\u5185\u90e8\u51fd\u6570\u7684\u4e00\u822c\u884c\u4e3a\uff0c\u8fd9\u79cd\u5305\u88c5\u65b9\u5f0f\u4f1a\u7ed9\u7528\u6237\u5e26\u6765\u4e00\u4e9b\u610f\u6599\u4e4b\u5916\u60c5\u51b5\u3002 \u7b80\u5355\u5730\u8bf4\uff0c\u6709\u610f\u8bc6\u5730\u548c\u6709\u76ee\u7684\u5730\u5d4c\u5165\u3002\u4e00\u79cd\u5f88\u597d\u7684\u6d4b\u8bd5\u4f53\u9a8c\u662f\uff0c \u201c\u662f\u5426\u6240\u6709\u8fd9\u4e9b\u5bfc\u51fa\u7684\u5185\u90e8\u65b9\u6cd5/\u5b57\u6bb5\u90fd\u5c06\u76f4\u63a5\u6dfb\u52a0\u5230\u5916\u90e8\u7c7b\u578b\u201d \u5982\u679c\u7b54\u6848\u662f some \u6216 no \uff0c\u4e0d\u8981\u5d4c\u5165\u5185\u90e8\u7c7b\u578b-\u800c\u662f\u4f7f\u7528\u5b57\u6bb5\u3002 Bad Good type A struct { // Bad: A.Lock() and A.Unlock() \u73b0\u5728\u53ef\u7528 // \u4e0d\u63d0\u4f9b\u4efb\u4f55\u529f\u80fd\u6027\u597d\u5904\uff0c\u5e76\u5141\u8bb8\u7528\u6237\u63a7\u5236\u6709\u5173A\u7684\u5185\u90e8\u7ec6\u8282\u3002 sync . Mutex } type countingWriteCloser struct { // Good: Write() \u5728\u5916\u5c42\u63d0\u4f9b\u7528\u4e8e\u7279\u5b9a\u76ee\u7684\uff0c // \u5e76\u4e14\u59d4\u6258\u5de5\u4f5c\u5230\u5185\u90e8\u7c7b\u578b\u7684Write()\u4e2d\u3002 io . WriteCloser count int } func ( w * countingWriteCloser ) Write ( bs [] byte ) ( int , error ) { w . count += len ( bs ) return w . WriteCloser . Write ( bs ) } type Book struct { // Bad: \u6307\u9488\u66f4\u6539\u96f6\u503c\u7684\u6709\u7528\u6027 io . ReadWriter // other fields } // later var b Book b . Read ( ... ) // panic: nil pointer b . String () // panic: nil pointer b . Write ( ... ) // panic: nil pointer type Book struct { // Good: \u6709\u7528\u7684\u96f6\u503c bytes . Buffer // other fields } // later var b Book b . Read ( ... ) // ok b . String () // ok b . Write ( ... ) // ok type Client struct { sync . Mutex sync . WaitGroup bytes . Buffer url . URL } type Client struct { mtx sync . Mutex wg sync . WaitGroup buf bytes . Buffer url url . URL }","title":"\u7ed3\u6784\u4f53\u4e2d\u7684\u5d4c\u5165"},{"location":"specification/dev-specification/#_23","text":"\u521d\u59cb\u5316\u7ed3\u6784\u4f53\u65f6\uff0c\u5e94\u8be5\u6307\u5b9a\u5b57\u6bb5\u540d\u79f0\u3002\u73b0\u5728\u7531 [ go vet ] \u5f3a\u5236\u6267\u884c\u3002 Bad Good k := User { \"John\" , \"Doe\" , true } k := User { FirstName : \"John\" , LastName : \"Doe\" , Admin : true , } \u4f8b\u5916\uff1a\u5982\u679c\u6709 3 \u4e2a\u6216\u66f4\u5c11\u7684\u5b57\u6bb5\uff0c\u5219\u53ef\u4ee5\u5728\u6d4b\u8bd5\u8868\u4e2d\u7701\u7565\u5b57\u6bb5\u540d\u79f0\u3002 tests := [] struct { op Operation want string }{ { Add , \"add\" }, { Subtract , \"subtract\" }, }","title":"\u4f7f\u7528\u5b57\u6bb5\u540d\u521d\u59cb\u5316\u7ed3\u6784\u4f53"},{"location":"specification/dev-specification/#_24","text":"\u5982\u679c\u5c06\u53d8\u91cf\u660e\u786e\u8bbe\u7f6e\u4e3a\u67d0\u4e2a\u503c\uff0c\u5219\u5e94\u4f7f\u7528\u77ed\u53d8\u91cf\u58f0\u660e\u5f62\u5f0f ( := )\u3002 Bad Good var s = \"foo\" s := \"foo\" \u4f46\u662f\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c var \u4f7f\u7528\u5173\u952e\u5b57\u65f6\u9ed8\u8ba4\u503c\u4f1a\u66f4\u6e05\u6670\u3002\u4f8b\u5982\uff0c\u58f0\u660e\u7a7a\u5207\u7247\u3002 Bad Good func f ( list [] int ) { filtered := [] int {} for _ , v := range list { if v > 10 { filtered = append ( filtered , v ) } } } func f ( list [] int ) { var filtered [] int for _ , v := range list { if v > 10 { filtered = append ( filtered , v ) } } }","title":"\u672c\u5730\u53d8\u91cf\u58f0\u660e"},{"location":"specification/dev-specification/#nil-slice","text":"nil \u662f\u4e00\u4e2a\u6709\u6548\u7684\u957f\u5ea6\u4e3a 0 \u7684 slice\uff0c\u8fd9\u610f\u5473\u7740\uff0c \u60a8\u4e0d\u5e94\u660e\u786e\u8fd4\u56de\u957f\u5ea6\u4e3a\u96f6\u7684\u5207\u7247\u3002\u5e94\u8be5\u8fd4\u56de nil \u6765\u4ee3\u66ff\u3002 Bad Good if x == \"\" { return [] int {} } if x == \"\" { return nil } \u8981\u68c0\u67e5\u5207\u7247\u662f\u5426\u4e3a\u7a7a\uff0c\u8bf7\u59cb\u7ec8\u4f7f\u7528 len(s) == 0 \u3002\u800c\u975e nil \u3002 Bad Good func isEmpty ( s [] string ) bool { return s == nil } func isEmpty ( s [] string ) bool { return len ( s ) == 0 } \u96f6\u503c\u5207\u7247\uff08\u7528 var \u58f0\u660e\u7684\u5207\u7247\uff09\u53ef\u7acb\u5373\u4f7f\u7528\uff0c\u65e0\u9700\u8c03\u7528 make() \u521b\u5efa\u3002 Bad Good nums := [] int {} // or, nums := make([]int) if add1 { nums = append ( nums , 1 ) } if add2 { nums = append ( nums , 2 ) } var nums [] int if add1 { nums = append ( nums , 1 ) } if add2 { nums = append ( nums , 2 ) } \u8bb0\u4f4f\uff0c\u867d\u7136nil\u5207\u7247\u662f\u6709\u6548\u7684\u5207\u7247\uff0c\u4f46\u5b83\u4e0d\u7b49\u4e8e\u957f\u5ea6\u4e3a0\u7684\u5207\u7247\uff08\u4e00\u4e2a\u4e3anil\uff0c\u53e6\u4e00\u4e2a\u4e0d\u662f\uff09\uff0c\u5e76\u4e14\u5728\u4e0d\u540c\u7684\u60c5\u51b5\u4e0b\uff08\u4f8b\u5982\u5e8f\u5217\u5316\uff09\uff0c\u8fd9\u4e24\u4e2a\u5207\u7247\u7684\u5904\u7406\u65b9\u5f0f\u53ef\u80fd\u4e0d\u540c\u3002","title":"nil \u662f\u4e00\u4e2a\u6709\u6548\u7684 slice"},{"location":"specification/dev-specification/#_25","text":"\u5982\u679c\u6709\u53ef\u80fd\uff0c\u5c3d\u91cf\u7f29\u5c0f\u53d8\u91cf\u4f5c\u7528\u8303\u56f4\u3002\u9664\u975e\u5b83\u4e0e \u51cf\u5c11\u5d4c\u5957 \u7684\u89c4\u5219\u51b2\u7a81\u3002 Bad Good err := ioutil . WriteFile ( name , data , 0644 ) if err != nil { return err } if err := ioutil . WriteFile ( name , data , 0644 ); err != nil { return err } \u5982\u679c\u9700\u8981\u5728 if \u4e4b\u5916\u4f7f\u7528\u51fd\u6570\u8c03\u7528\u7684\u7ed3\u679c\uff0c\u5219\u4e0d\u5e94\u5c1d\u8bd5\u7f29\u5c0f\u8303\u56f4\u3002 Bad Good if data , err := ioutil . ReadFile ( name ); err == nil { err = cfg . Decode ( data ) if err != nil { return err } fmt . Println ( cfg ) return nil } else { return err } data , err := ioutil . ReadFile ( name ) if err != nil { return err } if err := cfg . Decode ( data ); err != nil { return err } fmt . Println ( cfg ) return nil","title":"\u7f29\u5c0f\u53d8\u91cf\u4f5c\u7528\u57df"},{"location":"specification/dev-specification/#avoid-naked-parameters","text":"\u51fd\u6570\u8c03\u7528\u4e2d\u7684 \u610f\u4e49\u4e0d\u660e\u786e\u7684\u53c2\u6570 \u53ef\u80fd\u4f1a\u635f\u5bb3\u53ef\u8bfb\u6027\u3002\u5f53\u53c2\u6570\u540d\u79f0\u7684\u542b\u4e49\u4e0d\u660e\u663e\u65f6\uff0c\u8bf7\u4e3a\u53c2\u6570\u6dfb\u52a0 C \u6837\u5f0f\u6ce8\u91ca ( /* ... */ ) Bad Good // func printInfo(name string, isLocal, done bool) printInfo ( \"foo\" , true , true ) // func printInfo(name string, isLocal, done bool) printInfo ( \"foo\" , true /* isLocal */ , true /* done */ ) \u5bf9\u4e8e\u4e0a\u9762\u7684\u793a\u4f8b\u4ee3\u7801\uff0c\u8fd8\u6709\u4e00\u79cd\u66f4\u597d\u7684\u5904\u7406\u65b9\u5f0f\u662f\u5c06\u4e0a\u9762\u7684 bool \u7c7b\u578b\u6362\u6210\u81ea\u5b9a\u4e49\u7c7b\u578b\u3002\u5c06\u6765\uff0c\u8be5\u53c2\u6570\u53ef\u4ee5\u652f\u6301\u4e0d\u4ec5\u4ec5\u5c40\u9650\u4e8e\u4e24\u4e2a\u72b6\u6001\uff08true/false\uff09\u3002 type Region int const ( UnknownRegion Region = iota Local ) type Status int const ( StatusReady Status = iota + 1 StatusDone // Maybe we will have a StatusInProgress in the future. ) func printInfo ( name string , region Region , status Status )","title":"\u907f\u514d\u53c2\u6570\u8bed\u4e49\u4e0d\u660e\u786e(Avoid Naked Parameters)"},{"location":"specification/dev-specification/#_26","text":"Go \u652f\u6301\u4f7f\u7528 \u539f\u59cb\u5b57\u7b26\u4e32\u5b57\u9762\u503c \uff0c\u4e5f\u5c31\u662f \u201d ` \u201d \u6765\u8868\u793a\u539f\u751f\u5b57\u7b26\u4e32\uff0c\u5728\u9700\u8981\u8f6c\u4e49\u7684\u573a\u666f\u4e0b\uff0c\u6211\u4eec\u5e94\u8be5\u5c3d\u91cf\u4f7f\u7528\u8fd9\u79cd\u65b9\u6848\u6765\u66ff\u6362\u3002 \u53ef\u4ee5\u8de8\u8d8a\u591a\u884c\u5e76\u5305\u542b\u5f15\u53f7\u3002\u4f7f\u7528\u8fd9\u4e9b\u5b57\u7b26\u4e32\u53ef\u4ee5\u907f\u514d\u66f4\u96be\u9605\u8bfb\u7684\u624b\u5de5\u8f6c\u4e49\u7684\u5b57\u7b26\u4e32\u3002 Bad Good wantError := \"unknown name:\\\"test\\\"\" wantError := `unknown error:\"test\"`","title":"\u4f7f\u7528\u539f\u59cb\u5b57\u7b26\u4e32\u5b57\u9762\u503c\uff0c\u907f\u514d\u8f6c\u4e49"},{"location":"specification/dev-specification/#struct","text":"\u5728\u521d\u59cb\u5316\u7ed3\u6784\u5f15\u7528\u65f6\uff0c\u8bf7\u4f7f\u7528 &T{} \u4ee3\u66ff new(T) \uff0c\u4ee5\u4f7f\u5176\u4e0e\u7ed3\u6784\u4f53\u521d\u59cb\u5316\u4e00\u81f4\u3002 Bad Good sval := T { Name : \"foo\" } // inconsistent sptr := new ( T ) sptr . Name = \"bar\" sval := T { Name : \"foo\" } sptr := & T { Name : \"bar\" }","title":"\u521d\u59cb\u5316 Struct \u5f15\u7528"},{"location":"specification/dev-specification/#maps","text":"\u5bf9\u4e8e\u7a7a map \u8bf7\u4f7f\u7528 make(..) \u521d\u59cb\u5316\uff0c \u5e76\u4e14 map \u662f\u901a\u8fc7\u7f16\u7a0b\u65b9\u5f0f\u586b\u5145\u7684\u3002 \u8fd9\u4f7f\u5f97 map \u521d\u59cb\u5316\u5728\u8868\u73b0\u4e0a\u4e0d\u540c\u4e8e\u58f0\u660e\uff0c\u5e76\u4e14\u5b83\u8fd8\u53ef\u4ee5\u65b9\u4fbf\u5730\u5728 make \u540e\u6dfb\u52a0\u5927\u5c0f\u63d0\u793a\u3002 Bad Good var ( // m1 \u8bfb\u5199\u5b89\u5168; // m2 \u5728\u5199\u5165\u65f6\u4f1a panic m1 = map [ T1 ] T2 {} m2 map [ T1 ] T2 ) var ( // m1 \u8bfb\u5199\u5b89\u5168; // m2 \u5728\u5199\u5165\u65f6\u4f1a panic m1 = make ( map [ T1 ] T2 ) m2 map [ T1 ] T2 ) \u58f0\u660e\u548c\u521d\u59cb\u5316\u770b\u8d77\u6765\u975e\u5e38\u76f8\u4f3c\u7684\u3002 \u58f0\u660e\u548c\u521d\u59cb\u5316\u770b\u8d77\u6765\u5dee\u522b\u975e\u5e38\u5927\u3002 \u5728\u5c3d\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\uff0c\u8bf7\u5728\u521d\u59cb\u5316\u65f6\u63d0\u4f9b map \u5bb9\u91cf\u5927\u5c0f\uff0c\u8be6\u7ec6\u8bf7\u770b \u6307\u5b9aMap\u5bb9\u91cf\u63d0\u793a \u3002 \u53e6\u5916\uff0c\u5982\u679c map \u5305\u542b\u56fa\u5b9a\u7684\u5143\u7d20\u5217\u8868\uff0c\u5219\u4f7f\u7528 map literals(map \u521d\u59cb\u5316\u5217\u8868) \u521d\u59cb\u5316\u6620\u5c04\u3002 Bad Good m := make ( map [ T1 ] T2 , 3 ) m [ k1 ] = v1 m [ k2 ] = v2 m [ k3 ] = v3 m := map [ T1 ] T2 { k1 : v1 , k2 : v2 , k3 : v3 , } \u57fa\u672c\u51c6\u5219\u662f\uff1a\u5728\u521d\u59cb\u5316\u65f6\u4f7f\u7528 map \u521d\u59cb\u5316\u5217\u8868 \u6765\u6dfb\u52a0\u4e00\u7ec4\u56fa\u5b9a\u7684\u5143\u7d20\u3002\u5426\u5219\u4f7f\u7528 make (\u5982\u679c\u53ef\u4ee5\uff0c\u8bf7\u5c3d\u91cf\u6307\u5b9a map \u5bb9\u91cf)\u3002","title":"\u521d\u59cb\u5316 Maps"},{"location":"specification/dev-specification/#string-format","text":"\u5982\u679c\u4f60\u5728\u51fd\u6570\u5916\u58f0\u660e Printf -style \u51fd\u6570\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\uff0c\u8bf7\u5c06\u5176\u8bbe\u7f6e\u4e3a const \u5e38\u91cf\u3002 \u8fd9\u6709\u52a9\u4e8e go vet \u5bf9\u683c\u5f0f\u5b57\u7b26\u4e32\u6267\u884c\u9759\u6001\u5206\u6790\u3002 Bad Good msg := \"unexpected values %v, %v\\n\" fmt . Printf ( msg , 1 , 2 ) const msg = \"unexpected values %v, %v\\n\" fmt . Printf ( msg , 1 , 2 )","title":"\u5b57\u7b26\u4e32 string format"},{"location":"specification/dev-specification/#printf","text":"\u58f0\u660e Printf -style \u51fd\u6570\u65f6\uff0c\u8bf7\u786e\u4fdd go vet \u53ef\u4ee5\u68c0\u6d4b\u5230\u5b83\u5e76\u68c0\u67e5\u683c\u5f0f\u5b57\u7b26\u4e32\u3002 \u8fd9\u610f\u5473\u7740\u60a8\u5e94\u5c3d\u53ef\u80fd\u4f7f\u7528\u9884\u5b9a\u4e49\u7684 Printf -style \u51fd\u6570\u540d\u79f0\u3002 go vet \u5c06\u9ed8\u8ba4\u68c0\u67e5\u8fd9\u4e9b\u3002\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 Printf \u7cfb\u5217 \u3002 \u5982\u679c\u4e0d\u80fd\u4f7f\u7528\u9884\u5b9a\u4e49\u7684\u540d\u79f0\uff0c\u8bf7\u4ee5 f \u7ed3\u675f\u9009\u62e9\u7684\u540d\u79f0\uff1a Wrapf \uff0c\u800c\u4e0d\u662f Wrap \u3002 go vet \u53ef\u4ee5\u8981\u6c42\u68c0\u67e5\u7279\u5b9a\u7684 Printf \u6837\u5f0f\u540d\u79f0\uff0c\u4f46\u540d\u79f0\u5fc5\u987b\u4ee5 f \u7ed3\u5c3e\u3002 $ go vet -printfuncs = wrapf,statusf \u53e6\u8bf7\u53c2\u9605 go vet: Printf family check .","title":"\u547d\u540d Printf \u6837\u5f0f\u7684\u51fd\u6570"},{"location":"specification/dev-specification/#_27","text":"","title":"\u7f16\u7a0b\u6a21\u5f0f"},{"location":"specification/dev-specification/#_28","text":"\u5f53\u6d4b\u8bd5\u903b\u8f91\u662f\u91cd\u590d\u7684\u65f6\u5019\uff0c\u901a\u8fc7 subtests \u4f7f\u7528 table \u9a71\u52a8\u7684\u65b9\u5f0f\u7f16\u5199 case \u4ee3\u7801\u770b\u4e0a\u53bb\u4f1a\u66f4\u7b80\u6d01\u3002 Bad Good // func TestSplitHostPort(t *testing.T) host , port , err := net . SplitHostPort ( \"192.0.2.0:8000\" ) require . NoError ( t , err ) assert . Equal ( t , \"192.0.2.0\" , host ) assert . Equal ( t , \"8000\" , port ) host , port , err = net . SplitHostPort ( \"192.0.2.0:http\" ) require . NoError ( t , err ) assert . Equal ( t , \"192.0.2.0\" , host ) assert . Equal ( t , \"http\" , port ) host , port , err = net . SplitHostPort ( \":8000\" ) require . NoError ( t , err ) assert . Equal ( t , \"\" , host ) assert . Equal ( t , \"8000\" , port ) host , port , err = net . SplitHostPort ( \"1:8\" ) require . NoError ( t , err ) assert . Equal ( t , \"1\" , host ) assert . Equal ( t , \"8\" , port ) // func TestSplitHostPort(t *testing.T) tests := [] struct { give string wantHost string wantPort string }{ { give : \"192.0.2.0:8000\" , wantHost : \"192.0.2.0\" , wantPort : \"8000\" , }, { give : \"192.0.2.0:http\" , wantHost : \"192.0.2.0\" , wantPort : \"http\" , }, { give : \":8000\" , wantHost : \"\" , wantPort : \"8000\" , }, { give : \"1:8\" , wantHost : \"1\" , wantPort : \"8\" , }, } for _ , tt := range tests { t . Run ( tt . give , func ( t * testing . T ) { host , port , err := net . SplitHostPort ( tt . give ) require . NoError ( t , err ) assert . Equal ( t , tt . wantHost , host ) assert . Equal ( t , tt . wantPort , port ) }) } \u5f88\u660e\u663e\uff0c\u4f7f\u7528 test table \u7684\u65b9\u5f0f\u5728\u4ee3\u7801\u903b\u8f91\u6269\u5c55\u7684\u65f6\u5019\uff0c\u6bd4\u5982\u65b0\u589e test case\uff0c\u90fd\u4f1a\u663e\u5f97\u66f4\u52a0\u7684\u6e05\u6670\u3002 \u6211\u4eec\u9075\u5faa\u8fd9\u6837\u7684\u7ea6\u5b9a\uff1a\u5c06\u7ed3\u6784\u4f53\u5207\u7247\u79f0\u4e3a tests \u3002 \u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u79f0\u4e3a tt \u3002\u6b64\u5916\uff0c\u6211\u4eec\u9f13\u52b1\u4f7f\u7528 give \u548c want \u524d\u7f00\u8bf4\u660e\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u7684\u8f93\u5165\u548c\u8f93\u51fa\u503c\u3002 tests := [] struct { give string wantHost string wantPort string }{ // ... } for _ , tt := range tests { // ... }","title":"\u8868\u9a71\u52a8\u6d4b\u8bd5"},{"location":"specification/dev-specification/#_29","text":"\u529f\u80fd\u9009\u9879\u662f\u4e00\u79cd\u6a21\u5f0f\uff0c\u60a8\u53ef\u4ee5\u5728\u5176\u4e2d\u58f0\u660e\u4e00\u4e2a\u4e0d\u900f\u660e Option \u7c7b\u578b\uff0c\u8be5\u7c7b\u578b\u5728\u67d0\u4e9b\u5185\u90e8\u7ed3\u6784\u4e2d\u8bb0\u5f55\u4fe1\u606f\u3002\u60a8\u63a5\u53d7\u8fd9\u4e9b\u9009\u9879\u7684\u53ef\u53d8\u7f16\u53f7\uff0c\u5e76\u6839\u636e\u5185\u90e8\u7ed3\u6784\u4e0a\u7684\u9009\u9879\u8bb0\u5f55\u7684\u5168\u90e8\u4fe1\u606f\u91c7\u53d6\u884c\u52a8\u3002 \u5c06\u6b64\u6a21\u5f0f\u7528\u4e8e\u60a8\u9700\u8981\u6269\u5c55\u7684\u6784\u9020\u51fd\u6570\u548c\u5176\u4ed6\u516c\u5171 API \u4e2d\u7684\u53ef\u9009\u53c2\u6570\uff0c\u5c24\u5176\u662f\u5728\u8fd9\u4e9b\u529f\u80fd\u4e0a\u5df2\u7ecf\u5177\u6709\u4e09\u4e2a\u6216\u66f4\u591a\u53c2\u6570\u7684\u60c5\u51b5\u4e0b\u3002 Bad Good // package db func Open ( addr string , cache bool , logger * zap . Logger ) ( * Connection , error ) { // ... } // package db type Option interface { // ... } func WithCache ( c bool ) Option { // ... } func WithLogger ( log * zap . Logger ) Option { // ... } // Open creates a connection. func Open ( addr string , opts ... Option , ) ( * Connection , error ) { // ... } \u5fc5\u987b\u59cb\u7ec8\u63d0\u4f9b\u7f13\u5b58\u548c\u8bb0\u5f55\u5668\u53c2\u6570\uff0c\u5373\u4f7f\u7528\u6237\u5e0c\u671b\u4f7f\u7528\u9ed8\u8ba4\u503c\u3002 db . Open ( addr , db . DefaultCache , zap . NewNop ()) db . Open ( addr , db . DefaultCache , log ) db . Open ( addr , false /* cache */ , zap . NewNop ()) db . Open ( addr , false /* cache */ , log ) \u53ea\u6709\u5728\u9700\u8981\u65f6\u624d\u63d0\u4f9b\u9009\u9879\u3002 db . Open ( addr ) db . Open ( addr , db . WithLogger ( log )) db . Open ( addr , db . WithCache ( false )) db . Open ( addr , db . WithCache ( false ), db . WithLogger ( log ), ) Our suggested way of implementing this pattern is with an Option interface that holds an unexported method, recording options on an unexported options struct. \u6211\u4eec\u5efa\u8bae\u5b9e\u73b0\u6b64\u6a21\u5f0f\u7684\u65b9\u6cd5\u662f\u4f7f\u7528\u4e00\u4e2a Option \u63a5\u53e3\uff0c\u8be5\u63a5\u53e3\u4fdd\u5b58\u4e00\u4e2a\u672a\u5bfc\u51fa\u7684\u65b9\u6cd5\uff0c\u5728\u4e00\u4e2a\u672a\u5bfc\u51fa\u7684 options \u7ed3\u6784\u4e0a\u8bb0\u5f55\u9009\u9879\u3002 type options struct { cache bool logger * zap . Logger } type Option interface { apply ( * options ) } type cacheOption bool func ( c cacheOption ) apply ( opts * options ) { opts . cache = bool ( c ) } func WithCache ( c bool ) Option { return cacheOption ( c ) } type loggerOption struct { Log * zap . Logger } func ( l loggerOption ) apply ( opts * options ) { opts . logger = l . Log } func WithLogger ( log * zap . Logger ) Option { return loggerOption { Log : log } } // Open creates a connection. func Open ( addr string , opts ... Option , ) ( * Connection , error ) { options := options { cache : defaultCache , logger : zap . NewNop (), } for _ , o := range opts { o . apply ( & options ) } // ... } \u6ce8\u610f: \u8fd8\u6709\u4e00\u79cd\u4f7f\u7528\u95ed\u5305\u5b9e\u73b0\u8fd9\u4e2a\u6a21\u5f0f\u7684\u65b9\u6cd5\uff0c\u4f46\u662f\u6211\u4eec\u76f8\u4fe1\u4e0a\u9762\u7684\u6a21\u5f0f\u4e3a\u4f5c\u8005\u63d0\u4f9b\u4e86\u66f4\u591a\u7684\u7075\u6d3b\u6027\uff0c\u5e76\u4e14\u66f4\u5bb9\u6613\u5bf9\u7528\u6237\u8fdb\u884c\u8c03\u8bd5\u548c\u6d4b\u8bd5\u3002\u7279\u522b\u662f\uff0c\u5728\u4e0d\u53ef\u80fd\u8fdb\u884c\u6bd4\u8f83\u7684\u60c5\u51b5\u4e0b\u5b83\u5141\u8bb8\u5728\u6d4b\u8bd5\u548c\u6a21\u62df\u4e2d\u5bf9\u9009\u9879\u8fdb\u884c\u6bd4\u8f83\u3002\u6b64\u5916\uff0c\u5b83\u8fd8\u5141\u8bb8\u9009\u9879\u5b9e\u73b0\u5176\u4ed6\u63a5\u53e3\uff0c\u5305\u62ec fmt.Stringer \uff0c\u5141\u8bb8\u7528\u6237\u8bfb\u53d6\u9009\u9879\u7684\u5b57\u7b26\u4e32\u8868\u793a\u5f62\u5f0f\u3002 \u8fd8\u53ef\u4ee5\u53c2\u8003\u4e0b\u9762\u8d44\u6599\uff1a Self-referential functions and the design of options Functional options for friendly APIs","title":"\u529f\u80fd\u9009\u9879"},{"location":"specification/dev-specification/#linting","text":"\u6bd4\u4efb\u4f55 \u201cblessed\u201d linter \u96c6\u66f4\u91cd\u8981\u7684\u662f\uff0clint\u5728\u4e00\u4e2a\u4ee3\u7801\u5e93\u4e2d\u59cb\u7ec8\u4fdd\u6301\u4e00\u81f4\u3002 \u6211\u4eec\u5efa\u8bae\u81f3\u5c11\u4f7f\u7528\u4ee5\u4e0blinters\uff0c\u56e0\u4e3a\u6211\u8ba4\u4e3a\u5b83\u4eec\u6709\u52a9\u4e8e\u53d1\u73b0\u6700\u5e38\u89c1\u7684\u95ee\u9898\uff0c\u5e76\u5728\u4e0d\u9700\u8981\u89c4\u5b9a\u7684\u60c5\u51b5\u4e0b\u4e3a\u4ee3\u7801\u8d28\u91cf\u5efa\u7acb\u4e00\u4e2a\u9ad8\u6807\u51c6\uff1a errcheck \u4ee5\u786e\u4fdd\u9519\u8bef\u5f97\u5230\u5904\u7406 goimports \u683c\u5f0f\u5316\u4ee3\u7801\u548c\u7ba1\u7406 imports golint \u6307\u51fa\u5e38\u89c1\u7684\u6587\u4f53\u9519\u8bef govet \u5206\u6790\u4ee3\u7801\u4e2d\u7684\u5e38\u89c1\u9519\u8bef staticcheck \u5404\u79cd\u9759\u6001\u5206\u6790\u68c0\u67e5","title":"Linting"},{"location":"specification/dev-specification/#lint-runners","text":"\u6211\u4eec\u63a8\u8350 golangci-lint \u4f5c\u4e3ago-to lint\u7684\u8fd0\u884c\u7a0b\u5e8f\uff0c\u8fd9\u4e3b\u8981\u662f\u56e0\u4e3a\u5b83\u5728\u8f83\u5927\u7684\u4ee3\u7801\u5e93\u4e2d\u7684\u6027\u80fd\u4ee5\u53ca\u80fd\u591f\u540c\u65f6\u914d\u7f6e\u548c\u4f7f\u7528\u8bb8\u591a\u89c4\u8303\u3002\u8fd9\u4e2arepo\u6709\u4e00\u4e2a\u793a\u4f8b\u914d\u7f6e\u6587\u4ef6 .golangci.yml \u548c\u63a8\u8350\u7684linter\u8bbe\u7f6e\u3002 golangci-lint \u6709 various-linters \u53ef\u4f9b\u4f7f\u7528\u3002\u5efa\u8bae\u5c06\u4e0a\u8ff0linters\u4f5c\u4e3a\u57fa\u672cset\uff0c\u6211\u4eec\u9f13\u52b1\u56e2\u961f\u6dfb\u52a0\u5bf9\u4ed6\u4eec\u7684\u9879\u76ee\u6709\u610f\u4e49\u7684\u4efb\u4f55\u9644\u52a0linters\u3002","title":"Lint Runners"},{"location":"specification/dev-specification/#stargazers-over-time","text":"","title":"Stargazers over time"},{"location":"specification/golang-standards-project-layout/","text":"Standard Go Project Layout \u7ffb\u8bd1: \ud55c\uad6d\uc5b4 \ubb38\uc11c \u8fd9\u662f Go \u5e94\u7528\u7a0b\u5e8f\u9879\u76ee\u7684\u57fa\u672c\u5e03\u5c40\u3002\u5b83\u4e0d\u662f\u6838\u5fc3 Go \u5f00\u53d1\u56e2\u961f\u5b9a\u4e49\u7684\u5b98\u65b9\u6807\u51c6\uff1b\u7136\u800c\uff0c\u5b83\u662f Go \u751f\u6001\u7cfb\u7edf\u4e2d\u4e00\u7ec4\u5e38\u89c1\u7684\u8001\u9879\u76ee\u548c\u65b0\u9879\u76ee\u7684\u5c40\u6a21\u5f0f\u3002\u5176\u4e2d\u4e00\u4e9b\u6a21\u5f0f\u6bd4\u5176\u4ed6\u6a21\u5f0f\u66f4\u53d7\u6b22\u8fce\u3002\u5b83\u8fd8\u5177\u6709\u8bb8\u591a\u5c0f\u7684\u589e\u5f3a\uff0c\u4ee5\u53ca\u5bf9\u4efb\u4f55\u8db3\u591f\u5927\u7684\u5b9e\u9645\u5e94\u7528\u7a0b\u5e8f\u901a\u7528\u7684\u51e0\u4e2a\u652f\u6301\u76ee\u5f55\u3002 \u5982\u679c\u4f60\u5c1d\u8bd5\u5b66\u4e60 Go\uff0c\u6216\u8005\u4f60\u6b63\u5728\u4e3a\u81ea\u5df1\u5efa\u7acb\u4e00\u4e2a PoC \u6216\u4e00\u4e2a\u73a9\u5177\u9879\u76ee\uff0c\u8fd9\u4e2a\u9879\u76ee\u5e03\u5c40\u662f\u6ca1\u5565\u5fc5\u8981\u7684\u3002\u4ece\u4e00\u4e9b\u975e\u5e38\u7b80\u5355\u7684\u4e8b\u60c5\u5f00\u59cb(\u4e00\u4e2a main.go \u6587\u4ef6\u7ef0\u7ef0\u6709\u4f59)\u3002\u968f\u7740\u9879\u76ee\u7684\u589e\u957f\uff0c\u8bf7\u8bb0\u4f4f\u4fdd\u6301\u4ee3\u7801\u7ed3\u6784\u826f\u597d\u975e\u5e38\u91cd\u8981\uff0c\u5426\u5219\u4f60\u6700\u7ec8\u4f1a\u5f97\u5230\u4e00\u4e2a\u51cc\u4e71\u7684\u4ee3\u7801\uff0c\u8fd9\u5176\u4e2d\u5c31\u5305\u542b\u5927\u91cf\u9690\u85cf\u7684\u4f9d\u8d56\u9879\u548c\u5168\u5c40\u72b6\u6001\u3002\u5f53\u6709\u66f4\u591a\u7684\u4eba\u53c2\u4e0e\u8fd9\u4e2a\u9879\u76ee\u65f6\uff0c\u4f60\u5c06\u9700\u8981\u66f4\u591a\u7684\u7ed3\u6784\u3002\u8fd9\u65f6\u5019\uff0c\u4ecb\u7ecd\u4e00\u79cd\u7ba1\u7406\u5305/\u5e93\u7684\u901a\u7528\u65b9\u6cd5\u662f\u5f88\u91cd\u8981\u7684\u3002\u5f53\u4f60\u6709\u4e00\u4e2a\u5f00\u6e90\u9879\u76ee\u65f6\uff0c\u6216\u8005\u5f53\u4f60\u77e5\u9053\u5176\u4ed6\u9879\u76ee\u4ece\u4f60\u7684\u9879\u76ee\u5b58\u50a8\u5e93\u4e2d\u5bfc\u5165\u4ee3\u7801\u65f6\uff0c\u8fd9\u65f6\u5019\u62e5\u6709\u79c1\u6709(\u53c8\u540d internal )\u5305\u548c\u4ee3\u7801\u5c31\u5f88\u91cd\u8981\u3002\u514b\u9686\u5b58\u50a8\u5e93\uff0c\u4fdd\u7559\u4f60\u9700\u8981\u7684\u5185\u5bb9\uff0c\u5220\u9664\u5176\u4ed6\u6240\u6709\u7684\u5185\u5bb9!\u4ec5\u4ec5\u56e0\u4e3a\u5b83\u5728\u90a3\u91cc\u5e76\u4e0d\u610f\u5473\u7740\u4f60\u5fc5\u987b\u5168\u90e8\u4f7f\u7528\u5b83\u3002\u8fd9\u4e9b\u6a21\u5f0f\u90fd\u6ca1\u6709\u5728\u6bcf\u4e2a\u9879\u76ee\u4e2d\u4f7f\u7528\u3002\u751a\u81f3 vendor \u6a21\u5f0f\u4e5f\u4e0d\u662f\u901a\u7528\u7684\u3002 Go 1.14 Go Modules \u7ec8\u4e8e\u53ef\u4ee5\u6295\u5165\u751f\u4ea7\u4e86\u3002\u9664\u975e\u4f60\u6709\u7279\u5b9a\u7684\u7406\u7531\u4e0d\u4f7f\u7528\u5b83\u4eec\uff0c\u5426\u5219\u4f7f\u7528 Go Modules \u3002\u5982\u679c\u4f60\u4f7f\u7528\uff0c\u5c31\u65e0\u9700\u62c5\u5fc3 $GOPATH \u4ee5\u53ca\u9879\u76ee\u653e\u7f6e\u7684\u4f4d\u7f6e\u3002\u5b58\u50a8\u5e93\u4e2d\u7684 go.mod \u6587\u4ef6\u57fa\u672c\u5047\u5b9a\u4f60\u7684\u9879\u76ee\u6258\u7ba1\u5728 Github \u4e0a\uff0c\u4f46\u8fd9\u4e0d\u662f\u8981\u6c42\u3002\u6a21\u5757\u8def\u5f84\u53ef\u4ee5\u662f\u4efb\u4f55\u5730\u65b9\uff0c\u5c3d\u7ba1\u7b2c\u4e00\u4e2a\u6a21\u5757\u8def\u5f84\u7ec4\u4ef6\u7684\u540d\u79f0\u4e2d\u5e94\u8be5\u6709\u4e00\u4e2a\u70b9\uff08\u5f53\u524d\u7248\u672c\u7684 Go \u4e0d\u518d\u5f3a\u5236\u4f7f\u7528\u8be5\u6a21\u5757\uff0c\u4f46\u5982\u679c\u4f7f\u7528\u7a0d\u65e7\u7684\u7248\u672c\uff0c\u5982\u679c\u6ca1\u6709 mod \u6587\u4ef6\u6784\u5efa\u5931\u8d25\u7684\u8bdd \uff0c\u4e0d\u8981\u60ca\u8bb6\uff09\u3002\u5982\u679c\u4f60\u60f3\u77e5\u9053\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 Issues 37554 \u548c 32819 \u3002 \u6b64\u9879\u76ee\u5e03\u5c40\u662f\u901a\u7528\u7684\uff0c\u5e76\u4e14\u4e0d\u4f1a\u5c1d\u8bd5\u5f3a\u52a0\u4e00\u4e2a\u7279\u5b9a\u7684 Go \u5305\u7ed3\u6784\u3002 \u8fd9\u662f\u793e\u533a\u7684\u52aa\u529b\u3002 \u5982\u679c\u770b\u5230\u65b0\u7684\u6a21\u5f0f\uff0c\u6216\u8005\u8ba4\u4e3a\u4e00\u4e2a\u73b0\u6709\u7684\u6a21\u5f0f\u9700\u8981\u66f4\u65b0\uff0c\u8bf7\u63d0\u4e00\u4e2a issue\u3002 \u5982\u679c\u9700\u8981\u547d\u540d\u3001\u683c\u5f0f\u548c\u6837\u5f0f\u65b9\u9762\u7684\u5e2e\u52a9\uff0c\u8bf7\u8fd0\u884c gofmt \u548c golint \u3002\u8fd8\u8981\u786e\u4fdd\u9605\u8bfb\u8fd9\u4e9b Go \u4ee3\u7801\u98ce\u683c\u7684\u6307\u5bfc\u65b9\u9488\u548c\u5efa\u8bae: * https://talks.golang.org/2014/names.slide * https://golang.org/doc/effective_go.html#names * https://blog.golang.org/package-names * https://github.com/golang/go/wiki/CodeReviewComments * Style guideline for Go packages (rakyll/JBD) \u53c2\u89c1 Go Project Layout \u4e86\u89e3\u66f4\u591a\u7684\u80cc\u666f\u4fe1\u606f\u3002 \u66f4\u591a\u5173\u4e8e\u5305\u7684\u547d\u540d\u548c\u7ec4\u7ec7\u4ee5\u53ca\u5176\u4ed6\u4ee3\u7801\u7ed3\u6784\u7684\u5efa\u8bae: * GopherCon EU 2018: Peter Bourgon - Best Practices for Industrial Programming * GopherCon Russia 2018: Ashley McNamara + Brian Ketelsen - Go best practices. * GopherCon 2017: Edward Muller - Go Anti-Patterns * GopherCon 2018: Kat Zien - How Do You Structure Your Go Apps Go \u76ee\u5f55 /cmd \u672c\u9879\u76ee\u7684\u4e3b\u5e72\u3002 \u6bcf\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u76ee\u5f55\u540d\u5e94\u8be5\u4e0e\u4f60\u60f3\u8981\u7684\u53ef\u6267\u884c\u6587\u4ef6\u7684\u540d\u79f0\u76f8\u5339\u914d(\u4f8b\u5982\uff0c /cmd/myapp )\u3002 \u4e0d\u8981\u5728\u8fd9\u4e2a\u76ee\u5f55\u4e2d\u653e\u7f6e\u592a\u591a\u4ee3\u7801\u3002\u5982\u679c\u4f60\u8ba4\u4e3a\u4ee3\u7801\u53ef\u4ee5\u5bfc\u5165\u5e76\u5728\u5176\u4ed6\u9879\u76ee\u4e2d\u4f7f\u7528\uff0c\u90a3\u4e48\u5b83\u5e94\u8be5\u4f4d\u4e8e /pkg \u76ee\u5f55\u4e2d\u3002\u5982\u679c\u4ee3\u7801\u4e0d\u662f\u53ef\u91cd\u7528\u7684\uff0c\u6216\u8005\u4f60\u4e0d\u5e0c\u671b\u5176\u4ed6\u4eba\u91cd\u7528\u5b83\uff0c\u8bf7\u5c06\u8be5\u4ee3\u7801\u653e\u5230 /internal \u76ee\u5f55\u4e2d\u3002\u4f60\u4f1a\u60ca\u8bb6\u4e8e\u522b\u4eba\u4f1a\u600e\u4e48\u505a\uff0c\u6240\u4ee5\u8981\u660e\u786e\u4f60\u7684\u610f\u56fe! \u901a\u5e38\u6709\u4e00\u4e2a\u5c0f\u7684 main \u51fd\u6570\uff0c\u4ece /internal \u548c /pkg \u76ee\u5f55\u5bfc\u5165\u548c\u8c03\u7528\u4ee3\u7801\uff0c\u9664\u6b64\u4e4b\u5916\u6ca1\u6709\u522b\u7684\u4e1c\u897f\u3002 \u6709\u5173\u793a\u4f8b\uff0c\u8bf7\u53c2\u9605 /cmd \u76ee\u5f55\u3002 /internal \u79c1\u6709\u5e94\u7528\u7a0b\u5e8f\u548c\u5e93\u4ee3\u7801\u3002\u8fd9\u662f\u4f60\u4e0d\u5e0c\u671b\u5176\u4ed6\u4eba\u5728\u5176\u5e94\u7528\u7a0b\u5e8f\u6216\u5e93\u4e2d\u5bfc\u5165\u4ee3\u7801\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u4e2a\u5e03\u5c40\u6a21\u5f0f\u662f\u7531 Go \u7f16\u8bd1\u5668\u672c\u8eab\u6267\u884c\u7684\u3002\u6709\u5173\u66f4\u591a\u7ec6\u8282\uff0c\u8bf7\u53c2\u9605Go 1.4 release notes \u3002\u6ce8\u610f\uff0c\u4f60\u5e76\u4e0d\u5c40\u9650\u4e8e\u9876\u7ea7 internal \u76ee\u5f55\u3002\u5728\u9879\u76ee\u6811\u7684\u4efb\u4f55\u7ea7\u522b\u4e0a\u90fd\u53ef\u4ee5\u6709\u591a\u4e2a\u5185\u90e8\u76ee\u5f55\u3002 \u4f60\u53ef\u4ee5\u9009\u62e9\u5411 internal \u5305\u4e2d\u6dfb\u52a0\u4e00\u4e9b\u989d\u5916\u7684\u7ed3\u6784\uff0c\u4ee5\u5206\u9694\u5171\u4eab\u548c\u975e\u5171\u4eab\u7684\u5185\u90e8\u4ee3\u7801\u3002\u8fd9\u4e0d\u662f\u5fc5\u9700\u7684(\u7279\u522b\u662f\u5bf9\u4e8e\u8f83\u5c0f\u7684\u9879\u76ee)\uff0c\u4f46\u662f\u6700\u597d\u6709\u6709\u53ef\u89c6\u5316\u7684\u7ebf\u7d22\u6765\u663e\u793a\u9884\u671f\u7684\u5305\u7684\u7528\u9014\u3002\u4f60\u7684\u5b9e\u9645\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u53ef\u4ee5\u653e\u5728 /internal/app \u76ee\u5f55\u4e0b(\u4f8b\u5982 /internal/app/myapp )\uff0c\u8fd9\u4e9b\u5e94\u7528\u7a0b\u5e8f\u5171\u4eab\u7684\u4ee3\u7801\u53ef\u4ee5\u653e\u5728 /internal/pkg \u76ee\u5f55\u4e0b(\u4f8b\u5982 /internal/pkg/myprivlib )\u3002 /pkg \u5916\u90e8\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u4f7f\u7528\u7684\u5e93\u4ee3\u7801(\u4f8b\u5982 /pkg/mypubliclib )\u3002\u5176\u4ed6\u9879\u76ee\u4f1a\u5bfc\u5165\u8fd9\u4e9b\u5e93\uff0c\u5e0c\u671b\u5b83\u4eec\u80fd\u6b63\u5e38\u5de5\u4f5c\uff0c\u6240\u4ee5\u5728\u8fd9\u91cc\u653e\u4e1c\u897f\u4e4b\u524d\u8981\u4e09\u601d:-)\u6ce8\u610f\uff0c internal \u76ee\u5f55\u662f\u786e\u4fdd\u79c1\u6709\u5305\u4e0d\u53ef\u5bfc\u5165\u7684\u66f4\u597d\u65b9\u6cd5\uff0c\u56e0\u4e3a\u5b83\u662f\u7531 Go \u5f3a\u5236\u6267\u884c\u7684\u3002 /pkg \u76ee\u5f55\u4ecd\u7136\u662f\u4e00\u79cd\u5f88\u597d\u7684\u65b9\u5f0f\uff0c\u53ef\u4ee5\u663e\u5f0f\u5730\u8868\u793a\u8be5\u76ee\u5f55\u4e2d\u7684\u4ee3\u7801\u5bf9\u4e8e\u5176\u4ed6\u4eba\u6765\u8bf4\u662f\u5b89\u5168\u4f7f\u7528\u7684\u597d\u65b9\u6cd5\u3002\u7531 Travis Jeffery \u64b0\u5199\u7684 I'll take pkg over internal \u535a\u5ba2\u6587\u7ae0\u63d0\u4f9b\u4e86 pkg \u548c internal \u76ee\u5f55\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u6982\u8ff0\uff0c\u4ee5\u53ca\u4ec0\u4e48\u65f6\u5019\u4f7f\u7528\u5b83\u4eec\u662f\u6709\u610f\u4e49\u7684\u3002 \u5f53\u6839\u76ee\u5f55\u5305\u542b\u5927\u91cf\u975e Go \u7ec4\u4ef6\u548c\u76ee\u5f55\u65f6\uff0c\u8fd9\u4e5f\u662f\u4e00\u79cd\u5c06 Go \u4ee3\u7801\u5206\u7ec4\u5230\u4e00\u4e2a\u4f4d\u7f6e\u7684\u65b9\u6cd5\uff0c\u8fd9\u4f7f\u5f97\u8fd0\u884c\u5404\u79cd Go \u5de5\u5177\u53d8\u5f97\u66f4\u52a0\u5bb9\u6613\uff08\u6b63\u5982\u5728\u8fd9\u4e9b\u6f14\u8bb2\u4e2d\u63d0\u5230\u7684\u90a3\u6837: \u6765\u81ea GopherCon EU 2018 \u7684 Best Practices for Industrial Programming , GopherCon 2018: Kat Zien - How Do You Structure Your Go Apps \u548c GoLab 2018 - Massimiliano Pippi - Project layout patterns in Go \uff09\u3002 \u5982\u679c\u4f60\u60f3\u67e5\u770b\u54ea\u4e2a\u6d41\u884c\u7684 Go \u5b58\u50a8\u5e93\u4f7f\u7528\u6b64\u9879\u76ee\u5e03\u5c40\u6a21\u5f0f\uff0c\u8bf7\u67e5\u770b /pkg \u76ee\u5f55\u3002\u8fd9\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u5e03\u5c40\u6a21\u5f0f\uff0c\u4f46\u5e76\u4e0d\u662f\u6240\u6709\u4eba\u90fd\u63a5\u53d7\u5b83\uff0c\u4e00\u4e9b Go \u793e\u533a\u7684\u4eba\u4e5f\u4e0d\u63a8\u8350\u5b83\u3002 \u5982\u679c\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u9879\u76ee\u771f\u7684\u5f88\u5c0f\uff0c\u5e76\u4e14\u989d\u5916\u7684\u5d4c\u5957\u5e76\u4e0d\u80fd\u589e\u52a0\u591a\u5c11\u4ef7\u503c(\u9664\u975e\u4f60\u771f\u7684\u60f3\u8981:-)\uff0c\u90a3\u5c31\u4e0d\u8981\u4f7f\u7528\u5b83\u3002\u5f53\u5b83\u53d8\u5f97\u8db3\u591f\u5927\u65f6\uff0c\u4f60\u7684\u6839\u76ee\u5f55\u4f1a\u53d8\u5f97\u975e\u5e38\u7e41\u7410\u65f6(\u5c24\u5176\u662f\u5f53\u4f60\u6709\u5f88\u591a\u975e Go \u5e94\u7528\u7ec4\u4ef6\u65f6)\uff0c\u8bf7\u8003\u8651\u4e00\u4e0b\u3002 /vendor \u5e94\u7528\u7a0b\u5e8f\u4f9d\u8d56\u9879(\u624b\u52a8\u7ba1\u7406\u6216\u4f7f\u7528\u4f60\u559c\u6b22\u7684\u4f9d\u8d56\u9879\u7ba1\u7406\u5de5\u5177\uff0c\u5982\u65b0\u7684\u5185\u7f6e Go Modules \u529f\u80fd)\u3002 go mod vendor \u547d\u4ee4\u5c06\u4e3a\u4f60\u521b\u5efa /vendor \u76ee\u5f55\u3002\u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u672a\u4f7f\u7528\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5904\u4e8e\u542f\u7528\u72b6\u6001\u7684 Go 1.14\uff0c\u5219\u53ef\u80fd\u9700\u8981\u5728 go build \u547d\u4ee4\u4e2d\u6dfb\u52a0 -mod=vendor \u6807\u5fd7\u3002 \u5982\u679c\u4f60\u6b63\u5728\u6784\u5efa\u4e00\u4e2a\u5e93\uff0c\u90a3\u4e48\u4e0d\u8981\u63d0\u4ea4\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u4f9d\u8d56\u9879\u3002 \u6ce8\u610f\uff0c\u81ea\u4ece 1.13 \u4ee5\u540e\uff0cGo \u8fd8\u542f\u7528\u4e86\u6a21\u5757\u4ee3\u7406\u529f\u80fd(\u9ed8\u8ba4\u4f7f\u7528 https://proxy.golang.org \u4f5c\u4e3a\u4ed6\u4eec\u7684\u6a21\u5757\u4ee3\u7406\u670d\u52a1\u5668)\u3002\u5728 here \u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u5b83\u7684\u4fe1\u606f\uff0c\u770b\u770b\u5b83\u662f\u5426\u7b26\u5408\u4f60\u7684\u6240\u6709\u9700\u6c42\u548c\u7ea6\u675f\u3002\u5982\u679c\u9700\u8981\uff0c\u90a3\u4e48\u4f60\u6839\u672c\u4e0d\u9700\u8981 vendor \u76ee\u5f55\u3002 \u56fd\u5185\u6a21\u5757\u4ee3\u7406\u529f\u80fd\u9ed8\u8ba4\u662f\u88ab\u5899\u7684\uff0c\u4e03\u725b\u4e91\u6709\u7ef4\u62a4\u4e13\u95e8\u7684\u7684 \u6a21\u5757\u4ee3\u7406 \u3002 \u670d\u52a1\u5e94\u7528\u7a0b\u5e8f\u76ee\u5f55 /api OpenAPI/Swagger \u89c4\u8303\uff0cJSON \u6a21\u5f0f\u6587\u4ef6\uff0c\u534f\u8bae\u5b9a\u4e49\u6587\u4ef6\u3002 \u6709\u5173\u793a\u4f8b\uff0c\u8bf7\u53c2\u89c1 /api \u76ee\u5f55\u3002 Web \u5e94\u7528\u7a0b\u5e8f\u76ee\u5f55 /web \u7279\u5b9a\u4e8e Web \u5e94\u7528\u7a0b\u5e8f\u7684\u7ec4\u4ef6:\u9759\u6001 Web \u8d44\u4ea7\u3001\u670d\u52a1\u5668\u7aef\u6a21\u677f\u548c SPAs\u3002 \u901a\u7528\u5e94\u7528\u76ee\u5f55 /configs \u914d\u7f6e\u6587\u4ef6\u6a21\u677f\u6216\u9ed8\u8ba4\u914d\u7f6e\u3002 \u5c06\u4f60\u7684 confd \u6216 consul-template \u6a21\u677f\u6587\u4ef6\u653e\u5728\u8fd9\u91cc\u3002 /init System init\uff08systemd\uff0cupstart\uff0csysv\uff09\u548c process manager/supervisor\uff08runit\uff0csupervisor\uff09\u914d\u7f6e\u3002 /scripts \u6267\u884c\u5404\u79cd\u6784\u5efa\u3001\u5b89\u88c5\u3001\u5206\u6790\u7b49\u64cd\u4f5c\u7684\u811a\u672c\u3002 \u8fd9\u4e9b\u811a\u672c\u4fdd\u6301\u4e86\u6839\u7ea7\u522b\u7684 Makefile \u53d8\u5f97\u5c0f\u800c\u7b80\u5355(\u4f8b\u5982\uff0c https://github.com/hashicorp/terraform/blob/master/Makefile )\u3002 \u6709\u5173\u793a\u4f8b\uff0c\u8bf7\u53c2\u89c1 /scripts \u76ee\u5f55\u3002 /build \u6253\u5305\u548c\u6301\u7eed\u96c6\u6210\u3002 \u5c06\u4f60\u7684\u4e91( AMI )\u3001\u5bb9\u5668( Docker )\u3001\u64cd\u4f5c\u7cfb\u7edf( deb\u3001rpm\u3001pkg )\u5305\u914d\u7f6e\u548c\u811a\u672c\u653e\u5728 /build/package \u76ee\u5f55\u4e0b\u3002 \u5c06\u4f60\u7684 CI (travis\u3001circle\u3001drone)\u914d\u7f6e\u548c\u811a\u672c\u653e\u5728 /build/ci \u76ee\u5f55\u4e2d\u3002\u8bf7\u6ce8\u610f\uff0c\u6709\u4e9b CI \u5de5\u5177(\u4f8b\u5982 Travis CI)\u5bf9\u914d\u7f6e\u6587\u4ef6\u7684\u4f4d\u7f6e\u975e\u5e38\u6311\u5254\u3002\u5c1d\u8bd5\u5c06\u914d\u7f6e\u6587\u4ef6\u653e\u5728 /build/ci \u76ee\u5f55\u4e2d\uff0c\u5c06\u5b83\u4eec\u94fe\u63a5\u5230 CI \u5de5\u5177\u671f\u671b\u5b83\u4eec\u7684\u4f4d\u7f6e(\u5982\u679c\u53ef\u80fd\u7684\u8bdd)\u3002 /deployments IaaS\u3001PaaS\u3001\u7cfb\u7edf\u548c\u5bb9\u5668\u7f16\u914d\u90e8\u7f72\u914d\u7f6e\u548c\u6a21\u677f(docker-compose\u3001kubernetes/helm\u3001mesos\u3001terraform\u3001bosh)\u3002\u6ce8\u610f\uff0c\u5728\u4e00\u4e9b\u5b58\u50a8\u5e93\u4e2d(\u7279\u522b\u662f\u4f7f\u7528 kubernetes \u90e8\u7f72\u7684\u5e94\u7528\u7a0b\u5e8f)\uff0c\u8fd9\u4e2a\u76ee\u5f55\u88ab\u79f0\u4e3a /deploy \u3002 /test \u989d\u5916\u7684\u5916\u90e8\u6d4b\u8bd5\u5e94\u7528\u7a0b\u5e8f\u548c\u6d4b\u8bd5\u6570\u636e\u3002\u4f60\u53ef\u4ee5\u968f\u65f6\u6839\u636e\u9700\u6c42\u6784\u9020 /test \u76ee\u5f55\u3002\u5bf9\u4e8e\u8f83\u5927\u7684\u9879\u76ee\uff0c\u6709\u4e00\u4e2a\u6570\u636e\u5b50\u76ee\u5f55\u662f\u6709\u610f\u4e49\u7684\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 /test/data \u6216 /test/testdata (\u5982\u679c\u4f60\u9700\u8981\u5ffd\u7565\u76ee\u5f55\u4e2d\u7684\u5185\u5bb9)\u3002\u8bf7\u6ce8\u610f\uff0cGo \u8fd8\u4f1a\u5ffd\u7565\u4ee5\u201c.\u201d\u6216\u201c_\u201d\u5f00\u5934\u7684\u76ee\u5f55\u6216\u6587\u4ef6\uff0c\u56e0\u6b64\u5728\u5982\u4f55\u547d\u540d\u6d4b\u8bd5\u6570\u636e\u76ee\u5f55\u65b9\u9762\u6709\u66f4\u5927\u7684\u7075\u6d3b\u6027\u3002 \u6709\u5173\u793a\u4f8b\uff0c\u8bf7\u53c2\u89c1 /test \u76ee\u5f55\u3002 \u5176\u4ed6\u76ee\u5f55 /docs \u8bbe\u8ba1\u548c\u7528\u6237\u6587\u6863(\u9664\u4e86 godoc \u751f\u6210\u7684\u6587\u6863\u4e4b\u5916)\u3002 \u6709\u5173\u793a\u4f8b\uff0c\u8bf7\u53c2\u9605 /docs \u76ee\u5f55\u3002 /tools \u8fd9\u4e2a\u9879\u76ee\u7684\u652f\u6301\u5de5\u5177\u3002\u6ce8\u610f\uff0c\u8fd9\u4e9b\u5de5\u5177\u53ef\u4ee5\u4ece /pkg \u548c /internal \u76ee\u5f55\u5bfc\u5165\u4ee3\u7801\u3002 \u6709\u5173\u793a\u4f8b\uff0c\u8bf7\u53c2\u89c1 /tools \u76ee\u5f55\u3002 /examples \u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u548c/\u6216\u516c\u5171\u5e93\u7684\u793a\u4f8b\u3002 \u6709\u5173\u793a\u4f8b\uff0c\u8bf7\u53c2\u89c1 /examples \u76ee\u5f55\u3002 /third_party \u5916\u90e8\u8f85\u52a9\u5de5\u5177\uff0c\u5206\u53c9\u4ee3\u7801\u548c\u5176\u4ed6\u7b2c\u4e09\u65b9\u5de5\u5177(\u4f8b\u5982 Swagger UI)\u3002 /githooks Git hooks\u3002 /assets \u4e0e\u5b58\u50a8\u5e93\u4e00\u8d77\u4f7f\u7528\u7684\u5176\u4ed6\u8d44\u4ea7(\u56fe\u50cf\u3001\u5fbd\u6807\u7b49)\u3002 /website \u5982\u679c\u4f60\u4e0d\u4f7f\u7528 Github \u9875\u9762\uff0c\u5219\u5728\u8fd9\u91cc\u653e\u7f6e\u9879\u76ee\u7684\u7f51\u7ad9\u6570\u636e\u3002 \u6709\u5173\u793a\u4f8b\uff0c\u8bf7\u53c2\u89c1 /website \u76ee\u5f55\u3002 \u4f60\u4e0d\u5e94\u8be5\u62e5\u6709\u7684\u76ee\u5f55 /src \u6709\u4e9b Go \u9879\u76ee\u786e\u5b9e\u6709\u4e00\u4e2a src \u6587\u4ef6\u5939\uff0c\u4f46\u8fd9\u901a\u5e38\u53d1\u751f\u5728\u5f00\u53d1\u4eba\u5458\u6709 Java \u80cc\u666f\uff0c\u5728\u90a3\u91cc\u5b83\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u6a21\u5f0f\u3002\u5982\u679c\u53ef\u4ee5\u7684\u8bdd\uff0c\u5c3d\u91cf\u4e0d\u8981\u91c7\u7528\u8fd9\u79cd Java \u6a21\u5f0f\u3002\u4f60\u771f\u7684\u4e0d\u5e0c\u671b\u4f60\u7684 Go \u4ee3\u7801\u6216 Go \u9879\u76ee\u770b\u8d77\u6765\u50cf Java:-) \u4e0d\u8981\u5c06\u9879\u76ee\u7ea7\u522b src \u76ee\u5f55\u4e0e Go \u7528\u4e8e\u5176\u5de5\u4f5c\u7a7a\u95f4\u7684 src \u76ee\u5f55(\u5982 How to Write Go Code \u4e2d\u6240\u8ff0)\u6df7\u6dc6\u3002 $GOPATH \u73af\u5883\u53d8\u91cf\u6307\u5411\u4f60\u7684(\u5f53\u524d)\u5de5\u4f5c\u7a7a\u95f4(\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5b83\u6307\u5411\u975e windows \u7cfb\u7edf\u4e0a\u7684 $HOME/go )\u3002\u8fd9\u4e2a\u5de5\u4f5c\u7a7a\u95f4\u5305\u62ec\u9876\u5c42 /pkg , /bin \u548c /src \u76ee\u5f55\u3002\u4f60\u7684\u5b9e\u9645\u9879\u76ee\u6700\u7ec8\u662f /src \u4e0b\u7684\u4e00\u4e2a\u5b50\u76ee\u5f55\uff0c\u56e0\u6b64\uff0c\u5982\u679c\u4f60\u7684\u9879\u76ee\u4e2d\u6709 /src \u76ee\u5f55\uff0c\u90a3\u4e48\u9879\u76ee\u8def\u5f84\u5c06\u662f\u8fd9\u6837\u7684: /some/path/to/workspace/src/your_project/src/your_code.go \u3002\u6ce8\u610f\uff0c\u5728 Go 1.11 \u4e2d\uff0c\u53ef\u4ee5\u5c06\u9879\u76ee\u653e\u5728 GOPATH \u4e4b\u5916\uff0c\u4f46\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u4f7f\u7528\u8fd9\u79cd\u5e03\u5c40\u6a21\u5f0f\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\u3002 Badges Go Report Card - It will scan your code with gofmt , go vet , gocyclo , golint , ineffassign , license and misspell . Replace github.com/golang-standards/project-layout with your project reference. GoDoc - It will provide online version of your GoDoc generated documentation. Change the link to point to your project. Release - It will show the latest release number for your project. Change the github link to point to your project. Notes A more opinionated project template with sample/reusable configs, scripts and code is a WIP.","title":"2 \u9879\u76ee\u89c4\u8303"},{"location":"specification/golang-standards-project-layout/#standard-go-project-layout","text":"\u7ffb\u8bd1: \ud55c\uad6d\uc5b4 \ubb38\uc11c \u8fd9\u662f Go \u5e94\u7528\u7a0b\u5e8f\u9879\u76ee\u7684\u57fa\u672c\u5e03\u5c40\u3002\u5b83\u4e0d\u662f\u6838\u5fc3 Go \u5f00\u53d1\u56e2\u961f\u5b9a\u4e49\u7684\u5b98\u65b9\u6807\u51c6\uff1b\u7136\u800c\uff0c\u5b83\u662f Go \u751f\u6001\u7cfb\u7edf\u4e2d\u4e00\u7ec4\u5e38\u89c1\u7684\u8001\u9879\u76ee\u548c\u65b0\u9879\u76ee\u7684\u5c40\u6a21\u5f0f\u3002\u5176\u4e2d\u4e00\u4e9b\u6a21\u5f0f\u6bd4\u5176\u4ed6\u6a21\u5f0f\u66f4\u53d7\u6b22\u8fce\u3002\u5b83\u8fd8\u5177\u6709\u8bb8\u591a\u5c0f\u7684\u589e\u5f3a\uff0c\u4ee5\u53ca\u5bf9\u4efb\u4f55\u8db3\u591f\u5927\u7684\u5b9e\u9645\u5e94\u7528\u7a0b\u5e8f\u901a\u7528\u7684\u51e0\u4e2a\u652f\u6301\u76ee\u5f55\u3002 \u5982\u679c\u4f60\u5c1d\u8bd5\u5b66\u4e60 Go\uff0c\u6216\u8005\u4f60\u6b63\u5728\u4e3a\u81ea\u5df1\u5efa\u7acb\u4e00\u4e2a PoC \u6216\u4e00\u4e2a\u73a9\u5177\u9879\u76ee\uff0c\u8fd9\u4e2a\u9879\u76ee\u5e03\u5c40\u662f\u6ca1\u5565\u5fc5\u8981\u7684\u3002\u4ece\u4e00\u4e9b\u975e\u5e38\u7b80\u5355\u7684\u4e8b\u60c5\u5f00\u59cb(\u4e00\u4e2a main.go \u6587\u4ef6\u7ef0\u7ef0\u6709\u4f59)\u3002\u968f\u7740\u9879\u76ee\u7684\u589e\u957f\uff0c\u8bf7\u8bb0\u4f4f\u4fdd\u6301\u4ee3\u7801\u7ed3\u6784\u826f\u597d\u975e\u5e38\u91cd\u8981\uff0c\u5426\u5219\u4f60\u6700\u7ec8\u4f1a\u5f97\u5230\u4e00\u4e2a\u51cc\u4e71\u7684\u4ee3\u7801\uff0c\u8fd9\u5176\u4e2d\u5c31\u5305\u542b\u5927\u91cf\u9690\u85cf\u7684\u4f9d\u8d56\u9879\u548c\u5168\u5c40\u72b6\u6001\u3002\u5f53\u6709\u66f4\u591a\u7684\u4eba\u53c2\u4e0e\u8fd9\u4e2a\u9879\u76ee\u65f6\uff0c\u4f60\u5c06\u9700\u8981\u66f4\u591a\u7684\u7ed3\u6784\u3002\u8fd9\u65f6\u5019\uff0c\u4ecb\u7ecd\u4e00\u79cd\u7ba1\u7406\u5305/\u5e93\u7684\u901a\u7528\u65b9\u6cd5\u662f\u5f88\u91cd\u8981\u7684\u3002\u5f53\u4f60\u6709\u4e00\u4e2a\u5f00\u6e90\u9879\u76ee\u65f6\uff0c\u6216\u8005\u5f53\u4f60\u77e5\u9053\u5176\u4ed6\u9879\u76ee\u4ece\u4f60\u7684\u9879\u76ee\u5b58\u50a8\u5e93\u4e2d\u5bfc\u5165\u4ee3\u7801\u65f6\uff0c\u8fd9\u65f6\u5019\u62e5\u6709\u79c1\u6709(\u53c8\u540d internal )\u5305\u548c\u4ee3\u7801\u5c31\u5f88\u91cd\u8981\u3002\u514b\u9686\u5b58\u50a8\u5e93\uff0c\u4fdd\u7559\u4f60\u9700\u8981\u7684\u5185\u5bb9\uff0c\u5220\u9664\u5176\u4ed6\u6240\u6709\u7684\u5185\u5bb9!\u4ec5\u4ec5\u56e0\u4e3a\u5b83\u5728\u90a3\u91cc\u5e76\u4e0d\u610f\u5473\u7740\u4f60\u5fc5\u987b\u5168\u90e8\u4f7f\u7528\u5b83\u3002\u8fd9\u4e9b\u6a21\u5f0f\u90fd\u6ca1\u6709\u5728\u6bcf\u4e2a\u9879\u76ee\u4e2d\u4f7f\u7528\u3002\u751a\u81f3 vendor \u6a21\u5f0f\u4e5f\u4e0d\u662f\u901a\u7528\u7684\u3002 Go 1.14 Go Modules \u7ec8\u4e8e\u53ef\u4ee5\u6295\u5165\u751f\u4ea7\u4e86\u3002\u9664\u975e\u4f60\u6709\u7279\u5b9a\u7684\u7406\u7531\u4e0d\u4f7f\u7528\u5b83\u4eec\uff0c\u5426\u5219\u4f7f\u7528 Go Modules \u3002\u5982\u679c\u4f60\u4f7f\u7528\uff0c\u5c31\u65e0\u9700\u62c5\u5fc3 $GOPATH \u4ee5\u53ca\u9879\u76ee\u653e\u7f6e\u7684\u4f4d\u7f6e\u3002\u5b58\u50a8\u5e93\u4e2d\u7684 go.mod \u6587\u4ef6\u57fa\u672c\u5047\u5b9a\u4f60\u7684\u9879\u76ee\u6258\u7ba1\u5728 Github \u4e0a\uff0c\u4f46\u8fd9\u4e0d\u662f\u8981\u6c42\u3002\u6a21\u5757\u8def\u5f84\u53ef\u4ee5\u662f\u4efb\u4f55\u5730\u65b9\uff0c\u5c3d\u7ba1\u7b2c\u4e00\u4e2a\u6a21\u5757\u8def\u5f84\u7ec4\u4ef6\u7684\u540d\u79f0\u4e2d\u5e94\u8be5\u6709\u4e00\u4e2a\u70b9\uff08\u5f53\u524d\u7248\u672c\u7684 Go \u4e0d\u518d\u5f3a\u5236\u4f7f\u7528\u8be5\u6a21\u5757\uff0c\u4f46\u5982\u679c\u4f7f\u7528\u7a0d\u65e7\u7684\u7248\u672c\uff0c\u5982\u679c\u6ca1\u6709 mod \u6587\u4ef6\u6784\u5efa\u5931\u8d25\u7684\u8bdd \uff0c\u4e0d\u8981\u60ca\u8bb6\uff09\u3002\u5982\u679c\u4f60\u60f3\u77e5\u9053\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 Issues 37554 \u548c 32819 \u3002 \u6b64\u9879\u76ee\u5e03\u5c40\u662f\u901a\u7528\u7684\uff0c\u5e76\u4e14\u4e0d\u4f1a\u5c1d\u8bd5\u5f3a\u52a0\u4e00\u4e2a\u7279\u5b9a\u7684 Go \u5305\u7ed3\u6784\u3002 \u8fd9\u662f\u793e\u533a\u7684\u52aa\u529b\u3002 \u5982\u679c\u770b\u5230\u65b0\u7684\u6a21\u5f0f\uff0c\u6216\u8005\u8ba4\u4e3a\u4e00\u4e2a\u73b0\u6709\u7684\u6a21\u5f0f\u9700\u8981\u66f4\u65b0\uff0c\u8bf7\u63d0\u4e00\u4e2a issue\u3002 \u5982\u679c\u9700\u8981\u547d\u540d\u3001\u683c\u5f0f\u548c\u6837\u5f0f\u65b9\u9762\u7684\u5e2e\u52a9\uff0c\u8bf7\u8fd0\u884c gofmt \u548c golint \u3002\u8fd8\u8981\u786e\u4fdd\u9605\u8bfb\u8fd9\u4e9b Go \u4ee3\u7801\u98ce\u683c\u7684\u6307\u5bfc\u65b9\u9488\u548c\u5efa\u8bae: * https://talks.golang.org/2014/names.slide * https://golang.org/doc/effective_go.html#names * https://blog.golang.org/package-names * https://github.com/golang/go/wiki/CodeReviewComments * Style guideline for Go packages (rakyll/JBD) \u53c2\u89c1 Go Project Layout \u4e86\u89e3\u66f4\u591a\u7684\u80cc\u666f\u4fe1\u606f\u3002 \u66f4\u591a\u5173\u4e8e\u5305\u7684\u547d\u540d\u548c\u7ec4\u7ec7\u4ee5\u53ca\u5176\u4ed6\u4ee3\u7801\u7ed3\u6784\u7684\u5efa\u8bae: * GopherCon EU 2018: Peter Bourgon - Best Practices for Industrial Programming * GopherCon Russia 2018: Ashley McNamara + Brian Ketelsen - Go best practices. * GopherCon 2017: Edward Muller - Go Anti-Patterns * GopherCon 2018: Kat Zien - How Do You Structure Your Go Apps","title":"Standard Go Project Layout"},{"location":"specification/golang-standards-project-layout/#go","text":"","title":"Go \u76ee\u5f55"},{"location":"specification/golang-standards-project-layout/#cmd","text":"\u672c\u9879\u76ee\u7684\u4e3b\u5e72\u3002 \u6bcf\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u76ee\u5f55\u540d\u5e94\u8be5\u4e0e\u4f60\u60f3\u8981\u7684\u53ef\u6267\u884c\u6587\u4ef6\u7684\u540d\u79f0\u76f8\u5339\u914d(\u4f8b\u5982\uff0c /cmd/myapp )\u3002 \u4e0d\u8981\u5728\u8fd9\u4e2a\u76ee\u5f55\u4e2d\u653e\u7f6e\u592a\u591a\u4ee3\u7801\u3002\u5982\u679c\u4f60\u8ba4\u4e3a\u4ee3\u7801\u53ef\u4ee5\u5bfc\u5165\u5e76\u5728\u5176\u4ed6\u9879\u76ee\u4e2d\u4f7f\u7528\uff0c\u90a3\u4e48\u5b83\u5e94\u8be5\u4f4d\u4e8e /pkg \u76ee\u5f55\u4e2d\u3002\u5982\u679c\u4ee3\u7801\u4e0d\u662f\u53ef\u91cd\u7528\u7684\uff0c\u6216\u8005\u4f60\u4e0d\u5e0c\u671b\u5176\u4ed6\u4eba\u91cd\u7528\u5b83\uff0c\u8bf7\u5c06\u8be5\u4ee3\u7801\u653e\u5230 /internal \u76ee\u5f55\u4e2d\u3002\u4f60\u4f1a\u60ca\u8bb6\u4e8e\u522b\u4eba\u4f1a\u600e\u4e48\u505a\uff0c\u6240\u4ee5\u8981\u660e\u786e\u4f60\u7684\u610f\u56fe! \u901a\u5e38\u6709\u4e00\u4e2a\u5c0f\u7684 main \u51fd\u6570\uff0c\u4ece /internal \u548c /pkg \u76ee\u5f55\u5bfc\u5165\u548c\u8c03\u7528\u4ee3\u7801\uff0c\u9664\u6b64\u4e4b\u5916\u6ca1\u6709\u522b\u7684\u4e1c\u897f\u3002 \u6709\u5173\u793a\u4f8b\uff0c\u8bf7\u53c2\u9605 /cmd \u76ee\u5f55\u3002","title":"/cmd"},{"location":"specification/golang-standards-project-layout/#internal","text":"\u79c1\u6709\u5e94\u7528\u7a0b\u5e8f\u548c\u5e93\u4ee3\u7801\u3002\u8fd9\u662f\u4f60\u4e0d\u5e0c\u671b\u5176\u4ed6\u4eba\u5728\u5176\u5e94\u7528\u7a0b\u5e8f\u6216\u5e93\u4e2d\u5bfc\u5165\u4ee3\u7801\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u4e2a\u5e03\u5c40\u6a21\u5f0f\u662f\u7531 Go \u7f16\u8bd1\u5668\u672c\u8eab\u6267\u884c\u7684\u3002\u6709\u5173\u66f4\u591a\u7ec6\u8282\uff0c\u8bf7\u53c2\u9605Go 1.4 release notes \u3002\u6ce8\u610f\uff0c\u4f60\u5e76\u4e0d\u5c40\u9650\u4e8e\u9876\u7ea7 internal \u76ee\u5f55\u3002\u5728\u9879\u76ee\u6811\u7684\u4efb\u4f55\u7ea7\u522b\u4e0a\u90fd\u53ef\u4ee5\u6709\u591a\u4e2a\u5185\u90e8\u76ee\u5f55\u3002 \u4f60\u53ef\u4ee5\u9009\u62e9\u5411 internal \u5305\u4e2d\u6dfb\u52a0\u4e00\u4e9b\u989d\u5916\u7684\u7ed3\u6784\uff0c\u4ee5\u5206\u9694\u5171\u4eab\u548c\u975e\u5171\u4eab\u7684\u5185\u90e8\u4ee3\u7801\u3002\u8fd9\u4e0d\u662f\u5fc5\u9700\u7684(\u7279\u522b\u662f\u5bf9\u4e8e\u8f83\u5c0f\u7684\u9879\u76ee)\uff0c\u4f46\u662f\u6700\u597d\u6709\u6709\u53ef\u89c6\u5316\u7684\u7ebf\u7d22\u6765\u663e\u793a\u9884\u671f\u7684\u5305\u7684\u7528\u9014\u3002\u4f60\u7684\u5b9e\u9645\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u53ef\u4ee5\u653e\u5728 /internal/app \u76ee\u5f55\u4e0b(\u4f8b\u5982 /internal/app/myapp )\uff0c\u8fd9\u4e9b\u5e94\u7528\u7a0b\u5e8f\u5171\u4eab\u7684\u4ee3\u7801\u53ef\u4ee5\u653e\u5728 /internal/pkg \u76ee\u5f55\u4e0b(\u4f8b\u5982 /internal/pkg/myprivlib )\u3002","title":"/internal"},{"location":"specification/golang-standards-project-layout/#pkg","text":"\u5916\u90e8\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u4f7f\u7528\u7684\u5e93\u4ee3\u7801(\u4f8b\u5982 /pkg/mypubliclib )\u3002\u5176\u4ed6\u9879\u76ee\u4f1a\u5bfc\u5165\u8fd9\u4e9b\u5e93\uff0c\u5e0c\u671b\u5b83\u4eec\u80fd\u6b63\u5e38\u5de5\u4f5c\uff0c\u6240\u4ee5\u5728\u8fd9\u91cc\u653e\u4e1c\u897f\u4e4b\u524d\u8981\u4e09\u601d:-)\u6ce8\u610f\uff0c internal \u76ee\u5f55\u662f\u786e\u4fdd\u79c1\u6709\u5305\u4e0d\u53ef\u5bfc\u5165\u7684\u66f4\u597d\u65b9\u6cd5\uff0c\u56e0\u4e3a\u5b83\u662f\u7531 Go \u5f3a\u5236\u6267\u884c\u7684\u3002 /pkg \u76ee\u5f55\u4ecd\u7136\u662f\u4e00\u79cd\u5f88\u597d\u7684\u65b9\u5f0f\uff0c\u53ef\u4ee5\u663e\u5f0f\u5730\u8868\u793a\u8be5\u76ee\u5f55\u4e2d\u7684\u4ee3\u7801\u5bf9\u4e8e\u5176\u4ed6\u4eba\u6765\u8bf4\u662f\u5b89\u5168\u4f7f\u7528\u7684\u597d\u65b9\u6cd5\u3002\u7531 Travis Jeffery \u64b0\u5199\u7684 I'll take pkg over internal \u535a\u5ba2\u6587\u7ae0\u63d0\u4f9b\u4e86 pkg \u548c internal \u76ee\u5f55\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u6982\u8ff0\uff0c\u4ee5\u53ca\u4ec0\u4e48\u65f6\u5019\u4f7f\u7528\u5b83\u4eec\u662f\u6709\u610f\u4e49\u7684\u3002 \u5f53\u6839\u76ee\u5f55\u5305\u542b\u5927\u91cf\u975e Go \u7ec4\u4ef6\u548c\u76ee\u5f55\u65f6\uff0c\u8fd9\u4e5f\u662f\u4e00\u79cd\u5c06 Go \u4ee3\u7801\u5206\u7ec4\u5230\u4e00\u4e2a\u4f4d\u7f6e\u7684\u65b9\u6cd5\uff0c\u8fd9\u4f7f\u5f97\u8fd0\u884c\u5404\u79cd Go \u5de5\u5177\u53d8\u5f97\u66f4\u52a0\u5bb9\u6613\uff08\u6b63\u5982\u5728\u8fd9\u4e9b\u6f14\u8bb2\u4e2d\u63d0\u5230\u7684\u90a3\u6837: \u6765\u81ea GopherCon EU 2018 \u7684 Best Practices for Industrial Programming , GopherCon 2018: Kat Zien - How Do You Structure Your Go Apps \u548c GoLab 2018 - Massimiliano Pippi - Project layout patterns in Go \uff09\u3002 \u5982\u679c\u4f60\u60f3\u67e5\u770b\u54ea\u4e2a\u6d41\u884c\u7684 Go \u5b58\u50a8\u5e93\u4f7f\u7528\u6b64\u9879\u76ee\u5e03\u5c40\u6a21\u5f0f\uff0c\u8bf7\u67e5\u770b /pkg \u76ee\u5f55\u3002\u8fd9\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u5e03\u5c40\u6a21\u5f0f\uff0c\u4f46\u5e76\u4e0d\u662f\u6240\u6709\u4eba\u90fd\u63a5\u53d7\u5b83\uff0c\u4e00\u4e9b Go \u793e\u533a\u7684\u4eba\u4e5f\u4e0d\u63a8\u8350\u5b83\u3002 \u5982\u679c\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u9879\u76ee\u771f\u7684\u5f88\u5c0f\uff0c\u5e76\u4e14\u989d\u5916\u7684\u5d4c\u5957\u5e76\u4e0d\u80fd\u589e\u52a0\u591a\u5c11\u4ef7\u503c(\u9664\u975e\u4f60\u771f\u7684\u60f3\u8981:-)\uff0c\u90a3\u5c31\u4e0d\u8981\u4f7f\u7528\u5b83\u3002\u5f53\u5b83\u53d8\u5f97\u8db3\u591f\u5927\u65f6\uff0c\u4f60\u7684\u6839\u76ee\u5f55\u4f1a\u53d8\u5f97\u975e\u5e38\u7e41\u7410\u65f6(\u5c24\u5176\u662f\u5f53\u4f60\u6709\u5f88\u591a\u975e Go \u5e94\u7528\u7ec4\u4ef6\u65f6)\uff0c\u8bf7\u8003\u8651\u4e00\u4e0b\u3002","title":"/pkg"},{"location":"specification/golang-standards-project-layout/#vendor","text":"\u5e94\u7528\u7a0b\u5e8f\u4f9d\u8d56\u9879(\u624b\u52a8\u7ba1\u7406\u6216\u4f7f\u7528\u4f60\u559c\u6b22\u7684\u4f9d\u8d56\u9879\u7ba1\u7406\u5de5\u5177\uff0c\u5982\u65b0\u7684\u5185\u7f6e Go Modules \u529f\u80fd)\u3002 go mod vendor \u547d\u4ee4\u5c06\u4e3a\u4f60\u521b\u5efa /vendor \u76ee\u5f55\u3002\u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u672a\u4f7f\u7528\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5904\u4e8e\u542f\u7528\u72b6\u6001\u7684 Go 1.14\uff0c\u5219\u53ef\u80fd\u9700\u8981\u5728 go build \u547d\u4ee4\u4e2d\u6dfb\u52a0 -mod=vendor \u6807\u5fd7\u3002 \u5982\u679c\u4f60\u6b63\u5728\u6784\u5efa\u4e00\u4e2a\u5e93\uff0c\u90a3\u4e48\u4e0d\u8981\u63d0\u4ea4\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u4f9d\u8d56\u9879\u3002 \u6ce8\u610f\uff0c\u81ea\u4ece 1.13 \u4ee5\u540e\uff0cGo \u8fd8\u542f\u7528\u4e86\u6a21\u5757\u4ee3\u7406\u529f\u80fd(\u9ed8\u8ba4\u4f7f\u7528 https://proxy.golang.org \u4f5c\u4e3a\u4ed6\u4eec\u7684\u6a21\u5757\u4ee3\u7406\u670d\u52a1\u5668)\u3002\u5728 here \u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u5b83\u7684\u4fe1\u606f\uff0c\u770b\u770b\u5b83\u662f\u5426\u7b26\u5408\u4f60\u7684\u6240\u6709\u9700\u6c42\u548c\u7ea6\u675f\u3002\u5982\u679c\u9700\u8981\uff0c\u90a3\u4e48\u4f60\u6839\u672c\u4e0d\u9700\u8981 vendor \u76ee\u5f55\u3002 \u56fd\u5185\u6a21\u5757\u4ee3\u7406\u529f\u80fd\u9ed8\u8ba4\u662f\u88ab\u5899\u7684\uff0c\u4e03\u725b\u4e91\u6709\u7ef4\u62a4\u4e13\u95e8\u7684\u7684 \u6a21\u5757\u4ee3\u7406 \u3002","title":"/vendor"},{"location":"specification/golang-standards-project-layout/#_1","text":"","title":"\u670d\u52a1\u5e94\u7528\u7a0b\u5e8f\u76ee\u5f55"},{"location":"specification/golang-standards-project-layout/#api","text":"OpenAPI/Swagger \u89c4\u8303\uff0cJSON \u6a21\u5f0f\u6587\u4ef6\uff0c\u534f\u8bae\u5b9a\u4e49\u6587\u4ef6\u3002 \u6709\u5173\u793a\u4f8b\uff0c\u8bf7\u53c2\u89c1 /api \u76ee\u5f55\u3002","title":"/api"},{"location":"specification/golang-standards-project-layout/#web","text":"","title":"Web \u5e94\u7528\u7a0b\u5e8f\u76ee\u5f55"},{"location":"specification/golang-standards-project-layout/#web_1","text":"\u7279\u5b9a\u4e8e Web \u5e94\u7528\u7a0b\u5e8f\u7684\u7ec4\u4ef6:\u9759\u6001 Web \u8d44\u4ea7\u3001\u670d\u52a1\u5668\u7aef\u6a21\u677f\u548c SPAs\u3002","title":"/web"},{"location":"specification/golang-standards-project-layout/#_2","text":"","title":"\u901a\u7528\u5e94\u7528\u76ee\u5f55"},{"location":"specification/golang-standards-project-layout/#configs","text":"\u914d\u7f6e\u6587\u4ef6\u6a21\u677f\u6216\u9ed8\u8ba4\u914d\u7f6e\u3002 \u5c06\u4f60\u7684 confd \u6216 consul-template \u6a21\u677f\u6587\u4ef6\u653e\u5728\u8fd9\u91cc\u3002","title":"/configs"},{"location":"specification/golang-standards-project-layout/#init","text":"System init\uff08systemd\uff0cupstart\uff0csysv\uff09\u548c process manager/supervisor\uff08runit\uff0csupervisor\uff09\u914d\u7f6e\u3002","title":"/init"},{"location":"specification/golang-standards-project-layout/#scripts","text":"\u6267\u884c\u5404\u79cd\u6784\u5efa\u3001\u5b89\u88c5\u3001\u5206\u6790\u7b49\u64cd\u4f5c\u7684\u811a\u672c\u3002 \u8fd9\u4e9b\u811a\u672c\u4fdd\u6301\u4e86\u6839\u7ea7\u522b\u7684 Makefile \u53d8\u5f97\u5c0f\u800c\u7b80\u5355(\u4f8b\u5982\uff0c https://github.com/hashicorp/terraform/blob/master/Makefile )\u3002 \u6709\u5173\u793a\u4f8b\uff0c\u8bf7\u53c2\u89c1 /scripts \u76ee\u5f55\u3002","title":"/scripts"},{"location":"specification/golang-standards-project-layout/#build","text":"\u6253\u5305\u548c\u6301\u7eed\u96c6\u6210\u3002 \u5c06\u4f60\u7684\u4e91( AMI )\u3001\u5bb9\u5668( Docker )\u3001\u64cd\u4f5c\u7cfb\u7edf( deb\u3001rpm\u3001pkg )\u5305\u914d\u7f6e\u548c\u811a\u672c\u653e\u5728 /build/package \u76ee\u5f55\u4e0b\u3002 \u5c06\u4f60\u7684 CI (travis\u3001circle\u3001drone)\u914d\u7f6e\u548c\u811a\u672c\u653e\u5728 /build/ci \u76ee\u5f55\u4e2d\u3002\u8bf7\u6ce8\u610f\uff0c\u6709\u4e9b CI \u5de5\u5177(\u4f8b\u5982 Travis CI)\u5bf9\u914d\u7f6e\u6587\u4ef6\u7684\u4f4d\u7f6e\u975e\u5e38\u6311\u5254\u3002\u5c1d\u8bd5\u5c06\u914d\u7f6e\u6587\u4ef6\u653e\u5728 /build/ci \u76ee\u5f55\u4e2d\uff0c\u5c06\u5b83\u4eec\u94fe\u63a5\u5230 CI \u5de5\u5177\u671f\u671b\u5b83\u4eec\u7684\u4f4d\u7f6e(\u5982\u679c\u53ef\u80fd\u7684\u8bdd)\u3002","title":"/build"},{"location":"specification/golang-standards-project-layout/#deployments","text":"IaaS\u3001PaaS\u3001\u7cfb\u7edf\u548c\u5bb9\u5668\u7f16\u914d\u90e8\u7f72\u914d\u7f6e\u548c\u6a21\u677f(docker-compose\u3001kubernetes/helm\u3001mesos\u3001terraform\u3001bosh)\u3002\u6ce8\u610f\uff0c\u5728\u4e00\u4e9b\u5b58\u50a8\u5e93\u4e2d(\u7279\u522b\u662f\u4f7f\u7528 kubernetes \u90e8\u7f72\u7684\u5e94\u7528\u7a0b\u5e8f)\uff0c\u8fd9\u4e2a\u76ee\u5f55\u88ab\u79f0\u4e3a /deploy \u3002","title":"/deployments"},{"location":"specification/golang-standards-project-layout/#test","text":"\u989d\u5916\u7684\u5916\u90e8\u6d4b\u8bd5\u5e94\u7528\u7a0b\u5e8f\u548c\u6d4b\u8bd5\u6570\u636e\u3002\u4f60\u53ef\u4ee5\u968f\u65f6\u6839\u636e\u9700\u6c42\u6784\u9020 /test \u76ee\u5f55\u3002\u5bf9\u4e8e\u8f83\u5927\u7684\u9879\u76ee\uff0c\u6709\u4e00\u4e2a\u6570\u636e\u5b50\u76ee\u5f55\u662f\u6709\u610f\u4e49\u7684\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 /test/data \u6216 /test/testdata (\u5982\u679c\u4f60\u9700\u8981\u5ffd\u7565\u76ee\u5f55\u4e2d\u7684\u5185\u5bb9)\u3002\u8bf7\u6ce8\u610f\uff0cGo \u8fd8\u4f1a\u5ffd\u7565\u4ee5\u201c.\u201d\u6216\u201c_\u201d\u5f00\u5934\u7684\u76ee\u5f55\u6216\u6587\u4ef6\uff0c\u56e0\u6b64\u5728\u5982\u4f55\u547d\u540d\u6d4b\u8bd5\u6570\u636e\u76ee\u5f55\u65b9\u9762\u6709\u66f4\u5927\u7684\u7075\u6d3b\u6027\u3002 \u6709\u5173\u793a\u4f8b\uff0c\u8bf7\u53c2\u89c1 /test \u76ee\u5f55\u3002","title":"/test"},{"location":"specification/golang-standards-project-layout/#_3","text":"","title":"\u5176\u4ed6\u76ee\u5f55"},{"location":"specification/golang-standards-project-layout/#docs","text":"\u8bbe\u8ba1\u548c\u7528\u6237\u6587\u6863(\u9664\u4e86 godoc \u751f\u6210\u7684\u6587\u6863\u4e4b\u5916)\u3002 \u6709\u5173\u793a\u4f8b\uff0c\u8bf7\u53c2\u9605 /docs \u76ee\u5f55\u3002","title":"/docs"},{"location":"specification/golang-standards-project-layout/#tools","text":"\u8fd9\u4e2a\u9879\u76ee\u7684\u652f\u6301\u5de5\u5177\u3002\u6ce8\u610f\uff0c\u8fd9\u4e9b\u5de5\u5177\u53ef\u4ee5\u4ece /pkg \u548c /internal \u76ee\u5f55\u5bfc\u5165\u4ee3\u7801\u3002 \u6709\u5173\u793a\u4f8b\uff0c\u8bf7\u53c2\u89c1 /tools \u76ee\u5f55\u3002","title":"/tools"},{"location":"specification/golang-standards-project-layout/#examples","text":"\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u548c/\u6216\u516c\u5171\u5e93\u7684\u793a\u4f8b\u3002 \u6709\u5173\u793a\u4f8b\uff0c\u8bf7\u53c2\u89c1 /examples \u76ee\u5f55\u3002","title":"/examples"},{"location":"specification/golang-standards-project-layout/#third_party","text":"\u5916\u90e8\u8f85\u52a9\u5de5\u5177\uff0c\u5206\u53c9\u4ee3\u7801\u548c\u5176\u4ed6\u7b2c\u4e09\u65b9\u5de5\u5177(\u4f8b\u5982 Swagger UI)\u3002","title":"/third_party"},{"location":"specification/golang-standards-project-layout/#githooks","text":"Git hooks\u3002","title":"/githooks"},{"location":"specification/golang-standards-project-layout/#assets","text":"\u4e0e\u5b58\u50a8\u5e93\u4e00\u8d77\u4f7f\u7528\u7684\u5176\u4ed6\u8d44\u4ea7(\u56fe\u50cf\u3001\u5fbd\u6807\u7b49)\u3002","title":"/assets"},{"location":"specification/golang-standards-project-layout/#website","text":"\u5982\u679c\u4f60\u4e0d\u4f7f\u7528 Github \u9875\u9762\uff0c\u5219\u5728\u8fd9\u91cc\u653e\u7f6e\u9879\u76ee\u7684\u7f51\u7ad9\u6570\u636e\u3002 \u6709\u5173\u793a\u4f8b\uff0c\u8bf7\u53c2\u89c1 /website \u76ee\u5f55\u3002","title":"/website"},{"location":"specification/golang-standards-project-layout/#_4","text":"","title":"\u4f60\u4e0d\u5e94\u8be5\u62e5\u6709\u7684\u76ee\u5f55"},{"location":"specification/golang-standards-project-layout/#src","text":"\u6709\u4e9b Go \u9879\u76ee\u786e\u5b9e\u6709\u4e00\u4e2a src \u6587\u4ef6\u5939\uff0c\u4f46\u8fd9\u901a\u5e38\u53d1\u751f\u5728\u5f00\u53d1\u4eba\u5458\u6709 Java \u80cc\u666f\uff0c\u5728\u90a3\u91cc\u5b83\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u6a21\u5f0f\u3002\u5982\u679c\u53ef\u4ee5\u7684\u8bdd\uff0c\u5c3d\u91cf\u4e0d\u8981\u91c7\u7528\u8fd9\u79cd Java \u6a21\u5f0f\u3002\u4f60\u771f\u7684\u4e0d\u5e0c\u671b\u4f60\u7684 Go \u4ee3\u7801\u6216 Go \u9879\u76ee\u770b\u8d77\u6765\u50cf Java:-) \u4e0d\u8981\u5c06\u9879\u76ee\u7ea7\u522b src \u76ee\u5f55\u4e0e Go \u7528\u4e8e\u5176\u5de5\u4f5c\u7a7a\u95f4\u7684 src \u76ee\u5f55(\u5982 How to Write Go Code \u4e2d\u6240\u8ff0)\u6df7\u6dc6\u3002 $GOPATH \u73af\u5883\u53d8\u91cf\u6307\u5411\u4f60\u7684(\u5f53\u524d)\u5de5\u4f5c\u7a7a\u95f4(\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5b83\u6307\u5411\u975e windows \u7cfb\u7edf\u4e0a\u7684 $HOME/go )\u3002\u8fd9\u4e2a\u5de5\u4f5c\u7a7a\u95f4\u5305\u62ec\u9876\u5c42 /pkg , /bin \u548c /src \u76ee\u5f55\u3002\u4f60\u7684\u5b9e\u9645\u9879\u76ee\u6700\u7ec8\u662f /src \u4e0b\u7684\u4e00\u4e2a\u5b50\u76ee\u5f55\uff0c\u56e0\u6b64\uff0c\u5982\u679c\u4f60\u7684\u9879\u76ee\u4e2d\u6709 /src \u76ee\u5f55\uff0c\u90a3\u4e48\u9879\u76ee\u8def\u5f84\u5c06\u662f\u8fd9\u6837\u7684: /some/path/to/workspace/src/your_project/src/your_code.go \u3002\u6ce8\u610f\uff0c\u5728 Go 1.11 \u4e2d\uff0c\u53ef\u4ee5\u5c06\u9879\u76ee\u653e\u5728 GOPATH \u4e4b\u5916\uff0c\u4f46\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u4f7f\u7528\u8fd9\u79cd\u5e03\u5c40\u6a21\u5f0f\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\u3002","title":"/src"},{"location":"specification/golang-standards-project-layout/#badges","text":"Go Report Card - It will scan your code with gofmt , go vet , gocyclo , golint , ineffassign , license and misspell . Replace github.com/golang-standards/project-layout with your project reference. GoDoc - It will provide online version of your GoDoc generated documentation. Change the link to point to your project. Release - It will show the latest release number for your project. Change the github link to point to your project.","title":"Badges"},{"location":"specification/golang-standards-project-layout/#notes","text":"A more opinionated project template with sample/reusable configs, scripts and code is a WIP.","title":"Notes"}]}